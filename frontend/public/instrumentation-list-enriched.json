{
  "2.17": [
    {
      "description": "This instrumentation enables SERVER spans and metrics for the ActiveJ HTTP server.",
      "minimum_java_version": 17,
      "name": "activej-http-6.0",
      "scope": {
        "name": "io.opentelemetry.activej-http-6.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/activej-http-6.0",
      "target_versions": {
        "javaagent": [
          "io.activej:activej-http:[6.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "akka-actor-2.3",
      "scope": {
        "name": "io.opentelemetry.akka-actor-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-2.3",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.3,)",
          "com.typesafe.akka:akka-actor_2.12:[2.3,)",
          "com.typesafe.akka:akka-actor_2.13:[2.3,)"
        ]
      }
    },
    {
      "name": "akka-actor-fork-join-2.5",
      "scope": {
        "name": "io.opentelemetry.akka-actor-fork-join-2.5"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-fork-join-2.5",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.5,)",
          "com.typesafe.akka:akka-actor_2.12:[2.5,2.6)",
          "com.typesafe.akka:akka-actor_2.13:[2.5.23,2.6)"
        ]
      }
    },
    {
      "description": "This instrumentation enables CLIENT and SERVER spans and metrics for the Akka HTTP client and server.",
      "name": "akka-http-10.0",
      "scope": {
        "name": "io.opentelemetry.akka-http-10.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/akka/akka-http-10.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-http_2.11:[10,)",
          "com.typesafe.akka:akka-http_2.12:[10,)",
          "com.typesafe.akka:akka-http_2.13:[10,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "The Alibaba Druid instrumentation generates database connection pool metrics for druid data sources.\n",
      "name": "alibaba-druid-1.0",
      "scope": {
        "name": "io.opentelemetry.alibaba-druid-1.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/alibaba-druid-1.0",
      "target_versions": {
        "javaagent": [
          "com.alibaba:druid:(,)"
        ],
        "library": [
          "com.alibaba:druid:1.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "This instrumentation enables database connection pools metrics for Apache DBCP.\nThe instrumentation uses `MBeanRegistration` methods for lifecycle detection, therefore it only activates if the `BasicDataSource` is registered to an `MBeanServer`. If using Spring Boot, this happens automatically as all Spring beans that support JMX registration are automatically registered by default.\n",
      "name": "apache-dbcp-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-dbcp-2.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/apache-dbcp-2.0",
      "target_versions": {
        "javaagent": [
          "org.apache.commons:commons-dbcp2:[2,)"
        ],
        "library": [
          "org.apache.commons:commons-dbcp2:2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        }
      ],
      "description": "The Apache Dubbo instrumentation provides client and server spans for Apache Dubbo RPC calls. Each call produces a span named after the Dubbo method, enriched with standard RPC attributes (system, service, method), network attributes, and error details if an exception occurs.",
      "name": "apache-dubbo-2.7",
      "scope": {
        "name": "io.opentelemetry.apache-dubbo-2.7"
      },
      "semconv": [
        "Aws",
        "Database Client"
      ],
      "source_path": "instrumentation/apache-dubbo-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.dubbo:dubbo:[2.7,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for the Apache HttpAsyncClient.",
      "name": "apache-httpasyncclient-4.1",
      "scope": {
        "name": "io.opentelemetry.apache-httpasyncclient-4.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpasyncclient-4.1",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents:httpasyncclient:[4.1,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for versions 2 and 3 of the Apache HttpClient.",
      "name": "apache-httpclient-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-2.0",
      "target_versions": {
        "javaagent": [
          "commons-httpclient:commons-httpclient:[2.0,4.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for version 4 of the Apache HttpClient.",
      "name": "apache-httpclient-4.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-client:(,3.0.0)",
          "org.apache.httpcomponents:httpclient:[4.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables CLIENT spans and metrics for the Apache HttpClient.",
      "name": "apache-httpclient-4.3",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.3"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.3",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents:httpclient:[4.3,4.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for version 5 of the Apache HttpClient.",
      "name": "apache-httpclient-5.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents.client5:httpclient5:[5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables CLIENT spans and metrics for the Apache HttpClient.",
      "name": "apache-httpclient-5.2",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.2",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents.client5:httpclient5:5.2.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `apache-shenyu.meta.` prefixed span attributes `app-name`, `service-name`, `context-path`, `param-types`, `id`, `method-name`, `rpc-type`, `path` and `rpc-ext`.\n",
          "name": "otel.instrumentation.apache-shenyu.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation does not emit telemetry on its own. Instead, it augments existing SERVER spans and HTTP server metrics with the HTTP route and Shenyu specific attributes.\n",
      "name": "apache-shenyu-2.4",
      "scope": {
        "name": "io.opentelemetry.apache-shenyu-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/apache-shenyu-2.4",
      "target_versions": {
        "javaagent": [
          "org.apache.shenyu:shenyu-web:[2.4.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation enables CLIENT and SERVER spans and metrics for the Armeria HTTP client and server.",
      "name": "armeria-1.3",
      "scope": {
        "name": "io.opentelemetry.armeria-1.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/armeria/armeria-1.3",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria:[1.3.0,)"
        ],
        "library": [
          "com.linecorp.armeria:armeria:1.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT and SERVER spans and metrics for the Armeria gRPC client and server.",
      "name": "armeria-grpc-1.14",
      "scope": {
        "name": "io.opentelemetry.armeria-grpc-1.14"
      },
      "semconv": [],
      "source_path": "instrumentation/armeria/armeria-grpc-1.14",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria-grpc:[1.14.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for version 1 of the AsyncHttpClient (AHC) HTTP client.",
      "name": "async-http-client-1.9",
      "scope": {
        "name": "io.opentelemetry.async-http-client-1.9"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-1.9",
      "target_versions": {
        "javaagent": [
          "com.ning:async-http-client:[1.9.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for version 2 of the AsyncHttpClient (AHC) HTTP client.",
      "name": "async-http-client-2.0",
      "scope": {
        "name": "io.opentelemetry.async-http-client-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-2.0",
      "target_versions": {
        "javaagent": [
          "org.asynchttpclient:async-http-client:[2.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it hooks into the Avaje Jex Context to extract the HTTP route and attach it to existing SERVER spans and HTTP server metrics.\n",
      "minimum_java_version": 21,
      "name": "avaje-jex-3.0",
      "scope": {
        "name": "io.opentelemetry.avaje-jex-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/avaje-jex-3.0",
      "target_versions": {
        "javaagent": [
          "io.avaje:avaje-jex:[3.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "Provides lightweight instrumentation of the Lambda core library, supporting all versions. Use this package if you only use `RequestStreamHandler` or know you don't use any event classes from `aws-lambda-java-events`. This also includes when you are using `aws-serverless-java-container` to run e.g., a Spring Boot application on Lambda.\n",
      "name": "aws-lambda-core-1.0",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-core-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/aws-lambda/aws-lambda-core-1.0",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "Provides full instrumentation of the Lambda library, including standard and custom event types, from `aws-lambda-java-events` 2.2+.\n",
      "name": "aws-lambda-events-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-events-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/aws-lambda/aws-lambda-events-2.2",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0",
          "com.amazonaws:aws-lambda-java-events:2.2.1"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental span attributes for AWS SDK instrumentation.",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "aws-sdk-1.11",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-1.11"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-1.11",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-java-sdk-core:[1.10.33,)",
          "com.amazonaws:aws-java-sdk-sqs:[1.10.33,)"
        ],
        "library": [
          "com.amazonaws:aws-java-sdk-core:1.11.0",
          "com.amazonaws:aws-java-sdk-sqs:[1.11.106,1.12.583)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Determines whether errors returned by each individual HTTP request should be recorded as events for the SDK span.",
          "name": "otel.instrumentation.aws-sdk.experimental-record-individual-http-error",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental span attributes for AWS SDK instrumentation.",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether the configured TextMapPropagator should be used to inject into supported messaging attributes (for SQS).",
          "name": "otel.instrumentation.aws-sdk.experimental-use-propagator-for-messaging",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether Generative AI events include full content of user and assistant messages. Note that full content can have data privacy and size concerns and care should be taken when enabling this",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "aws-sdk-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-2.2"
      },
      "semconv": [
        "Database Client",
        "Gen Ai"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-2.2",
      "target_versions": {
        "javaagent": [
          "software.amazon.awssdk:aws-core:[2.2.0,)",
          "software.amazon.awssdk:bedrock-runtime:[2.25.63,)",
          "software.amazon.awssdk:lambda:[2.17.0,)",
          "software.amazon.awssdk:sns:[2.2.0,)",
          "software.amazon.awssdk:sqs:[2.2.0,)"
        ],
        "library": [
          "software.amazon.awssdk:aws-core:2.2.0",
          "software.amazon.awssdk:aws-json-protocol:2.2.0",
          "software.amazon.awssdk:lambda:2.2.0",
          "software.amazon.awssdk:sns:2.2.0",
          "software.amazon.awssdk:sqs:2.2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                }
              ],
              "description": "GenAI operation duration.",
              "name": "gen_ai.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.token.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Measures number of input and output tokens used.",
              "name": "gen_ai.client.token.usage",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "token"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "azure-core-1.14",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.14"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.14",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.14.0,1.19.0)"
        ]
      }
    },
    {
      "name": "azure-core-1.19",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.19"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.19",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.19.0,1.36.0)"
        ]
      }
    },
    {
      "name": "azure-core-1.36",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.36"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.36",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.36.0,)"
        ]
      }
    },
    {
      "description": "The c3p0 instrumentation provides connection pool metrics for c3p0 data sources.",
      "name": "c3p0-0.9",
      "scope": {
        "name": "io.opentelemetry.c3p0-0.9"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/c3p0-0.9",
      "target_versions": {
        "javaagent": [
          "com.mchange:c3p0:(,)"
        ],
        "library": [
          "com.mchange:c3p0:0.9.2"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes.",
          "name": "otel.instrumentation.camel.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Apache Camel 2.x applications by generating spans for each route execution. For Camel versions 3.5 and newer, users should instead use the native 'camel-opentelemetry' component provided directly by the Camel project.\n",
      "name": "camel-2.20",
      "scope": {
        "name": "io.opentelemetry.camel-2.20"
      },
      "semconv": [],
      "source_path": "instrumentation/camel-2.20",
      "target_versions": {
        "javaagent": [
          "org.apache.camel:camel-core:[2.19,3)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "name": "cassandra-3.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/cassandra/cassandra-3.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.cassandra:cassandra-driver-core:[3.0,4.0)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "name": "cassandra-4.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/cassandra/cassandra-4.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.0,4.4)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "name": "cassandra-4.4",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.4"
      },
      "semconv": [],
      "source_path": "instrumentation/cassandra/cassandra-4.4",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.4,]"
        ],
        "library": [
          "com.datastax.oss:java-driver-core:4.4.0"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the V1 ClickHouseClient, providing database client spans and metrics.",
      "name": "clickhouse-client-0.5",
      "scope": {
        "name": "io.opentelemetry.clickhouse-client-0.5"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/clickhouse-client-0.5",
      "target_versions": {
        "javaagent": [
          "com.clickhouse.client:clickhouse-client:[0.5.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental span attributes couchbase.operation_id and couchbase.local.address",
          "name": "otel.instrumentation.couchbase.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "name": "couchbase-2.0",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-2.0",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2,3)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental span attributes couchbase.operation_id and couchbase.local.address",
          "name": "otel.instrumentation.couchbase.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "name": "couchbase-2.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-2.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2.6.0,3)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "name": "couchbase-3.1",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1,3.1.6)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "name": "couchbase-3.1.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1.6,3.2.0)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "name": "couchbase-3.2",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.2",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.2.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the dropwizard metrics instrumentation.",
          "name": "otel.instrumentation.dropwizard-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "The dropwizard-metrics instrumentation for the dropwizard/codahale metrics library produces OpenTelemetry compliant versions of the metrics generated by the Dropwizard MetricRegistry.\nThe Dropwizard metrics API does not have a concept of metric labels/tags/attributes, thus the data produced by this integration might be of very low quality, depending on how the API is used in the instrumented application.\n",
      "disabled_by_default": true,
      "name": "dropwizard-metrics-4.0",
      "scope": {
        "name": "io.opentelemetry.dropwizard-metrics-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-metrics-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard.metrics:metrics-core:[4.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "dropwizard-views-0.7",
      "scope": {
        "name": "io.opentelemetry.dropwizard-views-0.7"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-views-0.7",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-views:(,3.0.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables client spans for Elasticsearch API client requests for version 7 of the client. Versions 8.10 and later have native support for OpenTelemetry.",
      "name": "elasticsearch-api-client-7.16",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-api-client-7.16"
      },
      "semconv": [],
      "source_path": "instrumentation/elasticsearch/elasticsearch-api-client-7.16",
      "target_versions": {
        "javaagent": [
          "co.elastic.clients:elasticsearch-java:[7.16,7.17.20)",
          "co.elastic.clients:elasticsearch-java:[8.0.0,8.10)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries\nmay contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Elasticsearch REST clients.",
      "name": "elasticsearch-rest-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[5.0,6.4)",
          "org.elasticsearch.client:rest:[5.0,6.4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Elasticsearch REST clients.",
      "name": "elasticsearch-rest-6.4",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-6.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-6.4",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[6.4,7.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Elasticsearch REST clients.",
      "name": "elasticsearch-rest-7.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-7.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-7.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[7.0,)"
        ],
        "library": [
          "org.elasticsearch.client:elasticsearch-rest-client:7.0.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes.",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables client spans for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "name": "elasticsearch-transport-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.0.0,5.3.0)",
          "org.elasticsearch:elasticsearch:[5.0.0,5.3.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes.",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables client spans for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "name": "elasticsearch-transport-5.3",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.3"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.3",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.3.0,6.0.0)",
          "org.elasticsearch:elasticsearch:[5.3.0,6.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.search.types",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes.",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables client spans for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "name": "elasticsearch-transport-6.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-6.0"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-6.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[6.0.0,)",
          "org.elasticsearch:elasticsearch:[6.0.0,8.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "List of Executor subclasses to be instrumented.",
          "name": "otel.instrumentation.executors.include",
          "type": "list"
        },
        {
          "default": false,
          "description": "Whether to instrument all classes that implement the Executor interface.",
          "name": "otel.instrumentation.executors.include-all",
          "type": "boolean"
        }
      ],
      "description": "The executor instrumentation ensures that context is automatically propagated when using common Java executors (e.g., ThreadPoolExecutor, ScheduledThreadPoolExecutor, ForkJoinPool). When a task is submitted, the current context is captured and bound to the task. Then, when the task eventually runs, even if it\u2019s on a different thread, the instrumentation reactivates that context, enabling consistent correlation across concurrent and asynchronous workflows.\n",
      "name": "executors",
      "scope": {
        "name": "io.opentelemetry.executors"
      },
      "semconv": [],
      "source_path": "instrumentation/executors",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "description": "This instrumentation for Finagle HTTP clients and servers ensures that telemetry is correctly generated by the underlying Netty instrumentation. It augments existing telemetry by bridging the gap between Finagle's abstractions and Netty's pipeline, primarily for context propagation.\n",
      "name": "finagle-http-23.11",
      "scope": {
        "name": "io.opentelemetry.finagle-http-23.11"
      },
      "semconv": [],
      "source_path": "instrumentation/finagle-http-23.11",
      "target_versions": {
        "javaagent": [
          "com.twitter:finagle-http_2.12:[23.11.0,]",
          "com.twitter:finagle-http_2.13:[23.11.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation for the Finatra web framework augments the telemetry generated by the underlying Netty instrumentation. It provides more specific, high-level context, such as route information, to the spans generated by Netty.",
      "name": "finatra-2.9",
      "scope": {
        "name": "io.opentelemetry.finatra-2.9"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/finatra-2.9",
      "target_versions": {
        "javaagent": [
          "com.twitter:finatra-http_2.11:[2.9.0,]",
          "com.twitter:finatra-http_2.12:[2.9.0,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "geode-1.4",
      "scope": {
        "name": "io.opentelemetry.geode-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/geode-1.4",
      "target_versions": {
        "javaagent": [
          "org.apache.geode:geode-core:[1.4.0,)"
        ]
      }
    },
    {
      "name": "google-http-client-1.19",
      "scope": {
        "name": "io.opentelemetry.google-http-client-1.19"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/google-http-client-1.19",
      "target_versions": {
        "javaagent": [
          "com.google.http-client:google-http-client:[1.19.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "grails-3.0",
      "scope": {
        "name": "io.opentelemetry.grails-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/grails-3.0",
      "target_versions": {
        "javaagent": [
          "org.grails:grails-web-url-mappings:[3.0,)"
        ]
      }
    },
    {
      "name": "graphql-java-12.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-12.0"
      },
      "semconv": [],
      "source_path": "instrumentation/graphql-java/graphql-java-12.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[12,20)"
        ],
        "library": [
          "com.graphql-java:graphql-java:[12.0,19.+)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "graphql-java-20.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/graphql-java/graphql-java-20.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[20,)"
        ],
        "library": [
          "com.graphql-java:graphql-java:20.0"
        ]
      }
    },
    {
      "name": "grizzly-2.3",
      "scope": {
        "name": "io.opentelemetry.grizzly-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/grizzly-2.3",
      "target_versions": {
        "javaagent": [
          "org.glassfish.grizzly:grizzly-http:[2.3,)"
        ]
      }
    },
    {
      "name": "grpc-1.6",
      "scope": {
        "name": "io.opentelemetry.grpc-1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/grpc-1.6",
      "target_versions": {
        "javaagent": [
          "io.grpc:grpc-core:[1.6.0,)"
        ],
        "library": [
          "io.grpc:grpc-core:1.6.0"
        ]
      }
    },
    {
      "name": "guava-10.0",
      "scope": {
        "name": "io.opentelemetry.guava-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/guava-10.0",
      "target_versions": {
        "javaagent": [
          "com.google.guava:guava:[10.0,]"
        ],
        "library": [
          "com.google.guava:guava:10.0"
        ]
      }
    },
    {
      "name": "gwt-2.0",
      "scope": {
        "name": "io.opentelemetry.gwt-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/gwt-2.0",
      "target_versions": {
        "javaagent": [
          "com.google.gwt:gwt-servlet:[2.0.0,)",
          "org.gwtproject:gwt-servlet:[2.10.0,)"
        ]
      }
    },
    {
      "name": "hibernate-3.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-3.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[3.3.0.GA,4.0.0.Final)"
        ]
      }
    },
    {
      "name": "hibernate-4.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-4.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.0.0.Final,6)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "hibernate-6.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-6.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[6.0.0.Final,)"
        ]
      }
    },
    {
      "name": "hibernate-procedure-call-4.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-procedure-call-4.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-procedure-call-4.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.3.0.Final,)"
        ]
      }
    },
    {
      "name": "hibernate-reactive-1.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-reactive-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-reactive-1.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate.reactive:hibernate-reactive-core:(,)"
        ]
      }
    },
    {
      "name": "hikaricp-3.0",
      "scope": {
        "name": "io.opentelemetry.hikaricp-3.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/hikaricp-3.0",
      "target_versions": {
        "javaagent": [
          "com.zaxxer:HikariCP:[3.0.0,)"
        ],
        "library": [
          "com.zaxxer:HikariCP:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time it took to create a new connection.",
              "name": "db.client.connections.create_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of connection timeouts that have occurred trying to obtain a connection from the pool.",
              "name": "db.client.connections.timeouts",
              "type": "LONG_SUM",
              "unit": "timeouts"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time between borrowing a connection and returning it to the pool.",
              "name": "db.client.connections.use_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time it took to obtain an open connection from the pool.",
              "name": "db.client.connections.wait_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to create a new connection.",
              "name": "db.client.connection.create_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connection timeouts that have occurred trying to obtain a connection from the pool.",
              "name": "db.client.connection.timeouts",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "timeout"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time between borrowing a connection and returning it to the pool.",
              "name": "db.client.connection.use_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to obtain an open connection from the pool.",
              "name": "db.client.connection.wait_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "http-url-connection",
      "scope": {
        "name": "io.opentelemetry.http-url-connection"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/http-url-connection",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "hystrix-1.4",
      "scope": {
        "name": "io.opentelemetry.hystrix-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/hystrix-1.4",
      "target_versions": {
        "javaagent": [
          "com.netflix.hystrix:hystrix-core:[1.4.0,)"
        ]
      }
    },
    {
      "name": "influxdb-2.4",
      "scope": {
        "name": "io.opentelemetry.influxdb-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/influxdb-2.4",
      "target_versions": {
        "javaagent": [
          "org.influxdb:influxdb-java:[2.4,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "java-http-client",
      "scope": {
        "name": "io.opentelemetry.java-http-client"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/java-http-client",
      "target_versions": {
        "javaagent": [
          "Java 11+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "java-http-server",
      "scope": {
        "name": "io.opentelemetry.java-http-server"
      },
      "semconv": [],
      "source_path": "instrumentation/java-http-server",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "javalin-5.0",
      "scope": {
        "name": "io.opentelemetry.javalin-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/javalin-5.0",
      "target_versions": {
        "javaagent": [
          "io.javalin:javalin:[5.0.0,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "jaxrs-1.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-1.0",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:jsr311-api:[0.5,)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-annotations"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-annotations",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:javax.ws.rs-api:[,]"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-cxf-3.2",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-cxf-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-cxf-3.2",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxrs:[3.2,4)",
          "org.apache.tomee:openejb-cxf-rs:(8,)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-jersey-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-jersey-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-jersey-2.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.containers:jersey-container-servlet:[2.0,3.0.0)",
          "org.glassfish.jersey.core:jersey-server:[2.0,3.0.0)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-resteasy-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-jaxrs:[3.0.0.Final,3.1.0.Final)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.5.0.Final,4)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-resteasy-3.1",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[4.0.0.Final,6)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.1.0.Final,3.5.0.Final)"
        ]
      }
    },
    {
      "name": "jaxrs-3.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-annotations"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-annotations",
      "target_versions": {
        "javaagent": [
          "jakarta.ws.rs:jakarta.ws.rs-api:[3.0.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-jersey-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-jersey-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-jersey-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.core:jersey-server:[3.0.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-resteasy-6.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-resteasy-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-resteasy-6.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[6.0.0.Final,)"
        ]
      }
    },
    {
      "name": "jaxws-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0",
      "target_versions": {
        "javaagent": [
          "javax.xml.ws:jaxws-api:[2.0,]"
        ]
      }
    },
    {
      "name": "jaxws-2.0-axis2-1.6",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0-axis2-1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0-axis2-1.6",
      "target_versions": {
        "javaagent": [
          "org.apache.axis2:axis2-jaxws:[1.6.0,)"
        ]
      }
    },
    {
      "name": "jaxws-cxf-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-cxf-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-cxf-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxws:[3.0.0,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "jaxws-jws-api-1.1",
      "scope": {
        "name": "io.opentelemetry.jaxws-jws-api-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-jws-api-1.1",
      "target_versions": {
        "javaagent": [
          "javax.jws:javax.jws-api:[1.1,]"
        ]
      }
    },
    {
      "name": "jaxws-metro-2.2",
      "scope": {
        "name": "io.opentelemetry.jaxws-metro-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-metro-2.2",
      "target_versions": {
        "javaagent": [
          "com.sun.xml.ws:jaxws-rt:[2.2.0.1,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-appender-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-appender-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-appender-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-mdc-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-mdc-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-mdc-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": false,
          "description": "Enables instrumentation of JDBC datasource connections.",
          "name": "otel.instrumentation.jdbc-datasource.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Sets whether the query parameters should be captured as span attributes named <code>db.query.parameter.&lt;key&gt;</code>. Enabling this option disables the statement sanitization.<p>WARNING: captured query parameters may contain sensitive information such as passwords, personally identifiable information or protected health info.\n",
          "name": "otel.instrumentation.jdbc.experimental.capture-query-parameters",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental instrumentation to create spans for COMMIT and ROLLBACK operations.",
          "name": "otel.instrumentation.jdbc.experimental.transaction.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables statement sanitization for database queries. Takes precedent to otel.instrumentation.common.db-statement-sanitizer.enabled.",
          "name": "otel.instrumentation.jdbc.statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "The JDBC instrumentation provides database client spans and metrics. Each call produces a span named after the SQL verb, enriched with standard DB client attributes (system, database, operation, sanitized statement, peer address) and error details if an exception occurs.\nThere is also a \"jdbc-datasource\" instrumentation that creates spans for datasource connections, but is disabled by default due to the volume of telemetry produced.\n",
      "name": "jdbc",
      "scope": {
        "name": "io.opentelemetry.jdbc"
      },
      "semconv": [],
      "source_path": "instrumentation/jdbc",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "name": "jedis-1.4",
      "scope": {
        "name": "io.opentelemetry.jedis-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-1.4",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[1.4.0,3.0.0)"
        ]
      }
    },
    {
      "name": "jedis-3.0",
      "scope": {
        "name": "io.opentelemetry.jedis-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-3.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[3.0.0,4)"
        ]
      }
    },
    {
      "name": "jedis-4.0",
      "scope": {
        "name": "io.opentelemetry.jedis-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-4.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[4.0.0-beta1,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jetty-11.0",
      "scope": {
        "name": "io.opentelemetry.jetty-11.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-11.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[11, 12)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "jetty-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-12.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[12,)"
        ]
      }
    },
    {
      "name": "jetty-8.0",
      "scope": {
        "name": "io.opentelemetry.jetty-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-8.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[8.0.0.v20110901,11)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "jetty-httpclient-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-12.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[12,)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:12.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jetty-httpclient-9.2",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-9.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-9.2",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[9.2,10)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:[9.2.0.v20140526,9.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jms-1.1",
      "scope": {
        "name": "io.opentelemetry.jms-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-1.1",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:(,3)",
          "javax.jms:javax.jms-api:(,)",
          "javax.jms:jms-api:(,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jms-3.0",
      "scope": {
        "name": "io.opentelemetry.jms-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-3.0",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:[3.0.0,)"
        ]
      }
    },
    {
      "name": "jodd-http-4.2",
      "scope": {
        "name": "io.opentelemetry.jodd-http-4.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jodd-http-4.2",
      "target_versions": {
        "javaagent": [
          "org.jodd:jodd-http:[4.2.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jsf-mojarra-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-1.2",
      "target_versions": {
        "javaagent": [
          "com.sun.faces:jsf-impl:[2.0,2.1)",
          "com.sun.faces:jsf-impl:[2.1,2.2)",
          "javax.faces:jsf-impl:[1.2,2)",
          "org.glassfish:jakarta.faces:[2.3.9,3)",
          "org.glassfish:javax.faces:[2.0.7,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-mojarra-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish:jakarta.faces:[3,)"
        ]
      }
    },
    {
      "name": "jsf-myfaces-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-1.2",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[1.2,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-myfaces-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[3,)"
        ]
      }
    },
    {
      "name": "jsp-2.3",
      "scope": {
        "name": "io.opentelemetry.jsp-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/jsp-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jasper:[7.0.19,10)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the capture of the experimental consumer attribute \"kafka.record.queue_time_ms\"",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enable context propagation for kafka message producers.",
          "name": "otel.instrumentation.kafka.producer-propagation.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables messaging spans and metrics for Apache Kafka 0.11 clients. It automatically traces message production and consumption, propagates context, and emits metrics for production and consumption.\n",
      "name": "kafka-clients-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-clients:[0.11.0.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation provides a library integeration that enables messaging spans and metrics for Apache Kafka 2.6+ clients.\n",
      "name": "kafka-clients-2.6",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-2.6",
      "target_versions": {
        "library": [
          "org.apache.kafka:kafka-clients:2.6.0"
        ]
      }
    },
    {
      "name": "kafka-streams-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-streams-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-streams-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-streams:[0.11.0.0,)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.0.0,1.3.8)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.3.0,1.3.8)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-1.0",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-1.0",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.0.0,1.3.8)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-flow-1.3",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-flow-1.3"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-flow-1.3",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.3.0,1.3.8)"
        ]
      }
    },
    {
      "name": "ktor-1.0",
      "scope": {
        "name": "io.opentelemetry.ktor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-1.0",
      "target_versions": {
        "library": [
          "io.ktor:ktor-server-core:[1.0.0,1.+)"
        ]
      }
    },
    {
      "name": "ktor-2.0",
      "scope": {
        "name": "io.opentelemetry.ktor-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-2.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[2.0.0,3.0.0)",
          "io.ktor:ktor-server-core:[2.0.0,3.0.0)"
        ],
        "library": [
          "io.ktor:ktor-client-core:[2.0.0,2.+)",
          "io.ktor:ktor-server-core:[2.0.0,2.+)"
        ]
      }
    },
    {
      "name": "ktor-3.0",
      "scope": {
        "name": "io.opentelemetry.ktor-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-3.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[3.0.0,)",
          "io.ktor:ktor-server-core:[3.0.0,)"
        ],
        "library": [
          "io.ktor:ktor-client-core:3.0.0",
          "io.ktor:ktor-server-core:3.0.0"
        ]
      }
    },
    {
      "name": "kubernetes-client-7.0",
      "scope": {
        "name": "io.opentelemetry.kubernetes-client-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kubernetes-client-7.0",
      "target_versions": {
        "javaagent": [
          "io.kubernetes:client-java-api:[7.0.0,)"
        ]
      }
    },
    {
      "name": "lettuce-4.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-4.0",
      "target_versions": {
        "javaagent": [
          "biz.paluch.redis:lettuce:[4.0.Final,)"
        ]
      }
    },
    {
      "name": "lettuce-5.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.0",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.0.0.RELEASE,5.1.0.RELEASE)"
        ]
      }
    },
    {
      "name": "lettuce-5.1",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.1"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.1",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.1.0.RELEASE,)"
        ],
        "library": [
          "io.lettuce:lettuce-core:5.1.0.RELEASE"
        ]
      }
    },
    {
      "name": "liberty-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-20.0"
    },
    {
      "name": "liberty-dispatcher-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-dispatcher-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-dispatcher-20.0"
    },
    {
      "name": "log4j-appender-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "name": "log4j-appender-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.0,)"
        ],
        "library": [
          "org.apache.logging.log4j:log4j-core:2.17.0"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.17.0,)"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.7",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.7,2.17.0)"
        ]
      }
    },
    {
      "name": "log4j-mdc-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-mdc-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-mdc-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "name": "logback-appender-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-appender-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-appender-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[0.9.16,)"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.3.0",
          "net.logstash.logback:logstash-logback-encoder:3.0",
          "org.slf4j:slf4j-api:2.0.0"
        ]
      }
    },
    {
      "name": "logback-mdc-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-mdc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-mdc-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[1.0.0,1.2.3]"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.0.0",
          "org.slf4j:slf4j-api:1.6.4"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "micrometer-1.5",
      "scope": {
        "name": "io.opentelemetry.micrometer-1.5"
      },
      "semconv": [],
      "source_path": "instrumentation/micrometer/micrometer-1.5",
      "target_versions": {
        "javaagent": [
          "io.micrometer:micrometer-core:[1.5.0,)"
        ],
        "library": [
          "io.micrometer:micrometer-core:1.5.0"
        ]
      }
    },
    {
      "name": "mongo-3.1",
      "scope": {
        "name": "io.opentelemetry.mongo-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.1",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.1,)"
        ],
        "library": [
          "org.mongodb:mongo-java-driver:3.1.0"
        ]
      }
    },
    {
      "name": "mongo-3.7",
      "scope": {
        "name": "io.opentelemetry.mongo-3.7"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.7",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.7, 4.0)",
          "org.mongodb:mongodb-driver-core:[3.7, 4.0)"
        ]
      }
    },
    {
      "name": "mongo-4.0",
      "scope": {
        "name": "io.opentelemetry.mongo-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-4.0",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-core:[4.0,)"
        ]
      }
    },
    {
      "name": "mongo-async-3.3",
      "scope": {
        "name": "io.opentelemetry.mongo-async-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-async-3.3",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-async:[3.3,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "mybatis-3.2",
      "scope": {
        "name": "io.opentelemetry.mybatis-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/mybatis-3.2",
      "target_versions": {
        "javaagent": [
          "org.mybatis:mybatis:[3.2.0,)"
        ]
      }
    },
    {
      "name": "netty-3.8",
      "scope": {
        "name": "io.opentelemetry.netty-3.8"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-3.8",
      "target_versions": {
        "javaagent": [
          "io.netty:netty:[3.8.0.Final,4)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.0",
      "scope": {
        "name": "io.opentelemetry.netty-4.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.0",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.0.0.Final,4.1.0.Final)",
          "io.netty:netty-codec-http:[4.0.0.Final,4.1.0.Final)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.1",
      "scope": {
        "name": "io.opentelemetry.netty-4.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.1",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.1.0.Final,5.0.0)",
          "io.netty:netty-codec-http:[4.1.0.Final,5.0.0)"
        ],
        "library": [
          "io.netty:netty-codec-http:4.1.0.Final"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "okhttp-2.2",
      "scope": {
        "name": "io.opentelemetry.okhttp-2.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-2.2",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp:okhttp:[2.2,3)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "okhttp-3.0",
      "scope": {
        "name": "io.opentelemetry.okhttp-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-3.0",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp3:okhttp:[3.0,)"
        ],
        "library": [
          "com.squareup.okhttp3:okhttp:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables including the full content of user and assistant messages in emitted log events. Note that full content can have data privacy and size concerns, and care should be taken when enabling this.\n",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables Gen AI client spans and metrics for OpenAI Java SDK 1.1+.",
      "name": "openai-java-1.1",
      "scope": {
        "name": "io.opentelemetry.openai-java-1.1"
      },
      "semconv": [
        "Gen Ai"
      ],
      "source_path": "instrumentation/openai/openai-java-1.1",
      "target_versions": {
        "javaagent": [
          "com.openai:openai-java:[1.1.0,)"
        ],
        "library": [
          "com.openai:openai-java:1.1.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                }
              ],
              "description": "GenAI operation duration.",
              "name": "gen_ai.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.token.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Measures number of input and output tokens used.",
              "name": "gen_ai.client.token.usage",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "token"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.frequency_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.max_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.presence_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.seed",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.stop_sequences",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.temperature",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.top_p",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.response.finish_reasons",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.response.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.usage.output_tokens",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-1.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-1.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[1.0,3.0)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-3.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-3.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[3.0,)"
        ]
      }
    },
    {
      "description": "The Oracle Universal Connection Pool (UCP) instrumentation generates connection pool metrics.",
      "name": "oracle-ucp-11.2",
      "scope": {
        "name": "io.opentelemetry.oracle-ucp-11.2"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/oracle-ucp-11.2",
      "target_versions": {
        "javaagent": [
          "com.oracle.database.jdbc:ucp:[,)"
        ],
        "library": [
          "com.oracle.database.jdbc:ojdbc8:12.2.0.1",
          "com.oracle.database.jdbc:ucp:11.2.0.4"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the OSHI process runtime metrics.",
          "name": "otel.instrumentation.oshi.experimental-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "When the OSHI library is detected on the classpath, this instrumentation will use the system class loader to load classes from the oshi-core jar that are then used to generate system metrics.",
      "name": "oshi",
      "scope": {
        "name": "io.opentelemetry.oshi"
      },
      "semconv": [
        "System"
      ],
      "source_path": "instrumentation/oshi",
      "target_versions": {
        "javaagent": [
          "com.github.oshi:oshi-core:[5.3.1,)"
        ],
        "library": [
          "com.github.oshi:oshi-core:5.3.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java CPU time",
              "name": "runtime.java.cpu_time",
              "type": "LONG_GAUGE",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java memory",
              "name": "runtime.java.memory",
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "otel.instrumentation.oshi.experimental-metrics.enabled=true"
        }
      ]
    },
    {
      "name": "payara",
      "scope": {
        "name": "io.opentelemetry.payara"
      },
      "semconv": [],
      "source_path": "instrumentation/payara"
    },
    {
      "name": "pekko-actor-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-actor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/pekko/pekko-actor-1.0",
      "target_versions": {
        "javaagent": [
          "org.apache.pekko:pekko-actor_2.12:[1.0,)",
          "org.apache.pekko:pekko-actor_2.13:[1.0,)",
          "org.apache.pekko:pekko-actor_3:[1.0,)"
        ]
      }
    },
    {
      "name": "pekko-http-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-http-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/pekko/pekko-http-1.0",
      "target_versions": {
        "javaagent": [
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.12:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.13:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_3:[1.7,)",
          "org.apache.pekko:pekko-http_2.12:[1.0,)",
          "org.apache.pekko:pekko-http_2.13:[1.0,)",
          "org.apache.pekko:pekko-http_3:[1.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-mvc-2.4",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.4",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_2.11:[2.4.0,2.6)"
        ]
      }
    },
    {
      "name": "play-mvc-2.6",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.6",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_$scalaVersion:[2.6.0,)",
          "com.typesafe.play:play_2.12:[2.6.0,)",
          "com.typesafe.play:play_2.13:[2.6.0,)"
        ]
      }
    },
    {
      "name": "play-ws-1.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-1.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[1.0.0,2.0.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[1.0.0,2.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[2.0.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.0.0,2.1.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.0.6,2.1.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.1",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.1",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.1.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.1.0,]"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "powerjob-4.0",
      "scope": {
        "name": "io.opentelemetry.powerjob-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/powerjob-4.0",
      "target_versions": {
        "javaagent": [
          "tech.powerjob:powerjob-worker:[4.0.0,)"
        ]
      }
    },
    {
      "name": "pulsar-2.8",
      "scope": {
        "name": "io.opentelemetry.pulsar-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/pulsar/pulsar-2.8",
      "target_versions": {
        "javaagent": [
          "org.apache.pulsar:pulsar-client:[2.8.0,)"
        ]
      }
    },
    {
      "name": "quarkus-resteasy-reactive",
      "scope": {
        "name": "io.opentelemetry.quarkus-resteasy-reactive"
      },
      "semconv": [],
      "source_path": "instrumentation/quarkus-resteasy-reactive",
      "target_versions": {
        "javaagent": [
          "io.quarkus:quarkus-resteasy-reactive:(,3.9.0)"
        ]
      }
    },
    {
      "name": "quartz-2.0",
      "scope": {
        "name": "io.opentelemetry.quartz-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/quartz-2.0",
      "target_versions": {
        "javaagent": [
          "org.quartz-scheduler:quartz:[2.0.0,)"
        ],
        "library": [
          "org.quartz-scheduler:quartz:2.0.0"
        ]
      }
    },
    {
      "name": "r2dbc-1.0",
      "scope": {
        "name": "io.opentelemetry.r2dbc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/r2dbc-1.0",
      "target_versions": {
        "javaagent": [
          "io.r2dbc:r2dbc-spi:[1.0.0.RELEASE,)"
        ],
        "library": [
          "io.r2dbc:r2dbc-spi:1.0.0.RELEASE"
        ]
      }
    },
    {
      "name": "rabbitmq-2.7",
      "scope": {
        "name": "io.opentelemetry.rabbitmq-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/rabbitmq-2.7",
      "target_versions": {
        "javaagent": [
          "com.rabbitmq:amqp-client:[2.7.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.4",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.4",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.4.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.7",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.7"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.7",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.7.0,)"
        ],
        "library": [
          "io.ratpack:ratpack-core:1.7.0"
        ]
      }
    },
    {
      "name": "reactor-3.1",
      "scope": {
        "name": "io.opentelemetry.reactor-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.1",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.1.0.RELEASE,)"
        ]
      }
    },
    {
      "name": "reactor-3.4",
      "scope": {
        "name": "io.opentelemetry.reactor-3.4"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.4",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.4.0,)"
        ]
      }
    },
    {
      "name": "reactor-kafka-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-kafka-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-kafka-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.kafka:reactor-kafka:[1.0.0,)"
        ]
      }
    },
    {
      "name": "reactor-netty-0.9",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-0.9"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-0.9",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty:[0.8.2.RELEASE,1.0.0)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans.",
          "name": "otel.instrumentation.reactor-netty.connection-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "reactor-netty-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty-http:[1.0.0,)",
          "io.projectreactor.netty:reactor-netty:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "rediscala-1.8",
      "scope": {
        "name": "io.opentelemetry.rediscala-1.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rediscala-1.8",
      "target_versions": {
        "javaagent": [
          "com.github.Ma27:rediscala_2.11:[1.8.1,)",
          "com.github.Ma27:rediscala_2.12:[1.8.1,)",
          "com.github.Ma27:rediscala_2.13:[1.9.0,)",
          "com.github.etaty:rediscala_2.11:[1.5.0,)",
          "com.github.etaty:rediscala_2.12:[1.8.0,)",
          "com.github.etaty:rediscala_2.13:[1.9.0,)",
          "io.github.rediscala:rediscala_2.13:[1.10.0,)"
        ]
      }
    },
    {
      "name": "redisson-3.0",
      "scope": {
        "name": "io.opentelemetry.redisson-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.0",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.0.0,3.17.0)"
        ]
      }
    },
    {
      "name": "redisson-3.17",
      "scope": {
        "name": "io.opentelemetry.redisson-3.17"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.17",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.17.0,)"
        ]
      }
    },
    {
      "name": "resources",
      "scope": {
        "name": "io.opentelemetry.resources"
      },
      "semconv": [],
      "source_path": "instrumentation/resources"
    },
    {
      "name": "restlet-1.1",
      "scope": {
        "name": "io.opentelemetry.restlet-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-1.1",
      "target_versions": {
        "javaagent": [
          "org.restlet:org.restlet:[1.1.0, 1.2-M1)"
        ],
        "library": [
          "com.noelios.restlet:com.noelios.restlet:1.1.5",
          "org.restlet:org.restlet:[1.1.5,1.+)"
        ]
      }
    },
    {
      "name": "restlet-2.0",
      "scope": {
        "name": "io.opentelemetry.restlet-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-2.0",
      "target_versions": {
        "javaagent": [
          "org.restlet.jse:org.restlet:[2.0.0,)"
        ],
        "library": [
          "org.restlet.jse:org.restlet:2.0.2"
        ]
      }
    },
    {
      "name": "rmi",
      "scope": {
        "name": "io.opentelemetry.rmi"
      },
      "semconv": [],
      "source_path": "instrumentation/rmi",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "name": "rocketmq-client-4.8",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-4.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-4.8",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client:[4.0.0,)"
        ],
        "library": [
          "org.apache.rocketmq:rocketmq-client:4.8.0"
        ]
      }
    },
    {
      "name": "rocketmq-client-5.0",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client-java:[5.0.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "runtime-telemetry-java17",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java17"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java17"
    },
    {
      "name": "runtime-telemetry-java8",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java8"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java8"
    },
    {
      "name": "rxjava-1.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-1.0",
      "target_versions": {
        "library": [
          "io.reactivex:rxjava:1.0.7"
        ]
      }
    },
    {
      "name": "rxjava-2.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-2.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava2:rxjava:[2.0.6,)"
        ],
        "library": [
          "io.reactivex.rxjava2:rxjava:2.1.3"
        ]
      }
    },
    {
      "name": "rxjava-3.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.0.0,3.1.0]"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:[3.0.12,3.1.0)"
        ]
      }
    },
    {
      "name": "rxjava-3.1.1",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.1.1",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.1.1,)"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:3.1.1"
        ]
      }
    },
    {
      "name": "scala-fork-join-2.8",
      "scope": {
        "name": "io.opentelemetry.scala-fork-join-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/scala-fork-join-2.8",
      "target_versions": {
        "javaagent": [
          "org.scala-lang:scala-library:[2.8.0,2.12.0)"
        ]
      }
    },
    {
      "name": "servlet-2.2",
      "scope": {
        "name": "io.opentelemetry.servlet-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-2.2",
      "target_versions": {
        "javaagent": [
          "javax.servlet:servlet-api:[2.2, 3.0)"
        ]
      }
    },
    {
      "name": "servlet-3.0",
      "scope": {
        "name": "io.opentelemetry.servlet-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-3.0",
      "target_versions": {
        "javaagent": [
          "javax.servlet:javax.servlet-api:[3.0,)"
        ]
      }
    },
    {
      "name": "servlet-5.0",
      "scope": {
        "name": "io.opentelemetry.servlet-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-5.0",
      "target_versions": {
        "javaagent": [
          "jakarta.servlet:jakarta.servlet-api:[5.0.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it extracts the HTTP route and attaches it to SERVER spans and HTTP server metrics.\n",
      "name": "spark-2.3",
      "scope": {
        "name": "io.opentelemetry.spark-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/spark-2.3",
      "target_versions": {
        "javaagent": [
          "com.sparkjava:spark-core:[2.3,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental attribute `job.system` to spans.",
          "name": "otel.instrumentation.spring-batch.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, a new root span will be created for each chunk processing. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.experimental.chunk.new-trace",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, spans will be created for each item processed. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.item.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables INTERNAL spans for jobs run by the Spring Batch framework.",
      "disabled_by_default": true,
      "name": "spring-batch-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-batch-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-batch-3.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.batch:spring-batch-core:[3.0.0.RELEASE,5)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-batch.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation configures the OpenTelemetry Micrometer bridge to receive metrics from Spring Boot Actuator. It does not produce telemetry on its own.\n",
      "disabled_by_default": true,
      "name": "spring-boot-actuator-autoconfigure-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-boot-actuator-autoconfigure-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-actuator-autoconfigure-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.boot:spring-boot-actuator-autoconfigure:[2.0.0.RELEASE,)"
        ]
      }
    },
    {
      "description": "This instrumentation automatically detects the `service.name` and `service.version` for Spring Boot applications and sets them as resource attributes.\nIt uses the following strategies (first successful wins):\n  - Check for the SPRING_APPLICATION_NAME environment variable\n  - Check for spring.application.name system property\n  - Check for application.properties file on the classpath\n  - Check for application.properties in the current working dir\n  - Check for application.yml on the classpath\n  - Check for application.yml in the current working dir\n  - Check for --spring.application.name program argument (not jvm arg) via ProcessHandle\n  - Check for --spring.application.name program argument via sun.java.command system property\n",
      "name": "spring-boot-resources",
      "scope": {
        "name": "io.opentelemetry.spring-boot-resources"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-resources"
    },
    {
      "description": "This instrumentation enhances tracing for Spring Cloud AWS. It augments the existing AWS SDK instrumentation by providing higher-level tracing for SQS operations, capturing details specific to Spring Cloud AWS SQS usage and linking them to the underlying AWS SDK traces.\n",
      "minimum_java_version": 17,
      "name": "spring-cloud-aws-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-aws-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-aws-3.0",
      "target_versions": {
        "javaagent": [
          "io.awspring.cloud:spring-cloud-aws-sqs:[3.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `spring-cloud-gateway.route` attributes (e.g., `spring-cloud-gateway.route.id`, `spring-cloud-gateway.route.uri`, etc.) on spans.\n",
          "name": "otel.instrumentation.spring-cloud-gateway.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enhances tracing for Spring Cloud Gateway. It does not generate new telemetry on its own, but rather enriches existing traces produced by other instrumentations like Netty and Spring WebFlux with Spring Cloud Gateway-specific attributes.\n",
      "name": "spring-cloud-gateway-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-gateway-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-gateway/spring-cloud-gateway-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.cloud:spring-cloud-starter-gateway:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "description": "This instrumentation ensures proper context propagation for asynchronous operations within Spring Core. It modifies how tasks are submitted and executed to ensure that spans created by other instrumentations are correctly linked across thread boundaries, rather than generating any new telemetry itself.\n",
      "minimum_java_version": 17,
      "name": "spring-core-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-core-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-core-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-core:[2.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation enhances tracing for Spring Data operations. It works in conjunction with other instrumentations, such as JDBC, to provide additional context and details for database interactions initiated through Spring Data.\n",
      "name": "spring-data-1.8",
      "scope": {
        "name": "io.opentelemetry.spring-data-1.8"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-data/spring-data-1.8",
      "target_versions": {
        "javaagent": [
          "org.springframework.data:spring-data-commons:[1.8.0.RELEASE,]",
          "org.springframework:spring-aop:[1.2,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": "*",
          "description": "An array of Spring channel name patterns that will be intercepted.",
          "name": "otel.instrumentation.spring-integration.global-channel-interceptor-patterns",
          "type": "list"
        },
        {
          "default": false,
          "description": "Create producer spans when messages are sent to an output channel. Enable when you're using a messaging library that doesn't have its own instrumentation for generating producer spans. Note that the detection of output channels only works for Spring Cloud Stream `DirectWithAttributesChannel`.\n",
          "name": "otel.instrumentation.spring-integration.producer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables PRODUCER and CONSUMER spans for Spring Integration.",
      "name": "spring-integration-4.1",
      "scope": {
        "name": "io.opentelemetry.spring-integration-4.1"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-integration-4.1",
      "target_versions": {
        "javaagent": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,)"
        ],
        "library": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,5.+)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "otel.instrumentation.spring-integration.producer.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of CONSUMER spans for Spring JMS.",
      "name": "spring-jms-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-2.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[2.0,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of CONSUMER spans for Spring JMS.",
      "minimum_java_version": 17,
      "name": "spring-jms-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-6.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `kafka.record.queue_time_ms`",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables CONSUMER spans for Spring Kafka listeners.",
      "name": "spring-kafka-2.7",
      "scope": {
        "name": "io.opentelemetry.spring-kafka-2.7"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-kafka-2.7",
      "target_versions": {
        "javaagent": [
          "org.springframework.kafka:spring-kafka:[2.7.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "kafka.record.queue_time_ms",
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "otel.instrumentation.kafka.experimental-span-attributes=true"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `messaging.pulsar.message.type` on PRODUCER spans.\n",
          "name": "otel.instrumentation.pulsar.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables CONSUMER spans for Spring Pulsar listeners.",
      "minimum_java_version": 17,
      "name": "spring-pulsar-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-pulsar-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-pulsar-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.pulsar:spring-pulsar:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "otel.instrumentation.pulsar.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables CONSUMER spans for Spring RabbitMQ listeners.",
      "name": "spring-rabbit-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-rabbit-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-rabbit-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.amqp:spring-rabbit:(,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT and SERVER spans for Spring RMI applications.",
      "name": "spring-rmi-4.0",
      "scope": {
        "name": "io.opentelemetry.spring-rmi-4.0"
      },
      "semconv": [
        "Aws"
      ],
      "source_path": "instrumentation/spring/spring-rmi-4.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[4.0.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental span attribute `job.system` with the value `spring_scheduling`.",
          "name": "otel.instrumentation.spring-scheduling.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Spring Scheduling tasks.",
      "name": "spring-scheduling-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-scheduling-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-scheduling-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[3.1.0.RELEASE,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-scheduling.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing the enduser.id attribute.",
          "name": "otel.instrumentation.common.enduser.id.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.role attribute.",
          "name": "otel.instrumentation.common.enduser.role.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.scope attribute.",
          "name": "otel.instrumentation.common.enduser.scope.enabled",
          "type": "boolean"
        },
        {
          "default": "ROLE_",
          "description": "Prefix of granted authorities identifying roles to capture in the `enduser.role` semantic attribute.",
          "name": "otel.instrumentation.spring-security.enduser.role.granted-authority-prefix",
          "type": "string"
        },
        {
          "default": "SCOPE_",
          "description": "Prefix of granted authorities identifying scopes to capture in the `enduser.scopes` semantic attribute.",
          "name": "otel.instrumentation.spring-security.scope.role.granted-authority-prefix",
          "type": "string"
        }
      ],
      "description": "This instrumentation does not emit any telemetry on its own. Instead, it captures enduser attributes, and is only enabled when at least one of the `enduser` configurations is enabled.\nNOTE: The `enduser` attributes have been deprecated and will be removed in 3.0+ of the java agent.\n",
      "minimum_java_version": 17,
      "name": "spring-security-config-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-security-config-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-security-config-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.security:spring-security-config:[6.0.0,]"
        ],
        "library": [
          "io.projectreactor:reactor-core:3.5.0",
          "jakarta.servlet:jakarta.servlet-api:6.0.0",
          "org.springframework.security:spring-security-config:6.0.0",
          "org.springframework.security:spring-security-web:6.0.0",
          "org.springframework:spring-web:6.0.0"
        ]
      }
    },
    {
      "description": "This instrumentation provides a library integration that enables capturing HTTP client spans and metrics for Spring's RestTemplate. The agent integration enriches HTTP server spans and metrics with route information.\n",
      "name": "spring-web-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-web-3.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-web/spring-web-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enriches HTTP server spans and metrics with route information.",
      "name": "spring-web-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-web-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-web/spring-web-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[6.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and metrics for Spring WebFlux 5.0. It also optionally enables experimental controller (INTERNAL) spans.\n",
      "name": "spring-webflux-5.0",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.0"
      },
      "semconv": [
        "Code",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.ipc:reactor-netty:[0.7.0.RELEASE,)",
          "io.projectreactor.netty:reactor-netty:[0.8.0.RELEASE,)",
          "org.springframework:spring-webflux:[5.0.0.RELEASE,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.controller-telemetry.enabled"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for the Spring WebFlux WebClient and Webflux server versions 5.3+ that enables HTTP client and server spans and metrics.\n",
      "name": "spring-webflux-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.3",
      "target_versions": {
        "library": [
          "org.springframework:spring-webflux:5.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 3.1+.\n",
      "name": "spring-webmvc-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for Spring WebMVC controllers, that enables the creation of HTTP server spans and metrics for requests processed by the Spring servlet container.\n",
      "name": "spring-webmvc-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-5.3",
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 6.0+.\n",
      "minimum_java_version": 17,
      "name": "spring-webmvc-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-6.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "disabled_by_default": true,
      "name": "spring-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-ws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-ws-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.ws:spring-ws-core:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "name": "spymemcached-2.12",
      "scope": {
        "name": "io.opentelemetry.spymemcached-2.12"
      },
      "semconv": [],
      "source_path": "instrumentation/spymemcached-2.12",
      "target_versions": {
        "javaagent": [
          "net.spy:spymemcached:[2.12.0,)"
        ]
      }
    },
    {
      "name": "struts-2.3",
      "scope": {
        "name": "io.opentelemetry.struts-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[2.1.0,7)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "struts-7.0",
      "scope": {
        "name": "io.opentelemetry.struts-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[7.0.0,)"
        ]
      }
    },
    {
      "name": "tapestry-5.4",
      "scope": {
        "name": "io.opentelemetry.tapestry-5.4"
      },
      "semconv": [],
      "source_path": "instrumentation/tapestry-5.4",
      "target_versions": {
        "javaagent": [
          "org.apache.tapestry:tapestry-core:[5.4.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "tomcat-10.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-10.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[10,)"
        ]
      }
    },
    {
      "name": "tomcat-7.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[7.0.4, 10)"
        ]
      }
    },
    {
      "name": "tomcat-jdbc",
      "scope": {
        "name": "io.opentelemetry.tomcat-jdbc"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/tomcat/tomcat-jdbc",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jdbc:[8.5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "twilio-6.6",
      "scope": {
        "name": "io.opentelemetry.twilio-6.6"
      },
      "semconv": [],
      "source_path": "instrumentation/twilio-6.6",
      "target_versions": {
        "javaagent": [
          "com.twilio.sdk:twilio:(,8.0.0)"
        ]
      }
    },
    {
      "name": "undertow-1.4",
      "scope": {
        "name": "io.opentelemetry.undertow-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/undertow-1.4",
      "target_versions": {
        "javaagent": [
          "io.undertow:undertow-core:[1.4.0.Final,)"
        ]
      }
    },
    {
      "name": "vaadin-14.2",
      "scope": {
        "name": "io.opentelemetry.vaadin-14.2"
      },
      "semconv": [],
      "source_path": "instrumentation/vaadin-14.2",
      "target_versions": {
        "javaagent": [
          "com.vaadin:flow-server:[2.2.0,3)",
          "com.vaadin:flow-server:[3.1.0,)"
        ]
      }
    },
    {
      "name": "vertx-http-client-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[3.0.0,4.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-http-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-4.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-http-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-5.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-kafka-client-3.6",
      "scope": {
        "name": "io.opentelemetry.vertx-kafka-client-3.6"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-kafka-client-3.6",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-kafka-client:[3.5.1,)"
        ]
      }
    },
    {
      "name": "vertx-redis-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-redis-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-redis-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-redis-client:[4.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "vertx-rx-java-3.5",
      "scope": {
        "name": "io.opentelemetry.vertx-rx-java-3.5"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-rx-java-3.5",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-rx-java2:[3.5.0,)"
        ]
      }
    },
    {
      "name": "vertx-sql-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-sql-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "vertx-web-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-web-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-web-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-web:[3.0.0,)"
        ]
      }
    },
    {
      "description": "Instrumentation for the vibur-dbcp library, which provides connection pool metrics.",
      "name": "vibur-dbcp-11.0",
      "scope": {
        "name": "io.opentelemetry.vibur-dbcp-11.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vibur-dbcp-11.0",
      "target_versions": {
        "javaagent": [
          "org.vibur:vibur-dbcp:[11.0,)"
        ],
        "library": [
          "org.vibur:vibur-dbcp:11.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "wicket-8.0",
      "scope": {
        "name": "io.opentelemetry.wicket-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/wicket-8.0",
      "target_versions": {
        "javaagent": [
          "org.apache.wicket:wicket:[8.0.0,]"
        ]
      }
    },
    {
      "name": "xxl-job-1.9.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-1.9.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-1.9.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[1.9.2, 2.1.2)"
        ]
      }
    },
    {
      "name": "xxl-job-2.1.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.1.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.1.2,2.3.0)"
        ]
      }
    },
    {
      "name": "xxl-job-2.3.0",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.3.0",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.3.0,)"
        ]
      }
    },
    {
      "name": "zio-2.0",
      "scope": {
        "name": "io.opentelemetry.zio-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/zio/zio-2.0",
      "target_versions": {
        "javaagent": [
          "dev.zio:zio_2.12:[2.0.0,)",
          "dev.zio:zio_2.13:[2.0.0,)",
          "dev.zio:zio_3:[2.0.0,)"
        ]
      }
    }
  ],
  "2.18": [
    {
      "description": "This instrumentation enables SERVER spans and metrics for the ActiveJ HTTP server.",
      "minimum_java_version": 17,
      "name": "activej-http-6.0",
      "scope": {
        "name": "io.opentelemetry.activej-http-6.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/activej-http-6.0",
      "target_versions": {
        "javaagent": [
          "io.activej:activej-http:[6.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides context propagation for Akka actors, it does not emit any telemetry on its own.",
      "name": "akka-actor-2.3",
      "scope": {
        "name": "io.opentelemetry.akka-actor-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-2.3",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.3,)",
          "com.typesafe.akka:akka-actor_2.12:[2.3,)",
          "com.typesafe.akka:akka-actor_2.13:[2.3,)"
        ]
      }
    },
    {
      "description": "This instrumentation provides context propagation for the Akka Fork-Join Pool, it does not emit any telemetry on its own.",
      "name": "akka-actor-fork-join-2.5",
      "scope": {
        "name": "io.opentelemetry.akka-actor-fork-join-2.5"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-fork-join-2.5",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.5,)",
          "com.typesafe.akka:akka-actor_2.12:[2.5,2.6)",
          "com.typesafe.akka:akka-actor_2.13:[2.5.23,2.6)"
        ]
      }
    },
    {
      "description": "This instrumentation enables CLIENT and SERVER spans and metrics for the Akka HTTP client and server.",
      "name": "akka-http-10.0",
      "scope": {
        "name": "io.opentelemetry.akka-http-10.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/akka/akka-http-10.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-http_2.11:[10,)",
          "com.typesafe.akka:akka-http_2.12:[10,)",
          "com.typesafe.akka:akka-http_2.13:[10,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "The Alibaba Druid instrumentation generates database connection pool metrics for druid data sources.\n",
      "name": "alibaba-druid-1.0",
      "scope": {
        "name": "io.opentelemetry.alibaba-druid-1.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/alibaba-druid-1.0",
      "target_versions": {
        "javaagent": [
          "com.alibaba:druid:(,)"
        ],
        "library": [
          "com.alibaba:druid:1.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "This instrumentation enables database connection pools metrics for Apache DBCP.\nThe instrumentation uses `MBeanRegistration` methods for lifecycle detection, therefore it only activates if the `BasicDataSource` is registered to an `MBeanServer`. If using Spring Boot, this happens automatically as all Spring beans that support JMX registration are automatically registered by default.\n",
      "markdown_content": "# Library Instrumentation for Apache DBCP version 2.0 and higher\n\nProvides OpenTelemetry instrumentation for [Apache DBCP](https://commons.apache.org/proper/commons-dbcp/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-apache-dbcp-2.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-apache-dbcp-2.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-apache-dbcp-2.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `BasicDataSourceMXBean` instances for collecting\nOpenTelemetry-based metrics. A non-null name of the data source must be explicitly provided.\n\n```java\nApacheDbcpTelemetry apacheDbcpTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, BasicDataSourceMXBean dataSource, String dataSourceName) {\n  apacheDbcpTelemetry = ApacheDbcpTelemetry.create(openTelemetry);\n  apacheDbcpTelemetry.registerMetrics(dataSource, dataSourceName);\n}\n\nvoid destroy(BasicDataSourceMXBean dataSource) {\n  apacheDbcpTelemetry.unregisterMetrics(dataSource);\n}\n```\n",
      "name": "apache-dbcp-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-dbcp-2.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/apache-dbcp-2.0",
      "target_versions": {
        "javaagent": [
          "org.apache.commons:commons-dbcp2:[2,)"
        ],
        "library": [
          "org.apache.commons:commons-dbcp2:2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        }
      ],
      "description": "The Apache Dubbo instrumentation provides client and server spans for Apache Dubbo RPC calls. Each call produces a span named after the Dubbo method, enriched with standard RPC attributes (system, service, method), network attributes, and error details if an exception occurs.",
      "name": "apache-dubbo-2.7",
      "scope": {
        "name": "io.opentelemetry.apache-dubbo-2.7"
      },
      "semconv": [
        "Aws",
        "Database Client"
      ],
      "source_path": "instrumentation/apache-dubbo-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.dubbo:dubbo:[2.7,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for the Apache HttpAsyncClient.",
      "name": "apache-httpasyncclient-4.1",
      "scope": {
        "name": "io.opentelemetry.apache-httpasyncclient-4.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpasyncclient-4.1",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents:httpasyncclient:[4.1,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for versions 2 and 3 of the Apache HttpClient.",
      "name": "apache-httpclient-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-2.0",
      "target_versions": {
        "javaagent": [
          "commons-httpclient:commons-httpclient:[2.0,4.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for version 4 of the Apache HttpClient.",
      "name": "apache-httpclient-4.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-client:(,3.0.0)",
          "org.apache.httpcomponents:httpclient:[4.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables CLIENT spans and metrics for the Apache HttpClient.",
      "name": "apache-httpclient-4.3",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.3"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.3",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents:httpclient:[4.3,4.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for version 5 of the Apache HttpClient.",
      "name": "apache-httpclient-5.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents.client5:httpclient5:[5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables CLIENT spans and metrics for the Apache HttpClient.",
      "markdown_content": "# Library Instrumentation for Apache Http client version 5.2\n\nProvides OpenTelemetry instrumentation for [Apache Http Client 5.2](https://hc.apache.org/httpcomponents-client-5.2.x/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-apache-httpclient-5.2).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-apache-httpclient-5.2</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-apache-httpclient-5.2:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides the class `ApacheHttpClientTelemetry` that has a builder\nmethod and allows the creation of an instance of the `HttpClientBuilder` to provide\nOpenTelemetry-based spans and context propagation:\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.apachehttpclient.v5_2.ApacheHttpClientTelemetry;\nimport org.apache.hc.client5.http.classic.HttpClient;\nimport org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n\npublic class ApacheHttpClientConfiguration {\n\n  private OpenTelemetry openTelemetry;\n\n  public ApacheHttpClientConfiguration(OpenTelemetry openTelemetry) {\n    this.openTelemetry = openTelemetry;\n  }\n\n  // creates a new http client builder for constructing http clients with opentelemetry instrumentation\n  public HttpClientBuilder createBuilder() {\n    return ApacheHttpClientTelemetry.builder(openTelemetry).build().newHttpClientBuilder();\n  }\n\n  // creates a new http client with opentelemetry instrumentation\n  public HttpClient newHttpClient() {\n    return ApacheHttpClientTelemetry.builder(openTelemetry).build().newHttpClient();\n  }\n}\n```\n",
      "name": "apache-httpclient-5.2",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.2",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents.client5:httpclient5:5.2.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `apache-shenyu.meta.` prefixed span attributes `app-name`, `service-name`, `context-path`, `param-types`, `id`, `method-name`, `rpc-type`, `path` and `rpc-ext`.\n",
          "name": "otel.instrumentation.apache-shenyu.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation does not emit telemetry on its own. Instead, it augments existing SERVER spans and HTTP server metrics with the HTTP route and Shenyu specific attributes.\n",
      "name": "apache-shenyu-2.4",
      "scope": {
        "name": "io.opentelemetry.apache-shenyu-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/apache-shenyu-2.4",
      "target_versions": {
        "javaagent": [
          "org.apache.shenyu:shenyu-web:[2.4.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation enables CLIENT and SERVER spans and metrics for the Armeria HTTP client and server.",
      "name": "armeria-1.3",
      "scope": {
        "name": "io.opentelemetry.armeria-1.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/armeria/armeria-1.3",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria:[1.3.0,)"
        ],
        "library": [
          "com.linecorp.armeria:armeria:1.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT and SERVER spans and metrics for the Armeria gRPC client and server.",
      "name": "armeria-grpc-1.14",
      "scope": {
        "name": "io.opentelemetry.armeria-grpc-1.14"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Rpc"
      ],
      "source_path": "instrumentation/armeria/armeria-grpc-1.14",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria-grpc:[1.14.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for version 1 of the AsyncHttpClient (AHC) HTTP client.",
      "name": "async-http-client-1.9",
      "scope": {
        "name": "io.opentelemetry.async-http-client-1.9"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-1.9",
      "target_versions": {
        "javaagent": [
          "com.ning:async-http-client:[1.9.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT spans and metrics for version 2 of the AsyncHttpClient (AHC) HTTP client.",
      "name": "async-http-client-2.0",
      "scope": {
        "name": "io.opentelemetry.async-http-client-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-2.0",
      "target_versions": {
        "javaagent": [
          "org.asynchttpclient:async-http-client:[2.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it hooks into the Avaje Jex Context to extract the HTTP route and attach it to existing SERVER spans and HTTP server metrics.\n",
      "minimum_java_version": 21,
      "name": "avaje-jex-3.0",
      "scope": {
        "name": "io.opentelemetry.avaje-jex-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/avaje-jex-3.0",
      "target_versions": {
        "javaagent": [
          "io.avaje:avaje-jex:[3.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "Provides lightweight instrumentation of the Lambda core library, supporting all versions. It generates FaaS SERVER spans with the `faas.invocation_id` attribute. Use this package if you only use `RequestStreamHandler` or know you don't use any event classes from `aws-lambda-java-events`. This also includes when you are using `aws-serverless-java-container` to run e.g., a Spring Boot application on Lambda.\n",
      "markdown_content": "# AWS Lambda Instrumentation\n\nThis package contains libraries to help instrument AWS lambda functions in your code.\n\n## Using wrappers\n\nTo use the instrumentation, configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` env property to your lambda handler method in following format `package.ClassName::methodName`\nand use one of wrappers as your lambda `Handler`.\n\nIn order to configure a span flush timeout (default is set to 10 seconds), please configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_FLUSH_TIMEOUT` env property. The value is in milliseconds.\n\nAvailable wrappers:\n\n- `io.opentelemetry.instrumentation.awslambdacore.v1_0.TracingRequestStreamWrapper` - for wrapping streaming handlers (implementing `RequestStreamHandler`), enabling HTTP context propagation for HTTP requests\n\nWhen using known Lambda event types as parameters, use [aws-lambda-events-2.2](../../aws-lambda-events-2.2/library).\n\n## Using handlers\n\nTo use the instrumentation, replace your function classes that implement `RequestHandler` (or `RequestStreamHandler`) with those\nthat extend `TracingRequestHandler` (or `TracingRequestStreamHandler`). You will need to change the method name to `doHandleRequest`\nand pass an initialized `OpenTelemetrySdk` to the base class.\n\n```java\npublic class MyRequestHandler extends TracingRequestHandler<String, String> {\n\n  private static final OpenTelemetrySdk SDK = OpenTelemetrySdk.builder()\n      .addSpanProcessor(spanProcessor)\n      .buildAndRegisterGlobal();\n\n  public MyRequestHandler() {\n    super(SDK);\n  }\n\n  // Note the method is named doHandleRequest instead of handleRequest.\n  @Override\n  protected String doHandleRequest(String input, Context context) {\n    if (input.equals(\"hello\")) {\n      return \"world\";\n    }\n    return \"goodbye\";\n  }\n}\n```\n\nA `SERVER` span will be created with the name you specify for the function when deploying it.\n\nIn addition, it is recommended to set up X-Ray trace propagation to be able to\nlink to tracing information provided by Lambda itself. To do so, add a dependency on\n`io.opentelemetry.contrib:opentelemetry-aws-xray-propagator`.\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.contrib%20AND%20a:opentelemetry-aws-xray-propagator).\n\nGradle:\n\n```kotlin\ndependencies {\n  implementation(\"io.opentelemetry.contrib:opentelemetry-aws-xray-propagator:OPENTELEMETRY_VERSION\")\n}\n```\n\nMaven:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.contrib</groupId>\n    <artifactId>opentelemetry-aws-xray-propagator</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\n## Trace propagation\n\nContext propagation for this instrumentation can be done either with X-Ray propagation or regular HTTP propagation. If X-Ray is enabled for instrumented lambda, it will be preferred. If X-Ray is disabled, HTTP propagation will be tried (that is HTTP headers will be read to check for a valid trace context).\n\n### X-Ray propagation\n\nThis instrumentation supports propagating traces using the `X-Amzn-Trace-Id` format for both normal\nrequests and SQS requests. X-Ray propagation is always enabled, there is no need to configure it explicitly.\n\n### HTTP headers based propagation\n\nFor API Gateway (HTTP) requests instrumented by using one of following methods:\n\n- extending `TracingRequestStreamHandler` or `TracingRequestHandler`\n- wrapping with `TracingRequestStreamWrapper` or `TracingRequestApiGatewayWrapper`\n  traces can be propagated with supported HTTP headers (see <https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators>).\n\nIn order to enable requested propagation for a handler, configure it on the SDK you build.\n\n```java\n  static {\n    OpenTelemetrySdk.builder()\n      ...\n      .setPropagators(ContextPropagators.create(B3Propagator.injectingSingleHeader()))\n      .buildAndRegisterGlobal();\n  }\n```\n\nIf using the wrappers, set the `OTEL_PROPAGATORS` environment variable as described [here](https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#propagator).\n",
      "name": "aws-lambda-core-1.0",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-core-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/aws-lambda/aws-lambda-core-1.0",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "Provides full instrumentation of the Lambda library, including standard and custom event types, from `aws-lambda-java-events` 2.2+.\n",
      "markdown_content": "# AWS Lambda Instrumentation\n\nThis package contains libraries to help instrument AWS lambda functions in your code.\n\n## Using wrappers\n\nTo use the instrumentation, configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` env property to your lambda handler method in following format `package.ClassName::methodName`\nand use one of wrappers as your lambda `Handler`.\n\nIn order to configure a span flush timeout (default is set to 10 seconds), please configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_FLUSH_TIMEOUT` env property. The value is in milliseconds.\n\nAvailable wrappers:\n\n- `io.opentelemetry.instrumentation.awslambdaevents.v2_2.TracingRequestWrapper` - for wrapping regular handlers (implementing `RequestHandler`)\n- `io.opentelemetry.instrumentation.awslambdaevents.v2_2.TracingRequestApiGatewayWrapper` - for wrapping regular handlers (implementing `RequestHandler`) proxied through API Gateway, enabling HTTP context propagation\n- `io.opentelemetry.instrumentation.awslambdacore.v1_0.TracingRequestStreamWrapper` - for wrapping streaming handlers (implementing `RequestStreamHandler`), enabling HTTP context propagation for HTTP requests\n\nIf you are only using `TracingRequestStreamWrapper`, consider using [aws-lambda-core-1.0](../../aws-lambda-core-1.0/library) instead to reduce the size of\nyour compiled function.\n\n## Using handlers\n\nTo use the instrumentation, replace your function classes that implement `RequestHandler` (or `RequestStreamHandler`) with those\nthat extend `TracingRequestHandler` (or `TracingRequestStreamHandler`). You will need to change the method name to `doHandleRequest`\nand pass an initialized `OpenTelemetrySdk` to the base class.\n\n```java\npublic class MyRequestHandler extends TracingRequestHandler<String, String> {\n\n  private static final OpenTelemetrySdk SDK = OpenTelemetrySdk.builder()\n      .addSpanProcessor(spanProcessor)\n      .buildAndRegisterGlobal();\n\n  public MyRequestHandler() {\n    super(SDK);\n  }\n\n  // Note the method is named doHandleRequest instead of handleRequest.\n  @Override\n  protected String doHandleRequest(String input, Context context) {\n    if (input.equals(\"hello\")) {\n      return \"world\";\n    }\n    return \"goodbye\";\n  }\n}\n```\n\nA `SERVER` span will be created with the name you specify for the function when deploying it.\n\nIn addition, it is recommended to set up X-Ray trace propagation to be able to\nlink to tracing information provided by Lambda itself. To do so, add a dependency on\n`opentelemetry-extension-tracepropagators`. Make sure the version matches the version of the SDK\nyou use.\n\nGradle:\n\n```kotlin\ndependencies {\n  implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators:0.8.0\")\n}\n```\n\nMaven:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n    <version>0.8.0</version>\n  </dependency>\n</dependencies>\n```\n\n## SQS Handler\n\nThis package provides a special handler for SQS-triggered functions to include messaging data.\nIf using SQS, it is recommended to use them instead of `TracingRequestHandler`.\n\nIf your application processes one message at a time, each independently, it is recommended to extend\n`TracingSQSMessageHandler`. This will create a single span corresponding to a received batch of\nmessages along with one span for each of the messages as you process them.\n\n```java\npublic class MyMessageHandler extends TracingSQSMessageHandler {\n  @Override\n  protected void handleMessage(SQSMessage message, Context context) {\n    System.out.println(message.getBody());\n  }\n}\n```\n\nIf you handle a batch of messages together, for example by aggregating them into a single unit,\nextend `TracingSQSEventHandler` to process a batch at a time.\n\n```java\npublic class MyBatchHandler extends TracingSQSEventHandler {\n  @Override\n  protected void handleEvent(SQSEvent event, Context context) {\n    System.out.println(event.getRecords().size());\n  }\n}\n```\n\n## Trace propagation\n\nContext propagation for this instrumentation can be done either with X-Ray propagation or regular HTTP propagation. If X-Ray is enabled for instrumented lambda, it will be preferred. If X-Ray is disabled, HTTP propagation will be tried (that is HTTP headers will be read to check for a valid trace context).\n\n### X-Ray propagation\n\nThis instrumentation supports propagating traces using the `X-Amzn-Trace-Id` format for both normal\nrequests and SQS requests. X-Ray propagation is always enabled, there is no need to configure it explicitly.\n\n### HTTP headers based propagation\n\nFor API Gateway (HTTP) requests instrumented by using one of following methods:\n\n- extending `TracingRequestStreamHandler` or `TracingRequestHandler`\n- wrapping with `TracingRequestStreamWrapper` or `TracingRequestApiGatewayWrapper`\n  traces can be propagated with supported HTTP headers (see <https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators>).\n\nIn order to enable requested propagation for a handler, configure it on the SDK you build.\n\n```java\n  static {\n    OpenTelemetrySdk.builder()\n      ...\n      .setPropagators(ContextPropagators.create(B3Propagator.injectingSingleHeader()))\n      .buildAndRegisterGlobal();\n  }\n```\n\nIf using the wrappers, set the `OTEL_PROPAGATORS` environment variable as described [here](https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#propagator).\n",
      "name": "aws-lambda-events-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-events-2.2"
      },
      "semconv": [
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-lambda/aws-lambda-events-2.2",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0",
          "com.amazonaws:aws-lambda-java-events:2.2.1"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                },
                {
                  "name": "faas.trigger",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the experimental span attributes `aws.agent`, `aws.bucket.name`, `aws.queue.url`, `aws.queue.name`, `aws.stream.name`, `aws.table.name`, `aws.lambda.function.arn` and `aws.lambda.function.name` for AWS SDK instrumentation.\n",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation covers the AWS SDK 1.11+ client library, enabling messaging and client spans and metrics for calls to AWS services including DynamoDB, EC2, Kinesis, Lambda, RDS, S3, secrets manager, SNS/SQS and step functions.\n",
      "name": "aws-sdk-1.11",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-1.11"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-1.11",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-java-sdk-core:[1.10.33,)",
          "com.amazonaws:aws-java-sdk-sqs:[1.10.33,)"
        ],
        "library": [
          "com.amazonaws:aws-java-sdk-core:1.11.0",
          "com.amazonaws:aws-java-sdk-sqs:[1.11.106,1.12.583)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.table_names",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.table_names",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Determines whether errors returned by each individual HTTP request should be recorded as events for the SDK span.",
          "name": "otel.instrumentation.aws-sdk.experimental-record-individual-http-error",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental span attributes `aws.agent`, `aws.lambda.function.arn` and `aws.lambda.function.name` for AWS SDK instrumentation.\n",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether the configured TextMapPropagator should be used to inject into supported messaging attributes (for SQS).",
          "name": "otel.instrumentation.aws-sdk.experimental-use-propagator-for-messaging",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether Generative AI events include full content of user and assistant messages. Note that full content can have data privacy and size concerns and care should be taken when enabling this\n",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation covers the AWS SDK 2.2+ client library, enabling messaging and client spans and metrics for calls to AWS services including DynamoDB, EC2, Kinesis, Lambda, RDS, S3, SNS/SQS and Bedrock.\n",
      "markdown_content": "# AWS Java SDK v2 Instrumentation\n\nInstrumentation for [AWS Java SDK v2](https://github.com/aws/aws-sdk-java-v2).\n\n## Usage\n\nTo instrument all AWS SDK clients include the `opentelemetry-aws-sdk-2.2-autoconfigure` submodule in your classpath.\n\nTo register instrumentation only on a specific SDK client, register the interceptor when creating it.\n\n```java\nAwsSdkTelemetry telemetry = AwsSdkTelemetry.create(openTelemetry).build();\nDynamoDbClient client = DynamoDbClient.builder()\n  .overrideConfiguration(ClientOverrideConfiguration.builder()\n    .addExecutionInterceptor(telemetry.newExecutionInterceptor()))\n    .build())\n  .build();\n```\n\nFor SQS an additional step is needed\n```java\nSqsClientBuilder sqsClientBuilder = SqsClient.builder();\n...\nSqsClient sqsClient = telemetry.wrap(sqsClientBuilder.build());\n```\n```java\nSqsAsyncClientBuilder sqsAsyncClientBuilder = SqsAsyncClient.builder();\n...\nSqsAsyncClient sqsAsyncClient = telemetry.wrap(sqsAsyncClientBuilder.build());\n```\n\n## Trace propagation\n\nThe AWS SDK instrumentation always injects the trace header into the request\nusing the [AWS Trace Header](https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader) format.\nThis format is the only format recognized by AWS managed services, and populating will allow\npropagating the trace through them.\n\nAdditionally, you can enable an experimental option to use the configured propagator to inject into\nmessage attributes (see [parent README](../../README.md)). This currently supports the following AWS APIs:\n\n- SQS.SendMessage\n- SQS.SendMessageBatch\n- SNS.Publish\n  (SNS.PublishBatch is not supported at the moment because it is not available in the minimum SDK\n  version targeted by the instrumentation)\n\nNote that injection will only happen if, after injection, a maximum of 10 attributes is used to not\nrun over API limitations set by AWS.\n\nIf this does not fulfill your use case, perhaps because you are\nusing the same SDK with a different non-AWS managed service, let us know so we can provide\nconfiguration for this behavior.\n\n## Development\n\n### Testing\n\nSome tests use recorded API responses to run through instrumentation. By default, recordings\nare used, but if needing to add new tests/recordings or update existing ones, run the tests with\nthe `RECORD_WITH_REAL_API` environment variable set. AWS credentials will need to be correctly\nconfigured to work.\n",
      "name": "aws-sdk-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-2.2"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Gen Ai",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-2.2",
      "target_versions": {
        "javaagent": [
          "software.amazon.awssdk:aws-core:[2.2.0,)",
          "software.amazon.awssdk:bedrock-runtime:[2.25.63,)",
          "software.amazon.awssdk:lambda:[2.17.0,)",
          "software.amazon.awssdk:sns:[2.2.0,)",
          "software.amazon.awssdk:sqs:[2.2.0,)"
        ],
        "library": [
          "software.amazon.awssdk:aws-core:2.2.0",
          "software.amazon.awssdk:aws-json-protocol:2.2.0",
          "software.amazon.awssdk:lambda:2.2.0",
          "software.amazon.awssdk:sns:2.2.0",
          "software.amazon.awssdk:sqs:2.2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                }
              ],
              "description": "GenAI operation duration.",
              "name": "gen_ai.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.token.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Measures number of input and output tokens used.",
              "name": "gen_ai.client.token.usage",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "token"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.global_secondary_indexes",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.limit",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.read_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.write_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.select",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.secretsmanager.secret.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.max_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.stop_sequences",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.temperature",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.top_p",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.response.finish_reasons",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.usage.output_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.global_secondary_indexes",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.limit",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.read_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.write_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.select",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.secretsmanager.secret.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "name": "azure-core-1.14",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.14"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.14",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.14.0,1.19.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "name": "azure-core-1.19",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.19"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.19",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.19.0,1.36.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "name": "azure-core-1.36",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.36"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.36",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.36.0,)"
        ]
      }
    },
    {
      "description": "The c3p0 instrumentation provides connection pool metrics for c3p0 data sources.",
      "markdown_content": "# Library Instrumentation for C3P0 version 0.9 and higher\n\nProvides OpenTelemetry instrumentation for [C3P0](https://www.mchange.com/projects/c3p0/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-c3p0-0.9).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-c3p0-0.9</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-c3p0-0.9:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `PooledDataSource` instances for\ncollecting OpenTelemetry-based metrics.\n\n```java\nC3p0Telemetry c3p0Telemetry;\n\nvoid configure(OpenTelemetry openTelemetry, PooledDataSource dataSource) {\n  c3p0Telemetry = C3p0Telemetry.create(openTelemetry);\n  c3p0Telemetry.registerMetrics(dataSource);\n}\n\nvoid destroy(PooledDataSource dataSource) {\n  c3p0Telemetry.unregisterMetrics(dataSource);\n}\n```\n",
      "name": "c3p0-0.9",
      "scope": {
        "name": "io.opentelemetry.c3p0-0.9"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/c3p0-0.9",
      "target_versions": {
        "javaagent": [
          "com.mchange:c3p0:(,)"
        ],
        "library": [
          "com.mchange:c3p0:0.9.2"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental `camel.uri`, `camel.kafka.partitionKey`, `camel.kafka.key` and `camel.kafka.offset` span attributes.\n",
          "name": "otel.instrumentation.camel.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Apache Camel 2.x applications by generating spans for each route execution. For Camel versions 3.5 and newer, users should instead use the native 'camel-opentelemetry' component provided directly by the Camel project.\n",
      "name": "camel-2.20",
      "scope": {
        "name": "io.opentelemetry.camel-2.20"
      },
      "semconv": [],
      "source_path": "instrumentation/camel-2.20",
      "target_versions": {
        "javaagent": [
          "org.apache.camel:camel-core:[2.19,3)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "name": "cassandra-3.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-3.0"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-3.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.cassandra:cassandra-driver-core:[3.0,4.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.cassandra.table",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "name": "cassandra-4.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.0"
      },
      "semconv": [
        "Cassandra",
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-4.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.0,4.4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.cassandra.consistency_level",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.dc",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.id",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.idempotence",
                  "type": "BOOLEAN"
                },
                {
                  "name": "db.cassandra.page_size",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.speculative_execution_count",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.table",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "cassandra.consistency.level",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.dc",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.page.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "cassandra.query.idempotent",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "cassandra.speculative_execution.count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "name": "cassandra-4.4",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.4"
      },
      "semconv": [
        "Cassandra",
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-4.4",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.4,]"
        ],
        "library": [
          "com.datastax.oss:java-driver-core:4.4.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.cassandra.consistency_level",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.dc",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.id",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.idempotence",
                  "type": "BOOLEAN"
                },
                {
                  "name": "db.cassandra.page_size",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.speculative_execution_count",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.table",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "cassandra.consistency.level",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.dc",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.page.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "cassandra.query.idempotent",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "cassandra.speculative_execution.count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the V1 ClickHouseClient, providing database client spans and metrics.",
      "name": "clickhouse-client-0.5",
      "scope": {
        "name": "io.opentelemetry.clickhouse-client-0.5"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/clickhouse-client-0.5",
      "target_versions": {
        "javaagent": [
          "com.clickhouse.client:clickhouse-client:[0.5.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental span attributes `couchbase.operation_id` and `couchbase.local.address`",
          "name": "otel.instrumentation.couchbase.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "name": "couchbase-2.0",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-2.0",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2,3)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental span attributes couchbase.operation_id and couchbase.local.address",
          "name": "otel.instrumentation.couchbase.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "name": "couchbase-2.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-2.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2.6.0,3)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "name": "couchbase-3.1",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1,3.1.6)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "name": "couchbase-3.1.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1.6,3.2.0)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "name": "couchbase-3.2",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.2",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.2.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the dropwizard metrics instrumentation.",
          "name": "otel.instrumentation.dropwizard-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "The dropwizard-metrics instrumentation for the dropwizard/codahale metrics library produces OpenTelemetry compliant versions of the metrics generated by the Dropwizard MetricRegistry.\nThe Dropwizard metrics API does not have a concept of metric labels/tags/attributes, thus the data produced by this integration might be of very low quality, depending on how the API is used in the instrumented application.\n",
      "disabled_by_default": true,
      "name": "dropwizard-metrics-4.0",
      "scope": {
        "name": "io.opentelemetry.dropwizard-metrics-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-metrics-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard.metrics:metrics-core:[4.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "dropwizard-views-0.7",
      "scope": {
        "name": "io.opentelemetry.dropwizard-views-0.7"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-views-0.7",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-views:(,3.0.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables client spans for Elasticsearch API client requests for version 7 of the client. Versions 8.10 and later have native support for OpenTelemetry.",
      "name": "elasticsearch-api-client-7.16",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-api-client-7.16"
      },
      "semconv": [],
      "source_path": "instrumentation/elasticsearch/elasticsearch-api-client-7.16",
      "target_versions": {
        "javaagent": [
          "co.elastic.clients:elasticsearch-java:[7.16,7.17.20)",
          "co.elastic.clients:elasticsearch-java:[8.0.0,8.10)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries\nmay contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Elasticsearch REST clients.",
      "name": "elasticsearch-rest-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[5.0,6.4)",
          "org.elasticsearch.client:rest:[5.0,6.4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Elasticsearch REST clients.",
      "name": "elasticsearch-rest-6.4",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-6.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-6.4",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[6.4,7.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Elasticsearch REST clients.",
      "name": "elasticsearch-rest-7.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-7.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-7.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[7.0,)"
        ],
        "library": [
          "org.elasticsearch.client:elasticsearch-rest-client:7.0.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes.",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables client spans for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "name": "elasticsearch-transport-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.0.0,5.3.0)",
          "org.elasticsearch:elasticsearch:[5.0.0,5.3.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes.",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables client spans for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "name": "elasticsearch-transport-5.3",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.3"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.3",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.3.0,6.0.0)",
          "org.elasticsearch:elasticsearch:[5.3.0,6.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.search.types",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes.",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables client spans for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "name": "elasticsearch-transport-6.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-6.0"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-6.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[6.0.0,)",
          "org.elasticsearch:elasticsearch:[6.0.0,8.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "List of Executor subclasses to be instrumented.",
          "name": "otel.instrumentation.executors.include",
          "type": "list"
        },
        {
          "default": false,
          "description": "Whether to instrument all classes that implement the Executor interface.",
          "name": "otel.instrumentation.executors.include-all",
          "type": "boolean"
        }
      ],
      "description": "The executor instrumentation ensures that context is automatically propagated when using common Java executors (e.g., ThreadPoolExecutor, ScheduledThreadPoolExecutor, ForkJoinPool). When a task is submitted, the current context is captured and bound to the task. Then, when the task eventually runs, even if it\u2019s on a different thread, the instrumentation reactivates that context, enabling consistent correlation across concurrent and asynchronous workflows.\n",
      "name": "executors",
      "scope": {
        "name": "io.opentelemetry.executors"
      },
      "semconv": [],
      "source_path": "instrumentation/executors",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "description": "This instrumentation for Finagle HTTP clients and servers ensures that telemetry is correctly generated by the underlying Netty instrumentation. It augments existing telemetry by bridging the gap between Finagle's abstractions and Netty's pipeline, primarily for context propagation.\n",
      "name": "finagle-http-23.11",
      "scope": {
        "name": "io.opentelemetry.finagle-http-23.11"
      },
      "semconv": [],
      "source_path": "instrumentation/finagle-http-23.11",
      "target_versions": {
        "javaagent": [
          "com.twitter:finagle-http_2.12:[23.11.0,]",
          "com.twitter:finagle-http_2.13:[23.11.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation for the Finatra web framework augments the telemetry generated by the underlying Netty instrumentation. It provides more specific, high-level context, such as route information, to the spans generated by Netty.",
      "name": "finatra-2.9",
      "scope": {
        "name": "io.opentelemetry.finatra-2.9"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/finatra-2.9",
      "target_versions": {
        "javaagent": [
          "com.twitter:finatra-http_2.11:[2.9.0,]",
          "com.twitter:finatra-http_2.12:[2.9.0,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "geode-1.4",
      "scope": {
        "name": "io.opentelemetry.geode-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/geode-1.4",
      "target_versions": {
        "javaagent": [
          "org.apache.geode:geode-core:[1.4.0,)"
        ]
      }
    },
    {
      "name": "google-http-client-1.19",
      "scope": {
        "name": "io.opentelemetry.google-http-client-1.19"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/google-http-client-1.19",
      "target_versions": {
        "javaagent": [
          "com.google.http-client:google-http-client:[1.19.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "grails-3.0",
      "scope": {
        "name": "io.opentelemetry.grails-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/grails-3.0",
      "target_versions": {
        "javaagent": [
          "org.grails:grails-web-url-mappings:[3.0,)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for GraphQL Java version 12.0 to 20.0\n\nProvides OpenTelemetry instrumentation for [GraphQL Java](https://www.graphql-java.com/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-graphql-java-12.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-graphql-java-12.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-graphql-java-12.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a GraphQL Java `Instrumentation` implementation that can be\nadded to an instance of the `GraphQL` to provide OpenTelemetry-based spans.\n\n```java\nvoid configure(OpenTelemetry openTelemetry, GraphQL.Builder builder) {\n  GraphQLTelemetry telemetry = GraphQLTelemetry.builder(openTelemetry).build();\n  builder.instrumentation(telemetry.newInstrumentation());\n}\n```\n",
      "name": "graphql-java-12.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-12.0"
      },
      "semconv": [],
      "source_path": "instrumentation/graphql-java/graphql-java-12.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[12,20)"
        ],
        "library": [
          "com.graphql-java:graphql-java:[12.0,19.+)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for GraphQL Java version 20.0 and higher\n\nProvides OpenTelemetry instrumentation for [GraphQL Java](https://www.graphql-java.com/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-graphql-java-12.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-graphql-java-20.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-graphql-java-20.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a GraphQL Java `Instrumentation` implementation that can be\nadded to an instance of the `GraphQL` to provide OpenTelemetry-based spans.\n\n```java\nvoid configure(OpenTelemetry openTelemetry, GraphQL.Builder builder) {\n  GraphQLTelemetry telemetry = GraphQLTelemetry.builder(openTelemetry).build();\n  builder.instrumentation(telemetry.newInstrumentation());\n}\n```\n",
      "minimum_java_version": 11,
      "name": "graphql-java-20.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/graphql-java/graphql-java-20.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[20,)"
        ],
        "library": [
          "com.graphql-java:graphql-java:20.0"
        ]
      }
    },
    {
      "name": "grizzly-2.3",
      "scope": {
        "name": "io.opentelemetry.grizzly-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/grizzly-2.3",
      "target_versions": {
        "javaagent": [
          "org.glassfish.grizzly:grizzly-http:[2.3,)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for gRPC 1.6.0+\n\nProvides OpenTelemetry instrumentation for [gRPC](https://grpc.io/).\n\n## Quickstart\n\n### Add the following dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-grpc-1.6).\n\nFor Maven, add the following to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-grpc-1.6</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add the following to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-grpc-1.6:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides the implementation of `ClientInterceptor` and `ServerInterceptor` to provide OpenTelemetry-based spans and context propagation.\n\n```java\n// For client-side, attach the interceptor to your channel builder.\nvoid configureClientInterceptor(OpenTelemetry openTelemetry, NettyChannelBuilder nettyChannelBuilder) {\n  GrpcTelemetry grpcTelemetry = GrpcTelemetry.create(openTelemetry);\n  nettyChannelBuilder.intercept(grpcTelemetry.newClientInterceptor());\n}\n\n// For server-side, attatch the interceptor to your service.\nServerServiceDefinition configureServerInterceptor(OpenTelemetry openTelemetry, ServerServiceDefinition serviceDefinition) {\n  GrpcTelemetry grpcTelemetry = GrpcTelemetry.create(openTelemetry);\n  return ServerInterceptors.intercept(serviceDefinition, grpcTelemetry.newServerInterceptor());\n}\n```\n",
      "name": "grpc-1.6",
      "scope": {
        "name": "io.opentelemetry.grpc-1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/grpc-1.6",
      "target_versions": {
        "javaagent": [
          "io.grpc:grpc-core:[1.6.0,)"
        ],
        "library": [
          "io.grpc:grpc-core:1.6.0"
        ]
      }
    },
    {
      "name": "guava-10.0",
      "scope": {
        "name": "io.opentelemetry.guava-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/guava-10.0",
      "target_versions": {
        "javaagent": [
          "com.google.guava:guava:[10.0,]"
        ],
        "library": [
          "com.google.guava:guava:10.0"
        ]
      }
    },
    {
      "name": "gwt-2.0",
      "scope": {
        "name": "io.opentelemetry.gwt-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/gwt-2.0",
      "target_versions": {
        "javaagent": [
          "com.google.gwt:gwt-servlet:[2.0.0,)",
          "org.gwtproject:gwt-servlet:[2.10.0,)"
        ]
      }
    },
    {
      "name": "hibernate-3.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-3.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[3.3.0.GA,4.0.0.Final)"
        ]
      }
    },
    {
      "name": "hibernate-4.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-4.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.0.0.Final,6)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "hibernate-6.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-6.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[6.0.0.Final,)"
        ]
      }
    },
    {
      "name": "hibernate-procedure-call-4.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-procedure-call-4.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-procedure-call-4.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.3.0.Final,)"
        ]
      }
    },
    {
      "name": "hibernate-reactive-1.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-reactive-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-reactive-1.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate.reactive:hibernate-reactive-core:(,)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for HikariCP version 3.0 and higher\n\nProvides OpenTelemetry instrumentation for [HikariCP](https://github.com/brettwooldridge/HikariCP).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-hikaricp-3.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-hikaricp-3.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-hikaricp-3.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a `MetricsTrackerFactory` implementation that can be added to\nan instance of the `HikariConfig` (or `HikariDataSource`) to provide OpenTelemetry-based metrics.\n\n```java\nvoid configure(OpenTelemetry openTelemetry, HikariConfig connectionPoolConfig) {\n  HikariTelemetry telemetry = HikariTelemetry.create(openTelemetry);\n  connectionPoolConfig.setMetricsTrackerFactory(telemetry.createMetricsTrackerFactory());\n}\n```\n",
      "name": "hikaricp-3.0",
      "scope": {
        "name": "io.opentelemetry.hikaricp-3.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/hikaricp-3.0",
      "target_versions": {
        "javaagent": [
          "com.zaxxer:HikariCP:[3.0.0,)"
        ],
        "library": [
          "com.zaxxer:HikariCP:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time it took to create a new connection.",
              "name": "db.client.connections.create_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of connection timeouts that have occurred trying to obtain a connection from the pool.",
              "name": "db.client.connections.timeouts",
              "type": "LONG_SUM",
              "unit": "timeouts"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time between borrowing a connection and returning it to the pool.",
              "name": "db.client.connections.use_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time it took to obtain an open connection from the pool.",
              "name": "db.client.connections.wait_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to create a new connection.",
              "name": "db.client.connection.create_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connection timeouts that have occurred trying to obtain a connection from the pool.",
              "name": "db.client.connection.timeouts",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "timeout"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time between borrowing a connection and returning it to the pool.",
              "name": "db.client.connection.use_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to obtain an open connection from the pool.",
              "name": "db.client.connection.wait_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "http-url-connection",
      "scope": {
        "name": "io.opentelemetry.http-url-connection"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/http-url-connection",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "hystrix-1.4",
      "scope": {
        "name": "io.opentelemetry.hystrix-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/hystrix-1.4",
      "target_versions": {
        "javaagent": [
          "com.netflix.hystrix:hystrix-core:[1.4.0,)"
        ]
      }
    },
    {
      "name": "influxdb-2.4",
      "scope": {
        "name": "io.opentelemetry.influxdb-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/influxdb-2.4",
      "target_versions": {
        "javaagent": [
          "org.influxdb:influxdb-java:[2.4,)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Java HTTP Client\n\nProvides OpenTelemetry instrumentation for [Java HTTP Client](https://openjdk.org/groups/net/httpclient/intro.html).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-java-http-client).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-java-http-client</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-java-http-client:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library contains an `HttpClient` wrapper that provides OpenTelemetry-based spans\nand context propagation.\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.httpclient.JavaHttpClientTelemetry;\nimport java.net.http.HttpClient;\n\nimport java.util.concurrent.ExecutorService;\n\npublic class JavaHttpClientConfiguration {\n\n  //Use this HttpClient implementation for making standard http client calls.\n  public HttpClient createTracedClient(OpenTelemetry openTelemetry) {\n    return JavaHttpClientTelemetry.builder(openTelemetry).build().newHttpClient(createClient());\n  }\n\n  //your configuration of the Java HTTP Client goes here:\n  private HttpClient createClient() {\n    return HttpClient.newBuilder().build();\n  }\n}\n```\n",
      "minimum_java_version": 11,
      "name": "java-http-client",
      "scope": {
        "name": "io.opentelemetry.java-http-client"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/java-http-client",
      "target_versions": {
        "javaagent": [
          "Java 11+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "markdown_content": "# Library Instrumentation for Java HTTP Server\n\nProvides OpenTelemetry instrumentation for [Java HTTP Server](https://docs.oracle.com/en/java/javase/21/docs/api/jdk.httpserver/module-summary.html).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-java-http-server).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-java-http-server</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-java-http-server:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library contains a `Filter` wrapper that provides OpenTelemetry-based spans\nand context propagation.\n\n```java\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\n\nimport com.sun.net.httpserver.HttpContext;\nimport com.sun.net.httpserver.HttpServer;\n\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\n\npublic class Application {\n\n  static void main(String args) throws IOException {\n\n    final HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);\n    final HttpContext context =\n        server.createContext(\n            \"/\",\n            ctx -> {\n              // http logic\n            });\n\n    OpenTelemetry openTelemetry = //...\n\n    JavaHttpServerTelemetry.create(openTelemetry).configure(context);\n  }\n}\n```\n",
      "name": "java-http-server",
      "scope": {
        "name": "io.opentelemetry.java-http-server"
      },
      "semconv": [],
      "source_path": "instrumentation/java-http-server",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "javalin-5.0",
      "scope": {
        "name": "io.opentelemetry.javalin-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/javalin-5.0",
      "target_versions": {
        "javaagent": [
          "io.javalin:javalin:[5.0.0,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "jaxrs-1.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-1.0",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:jsr311-api:[0.5,)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-annotations"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-annotations",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:javax.ws.rs-api:[,]"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-cxf-3.2",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-cxf-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-cxf-3.2",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxrs:[3.2,4)",
          "org.apache.tomee:openejb-cxf-rs:(8,)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-jersey-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-jersey-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-jersey-2.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.containers:jersey-container-servlet:[2.0,3.0.0)",
          "org.glassfish.jersey.core:jersey-server:[2.0,3.0.0)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-resteasy-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-jaxrs:[3.0.0.Final,3.1.0.Final)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.5.0.Final,4)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-resteasy-3.1",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[4.0.0.Final,6)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.1.0.Final,3.5.0.Final)"
        ]
      }
    },
    {
      "name": "jaxrs-3.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-annotations"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-annotations",
      "target_versions": {
        "javaagent": [
          "jakarta.ws.rs:jakarta.ws.rs-api:[3.0.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-jersey-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-jersey-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-jersey-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.core:jersey-server:[3.0.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-resteasy-6.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-resteasy-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-resteasy-6.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[6.0.0.Final,)"
        ]
      }
    },
    {
      "name": "jaxws-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0",
      "target_versions": {
        "javaagent": [
          "javax.xml.ws:jaxws-api:[2.0,]"
        ]
      }
    },
    {
      "name": "jaxws-2.0-axis2-1.6",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0-axis2-1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0-axis2-1.6",
      "target_versions": {
        "javaagent": [
          "org.apache.axis2:axis2-jaxws:[1.6.0,)"
        ]
      }
    },
    {
      "name": "jaxws-cxf-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-cxf-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-cxf-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxws:[3.0.0,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "jaxws-jws-api-1.1",
      "scope": {
        "name": "io.opentelemetry.jaxws-jws-api-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-jws-api-1.1",
      "target_versions": {
        "javaagent": [
          "javax.jws:javax.jws-api:[1.1,]"
        ]
      }
    },
    {
      "name": "jaxws-metro-2.2",
      "scope": {
        "name": "io.opentelemetry.jaxws-metro-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-metro-2.2",
      "target_versions": {
        "javaagent": [
          "com.sun.xml.ws:jaxws-rt:[2.2.0.1,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-appender-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-appender-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-appender-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-mdc-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-mdc-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-mdc-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": false,
          "description": "Enables instrumentation of JDBC datasource connections.",
          "name": "otel.instrumentation.jdbc-datasource.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Sets whether the query parameters should be captured as span attributes named <code>db.query.parameter.&lt;key&gt;</code>. Enabling this option disables the statement sanitization.<p>WARNING: captured query parameters may contain sensitive information such as passwords, personally identifiable information or protected health info.\n",
          "name": "otel.instrumentation.jdbc.experimental.capture-query-parameters",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental instrumentation to create spans for COMMIT and ROLLBACK operations.",
          "name": "otel.instrumentation.jdbc.experimental.transaction.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables statement sanitization for database queries. Takes precedent to otel.instrumentation.common.db-statement-sanitizer.enabled.",
          "name": "otel.instrumentation.jdbc.statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "The JDBC instrumentation provides database client spans and metrics. Each call produces a span named after the SQL verb, enriched with standard DB client attributes (system, database, operation, sanitized statement, peer address) and error details if an exception occurs.\nThere is also a \"jdbc-datasource\" instrumentation that creates spans for datasource connections, but is disabled by default due to the volume of telemetry produced.\n",
      "markdown_content": "# Library Instrumentation for JDBC\n\nProvides OpenTelemetry instrumentation for\n[Java JDBC API](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-jdbc).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-jdbc</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThere are two possible ways to activate the OpenTelemetry JDBC instrumentation. The first way is more preferable for\nDI frameworks which uses connection pools, as it wraps a `DataSource` with a special OpenTelemetry wrapper. The second\none requires to change the connection URL and switch to use a special OpenTelemetry driver.\n\n#### Datasource way\n\nIf your application uses a DataSource, simply wrap your current DataSource object with `OpenTelemetryDataSource`.\n`OpenTelemetryDataSource` has a constructor method that accepts the `DataSource` to wrap. This is by far the simplest\nmethod especially if you use a dependency injection (DI) frameworks such as\n[Spring Framework](https://spring.io/projects/spring-framework), [Micronaut](https://micronaut.io),\n[Quarkus](https://quarkus.io), or [Guice](https://github.com/google/guice).\n\n```java\nimport org.apache.commons.dbcp2.BasicDataSource;\nimport org.springframework.context.annotation.Configuration;\nimport io.opentelemetry.instrumentation.jdbc.datasource.OpenTelemetryDataSource;\n\n@Configuration\npublic class DataSourceConfig {\n\n  @Bean\n  public DataSource dataSource() {\n    BasicDataSource dataSource = new BasicDataSource();\n    dataSource.setDriverClassName(\"org.postgresql.Driver\");\n    dataSource.setUrl(\"jdbc:postgresql://127.0.0.1:5432/example\");\n    dataSource.setUsername(\"postgres\");\n    dataSource.setPassword(\"root\");\n    return JdbcTelemetry.create(openTelemetry).wrap(dataSource);\n  }\n\n}\n```\n\n#### Driver way\n\n1. Activate tracing for JDBC connections by setting `jdbc:otel:` prefix to the JDBC URL, e.g. `jdbc:otel:h2:mem:test`.\n\n2. Set the driver class to `io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver`.\n\n3. Inject `OpenTelemetry` into `io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver` _before the initialization of the database connection pool_.\nYou can do this with the `void setOpenTelemetry(OpenTelemetry openTelemetry)` method of `io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver`.\nAnother way is to use `OpenTelemetryDriver.install(OpenTelemetry openTelemetry)`.\n",
      "name": "jdbc",
      "scope": {
        "name": "io.opentelemetry.jdbc"
      },
      "semconv": [],
      "source_path": "instrumentation/jdbc",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "name": "jedis-1.4",
      "scope": {
        "name": "io.opentelemetry.jedis-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-1.4",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[1.4.0,3.0.0)"
        ]
      }
    },
    {
      "name": "jedis-3.0",
      "scope": {
        "name": "io.opentelemetry.jedis-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-3.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[3.0.0,4)"
        ]
      }
    },
    {
      "name": "jedis-4.0",
      "scope": {
        "name": "io.opentelemetry.jedis-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-4.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[4.0.0-beta1,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jetty-11.0",
      "scope": {
        "name": "io.opentelemetry.jetty-11.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-11.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[11, 12)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "jetty-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-12.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[12,)"
        ]
      }
    },
    {
      "name": "jetty-8.0",
      "scope": {
        "name": "io.opentelemetry.jetty-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-8.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[8.0.0.v20110901,11)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "jetty-httpclient-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-12.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[12,)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:12.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jetty-httpclient-9.2",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-9.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-9.2",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[9.2,10)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:[9.2.0.v20140526,9.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jms-1.1",
      "scope": {
        "name": "io.opentelemetry.jms-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-1.1",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:(,3)",
          "javax.jms:javax.jms-api:(,)",
          "javax.jms:jms-api:(,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jms-3.0",
      "scope": {
        "name": "io.opentelemetry.jms-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-3.0",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:[3.0.0,)"
        ]
      }
    },
    {
      "name": "jodd-http-4.2",
      "scope": {
        "name": "io.opentelemetry.jodd-http-4.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jodd-http-4.2",
      "target_versions": {
        "javaagent": [
          "org.jodd:jodd-http:[4.2.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jsf-mojarra-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-1.2",
      "target_versions": {
        "javaagent": [
          "com.sun.faces:jsf-impl:[2.0,2.1)",
          "com.sun.faces:jsf-impl:[2.1,2.2)",
          "javax.faces:jsf-impl:[1.2,2)",
          "org.glassfish:jakarta.faces:[2.3.9,3)",
          "org.glassfish:javax.faces:[2.0.7,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-mojarra-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish:jakarta.faces:[3,)"
        ]
      }
    },
    {
      "name": "jsf-myfaces-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-1.2",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[1.2,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-myfaces-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[3,)"
        ]
      }
    },
    {
      "name": "jsp-2.3",
      "scope": {
        "name": "io.opentelemetry.jsp-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/jsp-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jasper:[7.0.19,10)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the capture of the experimental consumer attribute \"kafka.record.queue_time_ms\"",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enable context propagation for kafka message producers.",
          "name": "otel.instrumentation.kafka.producer-propagation.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables messaging spans and metrics for Apache Kafka 0.11 clients. It automatically traces message production and consumption, propagates context, and emits metrics for production and consumption.\n",
      "name": "kafka-clients-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-clients:[0.11.0.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation provides a library integration that enables messaging spans and metrics for Apache Kafka 2.6+ clients.\n",
      "markdown_content": "# Library instrumentation for Kafka Clients version 2.6 and higher\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-kafka-clients-2.6).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-kafka-clients-2.6</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-kafka-clients-2.6:OPENTELEMETRY_VERSION\")\n```\n\n### Usage (Tracing)\n\nThere are two options for capturing traces, either using interceptors or wrapping clients, both described below.\n\n#### Using interceptors\n\nThe Kafka clients API provides a way to \"intercept\" messages before they are sent to the brokers as well as messages received from the broker before being passed to the application.\nThe OpenTelemetry instrumented Kafka library provides two interceptors to be configured to add tracing information automatically.\nThe interceptor class has to be set in the properties bag used to create the Kafka client.\n\nUse the `TracingProducerInterceptor` for the producer in order to create a \"send\" span automatically, each time a message is sent.\n\n```java\nprops.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingProducerInterceptor.class.getName());\n```\n\nUse the `TracingConsumerInterceptor` for the consumer in order to create a \"receive\" span automatically, each time a message is received.\n\n```java\nprops.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingConsumerInterceptor.class.getName());\n```\n\n#### Wrapping clients\n\nThe other way is by wrapping the Kafka client with a tracing enabled Kafka client.\n\nAssuming you have a `Producer<K, V> producer` instance, you can wrap it in the following way.\n\n```java\nKafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());\nProducer<String, String> tracingProducer = telemetry.wrap(producer);\n```\n\nThen use the `tracingProducer` as usual for sending messages to the Kafka cluster.\n\nAssuming you have a `Consumer<K, V> consumer` instance, you can wrap it in the following way.\n\n```java\nKafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());\nConsumer<String, String> tracingConsumer = telemetry.wrap(this.consumer);\n```\n\nThen use the `tracingConsumer` as usual for receiving messages from the Kafka cluster.\n\n### Usage (Metrics)\n\nThe Kafka client exposes metrics via `org.apache.kafka.common.metrics.MetricsReporter` interface.\nOpenTelemetry provides an implementation that bridges the metrics into OpenTelemetry.\n\nTo use, merge the config properties\nfrom `KafkaTelemetry.create(OpenTelemetry).metricConfigProperties()`\nwith the configuration used when creating your producer or consumer.\n\nNote: Kafka reports several metrics at multiple attribute granularities. For\nexample, `records-consumed-total` is reported with attribute key `[client-id]`\nand `[client-id, topic]`. If you analyze the sum of records consumed, ignoring dimensions, backends\nare likely to double count. The implementation detects this scenario and only records the most\ngranular set of attributes available. In the case\nof `records-consumed-total`, it reports `[client-id, topic]` and ignores `[client-id]`.\n\nThe following table shows the full set of metrics exposed by the kafka client, and the corresponding\nOpenTelemetry metric each maps to (if available). Empty values in the Instrument Name, Instrument\nDescription, etc column indicates there is no registered mapping for the metric and data is NOT\ncollected.\n\n| Metric Group                     | Metric Name                                 | Attribute Keys                  | Instrument Name                                            | Instrument Description                                                                                                                            | Instrument Type             |\n|----------------------------------|---------------------------------------------|---------------------------------|------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|\n| `consumer-coordinator-metrics`   | `assigned-partitions`                       | `client-id`                     | `kafka.consumer.assigned_partitions`                       | The number of partitions currently assigned to this consumer.                                                                                     | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-latency-avg`                        | `client-id`                     | `kafka.consumer.commit_latency_avg`                        | The average time taken for a commit request.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-latency-max`                        | `client-id`                     | `kafka.consumer.commit_latency_max`                        | The max time taken for a commit request.                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-rate`                               | `client-id`                     | `kafka.consumer.commit_rate`                               | The number of commit calls per second.                                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-total`                              | `client-id`                     | `kafka.consumer.commit_total`                              | The total number of commit calls.                                                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `failed-rebalance-rate-per-hour`            | `client-id`                     | `kafka.consumer.failed_rebalance_rate_per_hour`            | The number of failed rebalance events per hour.                                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `failed-rebalance-total`                    | `client-id`                     | `kafka.consumer.failed_rebalance_total`                    | The total number of failed rebalance events.                                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `heartbeat-rate`                            | `client-id`                     | `kafka.consumer.heartbeat_rate`                            | The number of heartbeats per second.                                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `heartbeat-response-time-max`               | `client-id`                     | `kafka.consumer.heartbeat_response_time_max`               | The max time taken to receive a response to a heartbeat request.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `heartbeat-total`                           | `client-id`                     | `kafka.consumer.heartbeat_total`                           | The total number of heartbeats.                                                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `join-rate`                                 | `client-id`                     | `kafka.consumer.join_rate`                                 | The number of group joins per second.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `join-time-avg`                             | `client-id`                     | `kafka.consumer.join_time_avg`                             | The average time taken for a group rejoin.                                                                                                        | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `join-time-max`                             | `client-id`                     | `kafka.consumer.join_time_max`                             | The max time taken for a group rejoin.                                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `join-total`                                | `client-id`                     | `kafka.consumer.join_total`                                | The total number of group joins.                                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `last-heartbeat-seconds-ago`                | `client-id`                     | `kafka.consumer.last_heartbeat_seconds_ago`                | The number of seconds since the last coordinator heartbeat was sent.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `last-rebalance-seconds-ago`                | `client-id`                     | `kafka.consumer.last_rebalance_seconds_ago`                | The number of seconds since the last successful rebalance event.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-assigned-latency-avg`            | `client-id`                     | `kafka.consumer.partition_assigned_latency_avg`            | The average time taken for a partition-assigned rebalance listener callback.                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-assigned-latency-max`            | `client-id`                     | `kafka.consumer.partition_assigned_latency_max`            | The max time taken for a partition-assigned rebalance listener callback.                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-lost-latency-avg`                | `client-id`                     | `kafka.consumer.partition_lost_latency_avg`                | The average time taken for a partition-lost rebalance listener callback.                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-lost-latency-max`                | `client-id`                     | `kafka.consumer.partition_lost_latency_max`                | The max time taken for a partition-lost rebalance listener callback.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-revoked-latency-avg`             | `client-id`                     | `kafka.consumer.partition_revoked_latency_avg`             | The average time taken for a partition-revoked rebalance listener callback.                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-revoked-latency-max`             | `client-id`                     | `kafka.consumer.partition_revoked_latency_max`             | The max time taken for a partition-revoked rebalance listener callback.                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-latency-avg`                     | `client-id`                     | `kafka.consumer.rebalance_latency_avg`                     | The average time taken for a group to complete a successful rebalance, which may be composed of several failed re-trials until it succeeded.      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-latency-max`                     | `client-id`                     | `kafka.consumer.rebalance_latency_max`                     | The max time taken for a group to complete a successful rebalance, which may be composed of several failed re-trials until it succeeded.          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-latency-total`                   | `client-id`                     | `kafka.consumer.rebalance_latency_total`                   | The total number of milliseconds this consumer has spent in successful rebalances since creation.                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `rebalance-rate-per-hour`                   | `client-id`                     | `kafka.consumer.rebalance_rate_per_hour`                   | The number of successful rebalance events per hour, each event is composed of several failed re-trials until it succeeded.                        | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-total`                           | `client-id`                     | `kafka.consumer.rebalance_total`                           | The total number of successful rebalance events, each event is composed of several failed re-trials until it succeeded.                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `sync-rate`                                 | `client-id`                     | `kafka.consumer.sync_rate`                                 | The number of group syncs per second.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `sync-time-avg`                             | `client-id`                     | `kafka.consumer.sync_time_avg`                             | The average time taken for a group sync.                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `sync-time-max`                             | `client-id`                     | `kafka.consumer.sync_time_max`                             | The max time taken for a group sync.                                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `sync-total`                                | `client-id`                     | `kafka.consumer.sync_total`                                | The total number of group syncs.                                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `bytes-consumed-rate`                       | `client-id`,`topic`             | `kafka.consumer.bytes_consumed_rate`                       | The average number of bytes consumed per second.                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `bytes-consumed-total`                      | `client-id`,`topic`             | `kafka.consumer.bytes_consumed_total`                      | The total number of bytes consumed.                                                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `fetch-latency-avg`                         | `client-id`                     | `kafka.consumer.fetch_latency_avg`                         | The average time taken for a fetch request.                                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-latency-max`                         | `client-id`                     | `kafka.consumer.fetch_latency_max`                         | The max time taken for any fetch request.                                                                                                         | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-rate`                                | `client-id`                     | `kafka.consumer.fetch_rate`                                | The number of fetch requests per second.                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-size-avg`                            | `client-id`,`topic`             | `kafka.consumer.fetch_size_avg`                            | The average number of bytes fetched per request.                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-size-max`                            | `client-id`,`topic`             | `kafka.consumer.fetch_size_max`                            | The maximum number of bytes fetched per request.                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-throttle-time-avg`                   | `client-id`                     | `kafka.consumer.fetch_throttle_time_avg`                   | The average throttle time in ms.                                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-throttle-time-max`                   | `client-id`                     | `kafka.consumer.fetch_throttle_time_max`                   | The maximum throttle time in ms.                                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-total`                               | `client-id`                     | `kafka.consumer.fetch_total`                               | The total number of fetch requests.                                                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `records-consumed-rate`                     | `client-id`,`topic`             | `kafka.consumer.records_consumed_rate`                     | The average number of records consumed per second.                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-consumed-total`                    | `client-id`,`topic`             | `kafka.consumer.records_consumed_total`                    | The total number of records consumed.                                                                                                             | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `records-lag`                               | `client-id`,`topic`,`partition` | `kafka.consumer.records_lag`                               | The latest lag of the partition.                                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lag-avg`                           | `client-id`,`topic`,`partition` | `kafka.consumer.records_lag_avg`                           | The average lag of the partition.                                                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lag-max`                           | `client-id`,`topic`,`partition` | `kafka.consumer.records_lag_max`                           | The maximum lag in terms of number of records for any partition in this window. NOTE: This is based on current offset and not committed offset.   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lead`                              | `client-id`,`topic`,`partition` | `kafka.consumer.records_lead`                              | The latest lead of the partition.                                                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lead-avg`                          | `client-id`,`topic`,`partition` | `kafka.consumer.records_lead_avg`                          | The average lead of the partition.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lead-min`                          | `client-id`,`topic`,`partition` | `kafka.consumer.records_lead_min`                          | The minimum lead in terms of number of records for any partition in this window.                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-per-request-avg`                   | `client-id`,`topic`             | `kafka.consumer.records_per_request_avg`                   | The average number of records in each request.                                                                                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `commit-sync-time-ns-total`                 | `client-id`                     | `kafka.consumer.commit_sync_time_ns_total`                 | The total time the consumer has spent in commitSync in nanoseconds.                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `committed-time-ns-total`                   | `client-id`                     | `kafka.consumer.committed_time_ns_total`                   | The total time the consumer has spent in committed in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `connection-close-rate`                     | `client-id`                     | `kafka.consumer.connection_close_rate`                     | The number of connections closed per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `connection-close-total`                    | `client-id`                     | `kafka.consumer.connection_close_total`                    | The total number of connections closed.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `connection-count`                          | `client-id`                     | `kafka.consumer.connection_count`                          | The current number of active connections.                                                                                                         | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `connection-creation-rate`                  | `client-id`                     | `kafka.consumer.connection_creation_rate`                  | The number of new connections established per second.                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `connection-creation-total`                 | `client-id`                     | `kafka.consumer.connection_creation_total`                 | The total number of new connections established.                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `failed-authentication-rate`                | `client-id`                     | `kafka.consumer.failed_authentication_rate`                | The number of connections with failed authentication per second.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `failed-authentication-total`               | `client-id`                     | `kafka.consumer.failed_authentication_total`               | The total number of connections with failed authentication.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `failed-reauthentication-rate`              | `client-id`                     | `kafka.consumer.failed_reauthentication_rate`              | The number of failed re-authentication of connections per second.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `failed-reauthentication-total`             | `client-id`                     | `kafka.consumer.failed_reauthentication_total`             | The total number of failed re-authentication of connections.                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `io-ratio`                                  | `client-id`                     | `kafka.consumer.io_ratio`                                  | *Deprecated* The fraction of time the I/O thread spent doing I/O.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-time-ns-avg`                            | `client-id`                     | `kafka.consumer.io_time_ns_avg`                            | The average length of time for I/O per select call in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-time-ns-total`                          | `client-id`                     | `kafka.consumer.io_time_ns_total`                          | The total time the I/O thread spent doing I/O.                                                                                                    | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `io-wait-ratio`                             | `client-id`                     | `kafka.consumer.io_wait_ratio`                             | *Deprecated* The fraction of time the I/O thread spent waiting.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-wait-time-ns-avg`                       | `client-id`                     | `kafka.consumer.io_wait_time_ns_avg`                       | The average length of time the I/O thread spent waiting for a socket ready for reads or writes in nanoseconds.                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-wait-time-ns-total`                     | `client-id`                     | `kafka.consumer.io_wait_time_ns_total`                     | The total time the I/O thread spent waiting.                                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `io-waittime-total`                         | `client-id`                     | `kafka.consumer.io_waittime_total`                         | *Deprecated* The total time the I/O thread spent waiting.                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `iotime-total`                              | `client-id`                     | `kafka.consumer.iotime_total`                              | *Deprecated* The total time the I/O thread spent doing I/O.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `last-poll-seconds-ago`                     | `client-id`                     | `kafka.consumer.last_poll_seconds_ago`                     | The number of seconds since the last poll() invocation.                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `network-io-rate`                           | `client-id`                     | `kafka.consumer.network_io_rate`                           | The number of network operations (reads or writes) on all connections per second.                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `network-io-total`                          | `client-id`                     | `kafka.consumer.network_io_total`                          | The total number of network operations (reads or writes) on all connections.                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `poll-idle-ratio-avg`                       | `client-id`                     | `kafka.consumer.poll_idle_ratio_avg`                       | The average fraction of time the consumer's poll() is idle as opposed to waiting for the user code to process records.                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `reauthentication-latency-avg`              | `client-id`                     | `kafka.consumer.reauthentication_latency_avg`              | The average latency observed due to re-authentication.                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `reauthentication-latency-max`              | `client-id`                     | `kafka.consumer.reauthentication_latency_max`              | The max latency observed due to re-authentication.                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `select-rate`                               | `client-id`                     | `kafka.consumer.select_rate`                               | The number of times the I/O layer checked for new I/O to perform per second.                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `select-total`                              | `client-id`                     | `kafka.consumer.select_total`                              | The total number of times the I/O layer checked for new I/O to perform.                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `successful-authentication-no-reauth-total` | `client-id`                     | `kafka.consumer.successful_authentication_no_reauth_total` | The total number of connections with successful authentication where the client does not support re-authentication.                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `successful-authentication-rate`            | `client-id`                     | `kafka.consumer.successful_authentication_rate`            | The number of connections with successful authentication per second.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `successful-authentication-total`           | `client-id`                     | `kafka.consumer.successful_authentication_total`           | The total number of connections with successful authentication.                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `successful-reauthentication-rate`          | `client-id`                     | `kafka.consumer.successful_reauthentication_rate`          | The number of successful re-authentication of connections per second.                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `successful-reauthentication-total`         | `client-id`                     | `kafka.consumer.successful_reauthentication_total`         | The total number of successful re-authentication of connections.                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `time-between-poll-avg`                     | `client-id`                     | `kafka.consumer.time_between_poll_avg`                     | The average delay between invocations of poll() in milliseconds.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `time-between-poll-max`                     | `client-id`                     | `kafka.consumer.time_between_poll_max`                     | The max delay between invocations of poll() in milliseconds.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `incoming-byte-rate`                        | `client-id`,`node-id`           | `kafka.consumer.incoming_byte_rate`                        | The number of bytes read off all sockets per second.                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `incoming-byte-total`                       | `client-id`,`node-id`           | `kafka.consumer.incoming_byte_total`                       | The total number of bytes read off all sockets.                                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-node-metrics`          | `outgoing-byte-rate`                        | `client-id`,`node-id`           | `kafka.consumer.outgoing_byte_rate`                        | The number of outgoing bytes sent to all servers per second.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `outgoing-byte-total`                       | `client-id`,`node-id`           | `kafka.consumer.outgoing_byte_total`                       | The total number of outgoing bytes sent to all servers.                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-node-metrics`          | `request-latency-avg`                       | `client-id`,`node-id`           | `kafka.consumer.request_latency_avg`                       | The average request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-latency-max`                       | `client-id`,`node-id`           | `kafka.consumer.request_latency_max`                       | The maximum request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-rate`                              | `client-id`,`node-id`           | `kafka.consumer.request_rate`                              | The number of requests sent per second.                                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-size-avg`                          | `client-id`,`node-id`           | `kafka.consumer.request_size_avg`                          | The average size of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-size-max`                          | `client-id`,`node-id`           | `kafka.consumer.request_size_max`                          | The maximum size of any request sent.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-total`                             | `client-id`,`node-id`           | `kafka.consumer.request_total`                             | The total number of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-node-metrics`          | `response-rate`                             | `client-id`,`node-id`           | `kafka.consumer.response_rate`                             | The number of responses received per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `response-total`                            | `client-id`,`node-id`           | `kafka.consumer.response_total`                            | The total number of responses received.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `batch-size-avg`                            | `client-id`                     | `kafka.producer.batch_size_avg`                            | The average number of bytes sent per partition per-request.                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `batch-size-max`                            | `client-id`                     | `kafka.producer.batch_size_max`                            | The max number of bytes sent per partition per-request.                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `batch-split-rate`                          | `client-id`                     | `kafka.producer.batch_split_rate`                          | The average number of batch splits per second.                                                                                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `batch-split-total`                         | `client-id`                     | `kafka.producer.batch_split_total`                         | The total number of batch splits.                                                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `buffer-available-bytes`                    | `client-id`                     | `kafka.producer.buffer_available_bytes`                    | The total amount of buffer memory that is not being used (either unallocated or in the free list).                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `buffer-exhausted-rate`                     | `client-id`                     | `kafka.producer.buffer_exhausted_rate`                     | The average per-second number of record sends that are dropped due to buffer exhaustion.                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `buffer-exhausted-total`                    | `client-id`                     | `kafka.producer.buffer_exhausted_total`                    | The total number of record sends that are dropped due to buffer exhaustion.                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `buffer-total-bytes`                        | `client-id`                     | `kafka.producer.buffer_total_bytes`                        | The maximum amount of buffer memory the client can use (whether or not it is currently used).                                                     | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `bufferpool-wait-ratio`                     | `client-id`                     | `kafka.producer.bufferpool_wait_ratio`                     | The fraction of time an appender waits for space allocation.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `bufferpool-wait-time-ns-total`             | `client-id`                     | `kafka.producer.bufferpool_wait_time_ns_total`             | The total time in nanoseconds an appender waits for space allocation.                                                                             | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `bufferpool-wait-time-total`                | `client-id`                     | `kafka.producer.bufferpool_wait_time_total`                | *Deprecated* The total time an appender waits for space allocation.                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `compression-rate-avg`                      | `client-id`                     | `kafka.producer.compression_rate_avg`                      | The average compression rate of record batches, defined as the average ratio of the compressed batch size over the uncompressed size.             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-close-rate`                     | `client-id`                     | `kafka.producer.connection_close_rate`                     | The number of connections closed per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-close-total`                    | `client-id`                     | `kafka.producer.connection_close_total`                    | The total number of connections closed.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `connection-count`                          | `client-id`                     | `kafka.producer.connection_count`                          | The current number of active connections.                                                                                                         | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-creation-rate`                  | `client-id`                     | `kafka.producer.connection_creation_rate`                  | The number of new connections established per second.                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-creation-total`                 | `client-id`                     | `kafka.producer.connection_creation_total`                 | The total number of new connections established.                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `failed-authentication-rate`                | `client-id`                     | `kafka.producer.failed_authentication_rate`                | The number of connections with failed authentication per second.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `failed-authentication-total`               | `client-id`                     | `kafka.producer.failed_authentication_total`               | The total number of connections with failed authentication.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `failed-reauthentication-rate`              | `client-id`                     | `kafka.producer.failed_reauthentication_rate`              | The number of failed re-authentication of connections per second.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `failed-reauthentication-total`             | `client-id`                     | `kafka.producer.failed_reauthentication_total`             | The total number of failed re-authentication of connections.                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `flush-time-ns-total`                       | `client-id`                     | `kafka.producer.flush_time_ns_total`                       | Total time producer has spent in flush in nanoseconds.                                                                                            | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `io-ratio`                                  | `client-id`                     | `kafka.producer.io_ratio`                                  | *Deprecated* The fraction of time the I/O thread spent doing I/O.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-time-ns-avg`                            | `client-id`                     | `kafka.producer.io_time_ns_avg`                            | The average length of time for I/O per select call in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-time-ns-total`                          | `client-id`                     | `kafka.producer.io_time_ns_total`                          | The total time the I/O thread spent doing I/O.                                                                                                    | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `io-wait-ratio`                             | `client-id`                     | `kafka.producer.io_wait_ratio`                             | *Deprecated* The fraction of time the I/O thread spent waiting.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-wait-time-ns-avg`                       | `client-id`                     | `kafka.producer.io_wait_time_ns_avg`                       | The average length of time the I/O thread spent waiting for a socket ready for reads or writes in nanoseconds.                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-wait-time-ns-total`                     | `client-id`                     | `kafka.producer.io_wait_time_ns_total`                     | The total time the I/O thread spent waiting.                                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `io-waittime-total`                         | `client-id`                     | `kafka.producer.io_waittime_total`                         | *Deprecated* The total time the I/O thread spent waiting.                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `iotime-total`                              | `client-id`                     | `kafka.producer.iotime_total`                              | *Deprecated* The total time the I/O thread spent doing I/O.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `metadata-age`                              | `client-id`                     | `kafka.producer.metadata_age`                              | The age in seconds of the current producer metadata being used.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `metadata-wait-time-ns-total`               | `client-id`                     | `kafka.producer.metadata_wait_time_ns_total`               | Total time producer has spent waiting on topic metadata in nanoseconds.                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `network-io-rate`                           | `client-id`                     | `kafka.producer.network_io_rate`                           | The number of network operations (reads or writes) on all connections per second.                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `network-io-total`                          | `client-id`                     | `kafka.producer.network_io_total`                          | The total number of network operations (reads or writes) on all connections.                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `produce-throttle-time-avg`                 | `client-id`                     | `kafka.producer.produce_throttle_time_avg`                 | The average time in ms a request was throttled by a broker.                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `produce-throttle-time-max`                 | `client-id`                     | `kafka.producer.produce_throttle_time_max`                 | The maximum time in ms a request was throttled by a broker.                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `reauthentication-latency-avg`              | `client-id`                     | `kafka.producer.reauthentication_latency_avg`              | The average latency observed due to re-authentication.                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `reauthentication-latency-max`              | `client-id`                     | `kafka.producer.reauthentication_latency_max`              | The max latency observed due to re-authentication.                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-queue-time-avg`                     | `client-id`                     | `kafka.producer.record_queue_time_avg`                     | The average time in ms record batches spent in the send buffer.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-queue-time-max`                     | `client-id`                     | `kafka.producer.record_queue_time_max`                     | The maximum time in ms record batches spent in the send buffer.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-size-avg`                           | `client-id`                     | `kafka.producer.record_size_avg`                           | The average record size.                                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-size-max`                           | `client-id`                     | `kafka.producer.record_size_max`                           | The maximum record size.                                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `records-per-request-avg`                   | `client-id`                     | `kafka.producer.records_per_request_avg`                   | The average number of records per request.                                                                                                        | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `requests-in-flight`                        | `client-id`                     | `kafka.producer.requests_in_flight`                        | The current number of in-flight requests awaiting a response.                                                                                     | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `select-rate`                               | `client-id`                     | `kafka.producer.select_rate`                               | The number of times the I/O layer checked for new I/O to perform per second.                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `select-total`                              | `client-id`                     | `kafka.producer.select_total`                              | The total number of times the I/O layer checked for new I/O to perform.                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `successful-authentication-no-reauth-total` | `client-id`                     | `kafka.producer.successful_authentication_no_reauth_total` | The total number of connections with successful authentication where the client does not support re-authentication.                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `successful-authentication-rate`            | `client-id`                     | `kafka.producer.successful_authentication_rate`            | The number of connections with successful authentication per second.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `successful-authentication-total`           | `client-id`                     | `kafka.producer.successful_authentication_total`           | The total number of connections with successful authentication.                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `successful-reauthentication-rate`          | `client-id`                     | `kafka.producer.successful_reauthentication_rate`          | The number of successful re-authentication of connections per second.                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `successful-reauthentication-total`         | `client-id`                     | `kafka.producer.successful_reauthentication_total`         | The total number of successful re-authentication of connections.                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-abort-time-ns-total`                   | `client-id`                     | `kafka.producer.txn_abort_time_ns_total`                   | Total time producer has spent in abortTransaction in nanoseconds.                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-begin-time-ns-total`                   | `client-id`                     | `kafka.producer.txn_begin_time_ns_total`                   | Total time producer has spent in beginTransaction in nanoseconds.                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-commit-time-ns-total`                  | `client-id`                     | `kafka.producer.txn_commit_time_ns_total`                  | Total time producer has spent in commitTransaction in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-init-time-ns-total`                    | `client-id`                     | `kafka.producer.txn_init_time_ns_total`                    | Total time producer has spent in initTransactions in nanoseconds.                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-send-offsets-time-ns-total`            | `client-id`                     | `kafka.producer.txn_send_offsets_time_ns_total`            | Total time producer has spent in sendOffsetsToTransaction in nanoseconds.                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `waiting-threads`                           | `client-id`                     | `kafka.producer.waiting_threads`                           | The number of user threads blocked waiting for buffer memory to enqueue their records.                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `incoming-byte-rate`                        | `client-id`,`node-id`           | `kafka.producer.incoming_byte_rate`                        | The number of bytes read off all sockets per second.                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `incoming-byte-total`                       | `client-id`,`node-id`           | `kafka.producer.incoming_byte_total`                       | The total number of bytes read off all sockets.                                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-node-metrics`          | `outgoing-byte-rate`                        | `client-id`,`node-id`           | `kafka.producer.outgoing_byte_rate`                        | The number of outgoing bytes sent to all servers per second.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `outgoing-byte-total`                       | `client-id`,`node-id`           | `kafka.producer.outgoing_byte_total`                       | The total number of outgoing bytes sent to all servers.                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-node-metrics`          | `request-latency-avg`                       | `client-id`,`node-id`           | `kafka.producer.request_latency_avg`                       | The average request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-latency-max`                       | `client-id`,`node-id`           | `kafka.producer.request_latency_max`                       | The maximum request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-rate`                              | `client-id`,`node-id`           | `kafka.producer.request_rate`                              | The number of requests sent per second.                                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-size-avg`                          | `client-id`,`node-id`           | `kafka.producer.request_size_avg`                          | The average size of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-size-max`                          | `client-id`,`node-id`           | `kafka.producer.request_size_max`                          | The maximum size of any request sent.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-total`                             | `client-id`,`node-id`           | `kafka.producer.request_total`                             | The total number of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-node-metrics`          | `response-rate`                             | `client-id`,`node-id`           | `kafka.producer.response_rate`                             | The number of responses received per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `response-total`                            | `client-id`,`node-id`           | `kafka.producer.response_total`                            | The total number of responses received.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `byte-rate`                                 | `client-id`,`topic`             | `kafka.producer.byte_rate`                                 | The average number of bytes sent per second for a topic.                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `byte-total`                                | `client-id`,`topic`             | `kafka.producer.byte_total`                                | The total number of bytes sent for a topic.                                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `compression-rate`                          | `client-id`,`topic`             | `kafka.producer.compression_rate`                          | The average compression rate of record batches for a topic, defined as the average ratio of the compressed batch size over the uncompressed size. | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-error-rate`                         | `client-id`,`topic`             | `kafka.producer.record_error_rate`                         | The average per-second number of record sends that resulted in errors.                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-error-total`                        | `client-id`,`topic`             | `kafka.producer.record_error_total`                        | The total number of record sends that resulted in errors.                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `record-retry-rate`                         | `client-id`,`topic`             | `kafka.producer.record_retry_rate`                         | The average per-second number of retried record sends.                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-retry-total`                        | `client-id`,`topic`             | `kafka.producer.record_retry_total`                        | The total number of retried record sends.                                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `record-send-rate`                          | `client-id`,`topic`             | `kafka.producer.record_send_rate`                          | The average number of records sent per second.                                                                                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-send-total`                         | `client-id`,`topic`             | `kafka.producer.record_send_total`                         | The total number of records sent.                                                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n",
      "name": "kafka-clients-2.6",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-2.6",
      "target_versions": {
        "library": [
          "org.apache.kafka:kafka-clients:2.6.0"
        ]
      }
    },
    {
      "name": "kafka-streams-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-streams-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-streams-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-streams:[0.11.0.0,)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-1.0",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-1.0",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.0.0,1.3.8)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-flow-1.3",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-flow-1.3"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-flow-1.3",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.3.0,1.3.8)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Ktor version 1.x\n\nThis package contains libraries to help instrument Ktor.\nCurrently, only server instrumentation is supported.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-ktor-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-ktor-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-ktor-1.0:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\nInitialize instrumentation by installing the `KtorServerTelemetry` feature.\nYou must set the `OpenTelemetry` to use with the feature.\n\n```kotlin\nOpenTelemetry openTelemetry = ...\n\nembeddedServer(Netty, 8080) {\n  install(KtorServerTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n",
      "name": "ktor-1.0",
      "scope": {
        "name": "io.opentelemetry.ktor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-1.0",
      "target_versions": {
        "library": [
          "io.ktor:ktor-server-core:[1.0.0,1.+)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Ktor version 2.x\n\nThis package contains libraries to help instrument Ktor.\nServer and client instrumentations are supported.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-ktor-2.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-ktor-2.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-ktor-2.0:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\n## Initializing server instrumentation\n\nInitialize instrumentation by installing the `KtorServerTelemetry` feature.\nYou must set the `OpenTelemetry` to use with the feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nembeddedServer(Netty, 8080) {\n  install(KtorServerTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n\n## Initializing client instrumentation\n\nInitialize instrumentation by installing the `KtorClientTelemetry` feature. You must set the\n`OpenTelemetry` to use with\nthe feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nval client = HttpClient {\n  install(KtorClientTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n",
      "name": "ktor-2.0",
      "scope": {
        "name": "io.opentelemetry.ktor-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-2.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[2.0.0,3.0.0)",
          "io.ktor:ktor-server-core:[2.0.0,3.0.0)"
        ],
        "library": [
          "io.ktor:ktor-client-core:[2.0.0,2.+)",
          "io.ktor:ktor-server-core:[2.0.0,2.+)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Ktor version 3.0 and higher\n\nThis package contains libraries to help instrument Ktor.\nServer and client instrumentations are supported.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-ktor-3.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-ktor-3.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-ktor-3.0:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\n## Initializing server instrumentation\n\nInitialize instrumentation by installing the `KtorServerTelemetry` feature. Make sure that no other\nlogging plugin is installed before this.\nYou must set the `OpenTelemetry` to use with the feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nembeddedServer(Netty, 8080) {\n  install(KtorServerTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n\n## Initializing client instrumentation\n\nInitialize instrumentation by installing the `KtorClientTelemetry` feature. You must set the\n`OpenTelemetry` to use with\nthe feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nval client = HttpClient {\n  install(KtorClientTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n",
      "name": "ktor-3.0",
      "scope": {
        "name": "io.opentelemetry.ktor-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-3.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[3.0.0,)",
          "io.ktor:ktor-server-core:[3.0.0,)"
        ],
        "library": [
          "io.ktor:ktor-client-core:3.0.0",
          "io.ktor:ktor-server-core:3.0.0"
        ]
      }
    },
    {
      "name": "kubernetes-client-7.0",
      "scope": {
        "name": "io.opentelemetry.kubernetes-client-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kubernetes-client-7.0",
      "target_versions": {
        "javaagent": [
          "io.kubernetes:client-java-api:[7.0.0,)"
        ]
      }
    },
    {
      "name": "lettuce-4.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-4.0",
      "target_versions": {
        "javaagent": [
          "biz.paluch.redis:lettuce:[4.0.Final,)"
        ]
      }
    },
    {
      "name": "lettuce-5.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.0",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.0.0.RELEASE,5.1.0.RELEASE)"
        ]
      }
    },
    {
      "name": "lettuce-5.1",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.1"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.1",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.1.0.RELEASE,)"
        ],
        "library": [
          "io.lettuce:lettuce-core:5.1.0.RELEASE"
        ]
      }
    },
    {
      "name": "liberty-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-20.0"
    },
    {
      "name": "liberty-dispatcher-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-dispatcher-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-dispatcher-20.0"
    },
    {
      "name": "log4j-appender-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "markdown_content": "# Appender Instrumentation for Log4j2 version 2.17 and higher\n\nThis module provides a Log4j2 [appender](https://logging.apache.org/log4j/2.x/manual/appenders.html)\nwhich forwards Log4j2 log events to the\n[OpenTelemetry Log SDK](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk/logs).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-log4j-appender-2.17).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-log4j-appender-2.17</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-log4j-appender-2.17:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe following demonstrates how you might configure the appender in your `log4j2.xml` configuration:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n  <Appenders>\n    <Console name=\"Console\" target=\"SYSTEM_OUT\">\n      <PatternLayout\n          pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} trace_id: %X{trace_id} span_id: %X{span_id} trace_flags: %X{trace_flags} - %msg%n\"/>\n    </Console>\n    <OpenTelemetry name=\"OpenTelemetryAppender\"/>\n  </Appenders>\n  <Loggers>\n    <Root level=\"All\">\n      <AppenderRef ref=\"OpenTelemetryAppender\"/>\n      <AppenderRef ref=\"Console\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n```\n\nIn this example Log4j2 log events will be sent to both the console appender and\nthe `OpenTelemetryAppender`.\n\nIn order to function, `OpenTelemetryAppender` needs access to an `OpenTelemetry` instance. This must\nbe set programmatically during application startup as follows:\n\n```java\nimport io.opentelemetry.instrumentation.log4j.appender.v2_17.OpenTelemetryAppender;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\n\npublic class Application {\n\n  public static void main(String[] args) {\n    OpenTelemetrySdk openTelemetrySdk = // Configure OpenTelemetrySdk\n\n    // Find OpenTelemetryAppender in log4j configuration and install openTelemetrySdk\n    OpenTelemetryAppender.install(openTelemetrySdk);\n\n    // ... proceed with application\n  }\n}\n```\n\n#### Settings for the Log4j Appender\n\nSetting can be configured as XML attributes, for example:\n\n```xml\n<Appenders>\n  <OpenTelemetry name=\"OpenTelemetryAppender\"\n      captureMapMessageAttributes=\"true\"\n      captureMarkerAttribute=\"true\"\n      captureContextDataAttributes=\"*\"\n  />\n</Appenders>\n```\n\nThe available settings are:\n\n| XML Attribute                      | Type    | Default | Description                                                                                                                                                                                                |\n|------------------------------------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `captureExperimentalAttributes`    | Boolean | `false` | Enable the capture of experimental log attributes `thread.name` and `thread.id`.                                                                                                                           |\n| `captureCodeAttributes`            | Boolean | `false` | Enable the capture of [source code attributes]. Note that capturing source code attributes at logging sites might add a performance overhead.                                                              |\n| `captureMapMessageAttributes`      | Boolean | `false` | Enable the capture of `MapMessage` attributes.                                                                                                                                                             |\n| `captureMarkerAttribute`           | Boolean | `false` | Enable the capture of Log4j markers as attributes.                                                                                                                                                         |\n| `captureContextDataAttributes`     | String  |         | Comma separated list of context data attributes to capture. Use the wildcard character `*` to capture all attributes.                                                                                      |\n| `numLogsCapturedBeforeOtelInstall` | Integer | 1000    | Log telemetry is emitted after the initialization of the OpenTelemetry Log4j appender with an OpenTelemetry object. This setting allows you to modify the size of the cache used to replay the first logs. |\n\n[source code attributes]: https://github.com/open-telemetry/semantic-conventions/blob/main/docs/general/attributes.md#source-code-attributes\n",
      "name": "log4j-appender-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.0,)"
        ],
        "library": [
          "org.apache.logging.log4j:log4j-core:2.17.0"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.17.0,)"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.7",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.7,2.17.0)"
        ]
      }
    },
    {
      "name": "log4j-mdc-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-mdc-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-mdc-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "markdown_content": "# Appender Instrumentation for Logback version 1.0 and higher\n\nThis module provides a Logback [appender](https://logback.qos.ch/manual/appenders.html) which\nforwards Logback log events to the\n[OpenTelemetry Log SDK](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk/logs).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-logback-appender-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-logback-appender-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe following demonstrates how you might configure the appender in your `logback.xml` configuration:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\n  <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>\n        %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n      </pattern>\n    </encoder>\n  </appender>\n  <appender name=\"OpenTelemetry\"\n            class=\"io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender\">\n  </appender>\n\n  <root level=\"INFO\">\n    <appender-ref ref=\"console\"/>\n    <appender-ref ref=\"OpenTelemetry\"/>\n  </root>\n\n</configuration>\n```\n\nIn this example Logback log events will be sent to both the console appender and\nthe `OpenTelemetryAppender`.\n\nIn order to function, `OpenTelemetryAppender` needs access to an `OpenTelemetry` instance. This must\nbe set programmatically during application startup as follows:\n\n```java\nimport io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\n\npublic class Application {\n\n  public static void main(String[] args) {\n    OpenTelemetrySdk openTelemetrySdk = // Configure OpenTelemetrySdk\n\n    // Find OpenTelemetryAppender in logback configuration and install openTelemetrySdk\n    OpenTelemetryAppender.install(openTelemetrySdk);\n\n    // ... proceed with application\n  }\n}\n```\n\n#### Settings for the Logback Appender\n\nSettings can be configured in `logback.xml`, for example:\n\n```xml\n<appender name=\"OpenTelemetry\" class=\"io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender\">\n  <captureExperimentalAttributes>true</captureExperimentalAttributes>\n  <captureMdcAttributes>*</captureMdcAttributes>\n</appender>\n```\n\nThe available settings are:\n\n| XML Element                        | Type    | Default | Description                                                                                                                                                                                                                                       |\n|------------------------------------|---------|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `captureExperimentalAttributes`    | Boolean | `false` | Enable the capture of experimental log attributes `thread.name` and `thread.id`.                                                                                                                                                                  |\n| `captureCodeAttributes`            | Boolean | `false` | Enable the capture of [source code attributes]. Note that capturing source code attributes at logging sites might add a performance overhead.                                                                                                     |\n| `captureMarkerAttribute`           | Boolean | `false` | Enable the capture of Logback markers as attributes.                                                                                                                                                                                              |\n| `captureKeyValuePairAttributes`    | Boolean | `false` | Enable the capture of Logback key value pairs as attributes.                                                                                                                                                                                      |\n| `captureLoggerContext`             | Boolean | `false` | Enable the capture of Logback logger context properties as attributes.                                                                                                                                                                            |\n| `captureArguments`                 | Boolean | `false` | Enable the capture of Logback logger arguments.                                                                                                                                                                                                   |\n| `captureLogstashAttributes`        | Boolean | `false` | Enable the capture of Logstash attributes, supported are those added to logs via `Markers.append()`, `Markers.appendEntries()`, `Markers.appendArray()` and `Markers.appendRaw()` methods.                                                        |\n| `captureMdcAttributes`             | String  |         | Comma separated list of MDC attributes to capture. Use the wildcard character `*` to capture all attributes.                                                                                                                                      |\n| `numLogsCapturedBeforeOtelInstall` | Integer | 1000    | Log telemetry is emitted after the initialization of the OpenTelemetry Logback appender with an OpenTelemetry object. This setting allows you to modify the size of the cache used to replay the first logs. thread.id attribute is not captured. |\n\n\n[source code attributes]: https://github.com/open-telemetry/semantic-conventions/blob/main/docs/general/attributes.md#source-code-attributes\n",
      "name": "logback-appender-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-appender-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-appender-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[0.9.16,)"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.3.0",
          "net.logstash.logback:logstash-logback-encoder:3.0",
          "org.slf4j:slf4j-api:2.0.0"
        ]
      }
    },
    {
      "markdown_content": "# MDC Instrumentation for Logback version 1.0 and higher\n\nThis module integrates instrumentation with Logback by injecting the trace ID and span ID from a\nmounted span using a custom Logback appender.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-logback-mdc-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-logback-mdc-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\ndependencies {\n  runtimeOnly(\"io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0:OPENTELEMETRY_VERSION\")\n}\n```\n\n### Usage\n\nThe following demonstrates how you might configure the appender in your `logback.xml` configuration:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>%d{HH:mm:ss.SSS} trace_id=%X{trace_id} span_id=%X{span_id} trace_flags=%X{trace_flags} %msg%n</pattern>\n    </encoder>\n  </appender>\n\n  <!-- Just wrap your logging appender, for example ConsoleAppender, with OpenTelemetryAppender -->\n  <appender name=\"OTEL\" class=\"io.opentelemetry.instrumentation.logback.mdc.v1_0.OpenTelemetryAppender\">\n    <appender-ref ref=\"CONSOLE\"/>\n  </appender>\n\n  <!-- Use the wrapped \"OTEL\" appender instead of the original \"CONSOLE\" one -->\n  <root level=\"INFO\">\n    <appender-ref ref=\"OTEL\"/>\n  </root>\n\n</configuration>\n```\n\n> It's important to note you can also use other encoders in the `ConsoleAppender` like [logstash-logback-encoder](https://github.com/logfellow/logstash-logback-encoder).\n> This can be helpful when the `Span` is invalid and the `trace_id`, `span_id`, and `trace_flags` are all `null` and are hidden entirely from the logs.\n\nLogging events will automatically have context information from the span context injected. The\nfollowing attributes are available for use:\n\n- `trace_id`\n- `span_id`\n- `trace_flags`\n\nThese keys can be customized in your `logback.xml` configuration, for example:\n\n```xml\n<appender name=\"OTEL\" class=\"io.opentelemetry.instrumentation.logback.mdc.v1_0.OpenTelemetryAppender\">\n  <traceIdKey>example_trace_id</traceIdKey>\n  <spanIdKey>example_span_id</spanIdKey>\n  <traceFlagsKey>example_trace_flags</traceFlagsKey>\n</appender>\n```\n\nIf you set `<addBaggage>true</addBaggage>` in your `logback.xml` configuration,\nkey/value pairs in [baggage](https://opentelemetry.io/docs/concepts/signals/baggage/) will also be added to the MDC.\n\n- `baggage.<entry_name>`\n",
      "name": "logback-mdc-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-mdc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-mdc-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[1.0.0,1.2.3]"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.0.0",
          "org.slf4j:slf4j-api:1.6.4"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "markdown_content": "# Micrometer Instrumentation for Micrometer version 1.5 and higher\n\nThis module provides a [Micrometer registry](https://docs.micrometer.io/micrometer/reference/concepts/registry.html) which\nsends Micrometer metrics to the\n[OpenTelemetry Metrics SDK](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk/metrics).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-micrometer-1.5).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-micrometer-1.5</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-micrometer-1.5:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides an implementation of `MeterRegistry` to bridge Micrometer API to OpenTelemetry Metrics.\n\n```java\nMeterRegistry meterRegistry = OpenTelemetryMeterRegistry.builder(openTelemetry).build();\n```\n",
      "name": "micrometer-1.5",
      "scope": {
        "name": "io.opentelemetry.micrometer-1.5"
      },
      "semconv": [],
      "source_path": "instrumentation/micrometer/micrometer-1.5",
      "target_versions": {
        "javaagent": [
          "io.micrometer:micrometer-core:[1.5.0,)"
        ],
        "library": [
          "io.micrometer:micrometer-core:1.5.0"
        ]
      }
    },
    {
      "markdown_content": "# MongoDB library instrumentation\n\nThis package contains the library to help instrument MongoDB Client.\n\n## Quickstart\n\n### Dependencies\n\nReplace OPENTELEMETRY_VERSION with the [latest release](https://central.sonatype.com/search?q=g%3Aio.opentelemetry.instrumentation+a%3Aopentelemetry-mongo-3.1).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-mongo-3.1</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```gradle\nimplementation(\"io.opentelemetry.instrumentation:instrumentation:opentelemetry-mongo-3.1:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\nThe instrumentation is initialized by passing a `MongoTelemetry::newCommandListener()` to the `MongoClientSettings` builder. You must set the `OpenTelemetry` to use with the feature.\n\n```java\nOpenTelemetry openTelemetry = ...;\n\nMongoTelemetry mongoTelemetry = MongoTelemetry.builder(openTelemetry).build();\n\nMongoClientSettings settings = MongoClientSettings.builder()\n    .applyConnectionString(ConnectionString(\"mongodb://localhost:27017\"))\n    .addCommandListener(mongoTelemetry.newCommandListener())\n    .build();\n\n// With Reactive Streams\nMongoClient client = MongoClients.create(settings);\n```\n",
      "name": "mongo-3.1",
      "scope": {
        "name": "io.opentelemetry.mongo-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.1",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.1,)"
        ],
        "library": [
          "org.mongodb:mongo-java-driver:3.1.0"
        ]
      }
    },
    {
      "name": "mongo-3.7",
      "scope": {
        "name": "io.opentelemetry.mongo-3.7"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.7",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.7, 4.0)",
          "org.mongodb:mongodb-driver-core:[3.7, 4.0)"
        ]
      }
    },
    {
      "name": "mongo-4.0",
      "scope": {
        "name": "io.opentelemetry.mongo-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-4.0",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-core:[4.0,)"
        ]
      }
    },
    {
      "name": "mongo-async-3.3",
      "scope": {
        "name": "io.opentelemetry.mongo-async-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-async-3.3",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-async:[3.3,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "mybatis-3.2",
      "scope": {
        "name": "io.opentelemetry.mybatis-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/mybatis-3.2",
      "target_versions": {
        "javaagent": [
          "org.mybatis:mybatis:[3.2.0,)"
        ]
      }
    },
    {
      "name": "netty-3.8",
      "scope": {
        "name": "io.opentelemetry.netty-3.8"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-3.8",
      "target_versions": {
        "javaagent": [
          "io.netty:netty:[3.8.0.Final,4)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.0",
      "scope": {
        "name": "io.opentelemetry.netty-4.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.0",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.0.0.Final,4.1.0.Final)",
          "io.netty:netty-codec-http:[4.0.0.Final,4.1.0.Final)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.1",
      "scope": {
        "name": "io.opentelemetry.netty-4.1"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.1",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.1.0.Final,5.0.0)",
          "io.netty:netty-codec-http:[4.1.0.Final,5.0.0)"
        ],
        "library": [
          "io.netty:netty-codec-http:4.1.0.Final"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "okhttp-2.2",
      "scope": {
        "name": "io.opentelemetry.okhttp-2.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-2.2",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp:okhttp:[2.2,3)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "markdown_content": "# Library Instrumentation for OkHttp version 3.0 and higher\n\nProvides OpenTelemetry instrumentation for [okhttp3](https://square.github.io/okhttp/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-okhttp-3.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-okhttp-3.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-okhttp-3.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides an OkHttp `Call.Factory` implementation that wraps\nan instance of the `OkHttpClient` to provide OpenTelemetry-based spans and context\npropagation.\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.okhttp.v3_0.OkHttpTelemetry;\nimport okhttp3.Call;\nimport okhttp3.OkHttpClient;\n\nimport java.util.concurrent.ExecutorService;\n\npublic class OkHttpConfiguration {\n\n  //Use this Call.Factory implementation for making standard http client calls.\n  public Call.Factory createTracedClient(OpenTelemetry openTelemetry) {\n    return OkHttpTelemetry.builder(openTelemetry).build().newCallFactory(createClient());\n  }\n\n  //your configuration of the OkHttpClient goes here:\n  private OkHttpClient createClient() {\n    return new OkHttpClient.Builder().build();\n  }\n}\n```\n",
      "name": "okhttp-3.0",
      "scope": {
        "name": "io.opentelemetry.okhttp-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-3.0",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp3:okhttp:[3.0,)"
        ],
        "library": [
          "com.squareup.okhttp3:okhttp:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables including the full content of user and assistant messages in emitted log events. Note that full content can have data privacy and size concerns, and care should be taken when enabling this.\n",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables Gen AI client spans and metrics for OpenAI Java SDK 1.1+.",
      "name": "openai-java-1.1",
      "scope": {
        "name": "io.opentelemetry.openai-java-1.1"
      },
      "semconv": [
        "Gen Ai"
      ],
      "source_path": "instrumentation/openai/openai-java-1.1",
      "target_versions": {
        "javaagent": [
          "com.openai:openai-java:[1.1.0,3)"
        ],
        "library": [
          "com.openai:openai-java:[1.1.0,2.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                }
              ],
              "description": "GenAI operation duration.",
              "name": "gen_ai.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.token.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Measures number of input and output tokens used.",
              "name": "gen_ai.client.token.usage",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "token"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.frequency_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.max_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.presence_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.seed",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.stop_sequences",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.temperature",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.top_p",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.response.finish_reasons",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.response.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.usage.output_tokens",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-1.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-1.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[1.0,3.0)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-3.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-3.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[3.0,)"
        ]
      }
    },
    {
      "description": "The Oracle Universal Connection Pool (UCP) instrumentation generates connection pool metrics.",
      "markdown_content": "# Library Instrumentation for Oracle UCP version 11.2 and higher\n\nProvides OpenTelemetry instrumentation for [Oracle UCP](https://docs.oracle.com/database/121/JJUCP/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-oracle-ucp-11.2).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-oracle-ucp-11.2</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-oracle-ucp-11.2:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `UniversalConnectionPool` instances for collecting\nOpenTelemetry-based metrics.\n\n```java\nOracleUcpTelemetry oracleUcpTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, UniversalConnectionPool universalConnectionPool) {\n  oracleUcpTelemetry = OracleUcpTelemetry.create(openTelemetry);\n  oracleUcpTelemetry.registerMetrics(universalConnectionPool);\n}\n\nvoid destroy(UniversalConnectionPool universalConnectionPool) {\n  oracleUcpTelemetry.unregisterMetrics(universalConnectionPool);\n}\n```\n",
      "name": "oracle-ucp-11.2",
      "scope": {
        "name": "io.opentelemetry.oracle-ucp-11.2"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/oracle-ucp-11.2",
      "target_versions": {
        "javaagent": [
          "com.oracle.database.jdbc:ucp:[,)"
        ],
        "library": [
          "com.oracle.database.jdbc:ojdbc8:12.2.0.1",
          "com.oracle.database.jdbc:ucp:11.2.0.4"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the OSHI process runtime metrics.",
          "name": "otel.instrumentation.oshi.experimental-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "When the OSHI library is detected on the classpath, this instrumentation will use the system class loader to load classes from the oshi-core jar that are then used to generate system metrics.",
      "name": "oshi",
      "scope": {
        "name": "io.opentelemetry.oshi"
      },
      "semconv": [
        "System"
      ],
      "source_path": "instrumentation/oshi",
      "target_versions": {
        "javaagent": [
          "com.github.oshi:oshi-core:[5.3.1,)"
        ],
        "library": [
          "com.github.oshi:oshi-core:5.3.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java CPU time",
              "name": "runtime.java.cpu_time",
              "type": "LONG_GAUGE",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java memory",
              "name": "runtime.java.memory",
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "otel.instrumentation.oshi.experimental-metrics.enabled=true"
        }
      ]
    },
    {
      "name": "payara",
      "scope": {
        "name": "io.opentelemetry.payara"
      },
      "semconv": [],
      "source_path": "instrumentation/payara"
    },
    {
      "name": "pekko-actor-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-actor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/pekko/pekko-actor-1.0",
      "target_versions": {
        "javaagent": [
          "org.apache.pekko:pekko-actor_2.12:[1.0,)",
          "org.apache.pekko:pekko-actor_2.13:[1.0,)",
          "org.apache.pekko:pekko-actor_3:[1.0,)"
        ]
      }
    },
    {
      "name": "pekko-http-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-http-1.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/pekko/pekko-http-1.0",
      "target_versions": {
        "javaagent": [
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.12:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.13:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_3:[1.7,)",
          "org.apache.pekko:pekko-http_2.12:[1.0,)",
          "org.apache.pekko:pekko-http_2.13:[1.0,)",
          "org.apache.pekko:pekko-http_3:[1.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-mvc-2.4",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.4",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_2.11:[2.4.0,2.6)"
        ]
      }
    },
    {
      "name": "play-mvc-2.6",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.6",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_$scalaVersion:[2.6.0,)",
          "com.typesafe.play:play_2.12:[2.6.0,)",
          "com.typesafe.play:play_2.13:[2.6.0,)"
        ]
      }
    },
    {
      "name": "play-ws-1.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-1.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[1.0.0,2.0.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[1.0.0,2.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[2.0.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.0.0,2.1.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.0.6,2.1.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.1",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.1",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.1.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.1.0,]"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "powerjob-4.0",
      "scope": {
        "name": "io.opentelemetry.powerjob-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/powerjob-4.0",
      "target_versions": {
        "javaagent": [
          "tech.powerjob:powerjob-worker:[4.0.0,)"
        ]
      }
    },
    {
      "name": "pulsar-2.8",
      "scope": {
        "name": "io.opentelemetry.pulsar-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/pulsar/pulsar-2.8",
      "target_versions": {
        "javaagent": [
          "org.apache.pulsar:pulsar-client:[2.8.0,)"
        ]
      }
    },
    {
      "name": "quarkus-resteasy-reactive",
      "scope": {
        "name": "io.opentelemetry.quarkus-resteasy-reactive"
      },
      "semconv": [],
      "source_path": "instrumentation/quarkus-resteasy-reactive",
      "target_versions": {
        "javaagent": [
          "io.quarkus:quarkus-resteasy-reactive:(,3.9.0)"
        ]
      }
    },
    {
      "name": "quartz-2.0",
      "scope": {
        "name": "io.opentelemetry.quartz-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/quartz-2.0",
      "target_versions": {
        "javaagent": [
          "org.quartz-scheduler:quartz:[2.0.0,)"
        ],
        "library": [
          "org.quartz-scheduler:quartz:2.0.0"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for R2dbc version 1.0 and higher\n\nProvides OpenTelemetry instrumentation for [R2dbc](https://r2dbc.io/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-r2dbc-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-r2dbc-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-r2dbc-1.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a R2dbc `ProxyConnectionFactory` that gets wrapped around the original\n`ConnectionFactory`.\n\n```java\nConnectionFactory wrapWithProxyFactory(OpenTelemetry openTelemetry, ConnectionFactory originalFactory, ConnectionFactoryOptions factoryOptions) {\n  return R2dbcTelemetryBuilder\n    .create(openTelemetry)\n    .wrapConnectionFactory(originalFactory, factoryOptions);\n}\n```\n\nIf you use R2dbc in a Spring Boot application you can wrap the `ConnectionFactory` using a custom `BeanPostProcessor` implementation:\n\n```java\n@Configuration\nclass R2dbcConfiguration {\n\n  @Bean\n  public R2dbcInstrumentingPostProcessor r2dbcInstrumentingPostProcessor(\n      OpenTelemetry openTelemetry) {\n    return new R2dbcInstrumentingPostProcessor(openTelemetry);\n  }\n}\n\nclass R2dbcInstrumentingPostProcessor implements BeanPostProcessor {\n\n  private final OpenTelemetry openTelemetry;\n\n  R2dbcInstrumentingPostProcessor(OpenTelemetry openTelemetry) {\n    this.openTelemetry = openTelemetry;\n  }\n\n  @Override\n  public Object postProcessAfterInitialization(Object bean, String beanName) {\n    if (!(bean instanceof ConnectionFactory)) {\n      return bean;\n    }\n    ConnectionFactory connectionFactory = (ConnectionFactory) bean;\n    return R2dbcTelemetry.create(openTelemetry)\n        .wrapConnectionFactory(connectionFactory, getConnectionFactoryOptions(connectionFactory));\n  }\n\n  private static ConnectionFactoryOptions getConnectionFactoryOptions(ConnectionFactory connectionFactory) {\n    OptionsCapableConnectionFactory optionsCapableConnectionFactory =\n        OptionsCapableConnectionFactory.unwrapFrom(connectionFactory);\n    if (optionsCapableConnectionFactory != null) {\n      return optionsCapableConnectionFactory.getOptions();\n    } else {\n      // in practice should never happen\n      // fall back to empty options; or reconstruct them from the R2dbcProperties\n      return ConnectionFactoryOptions.builder().build();\n    }\n  }\n}\n```\n",
      "name": "r2dbc-1.0",
      "scope": {
        "name": "io.opentelemetry.r2dbc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/r2dbc-1.0",
      "target_versions": {
        "javaagent": [
          "io.r2dbc:r2dbc-spi:[1.0.0.RELEASE,)"
        ],
        "library": [
          "io.r2dbc:r2dbc-spi:1.0.0.RELEASE"
        ]
      }
    },
    {
      "name": "rabbitmq-2.7",
      "scope": {
        "name": "io.opentelemetry.rabbitmq-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/rabbitmq-2.7",
      "target_versions": {
        "javaagent": [
          "com.rabbitmq:amqp-client:[2.7.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.4",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.4",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.4.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.7",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.7"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.7",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.7.0,)"
        ],
        "library": [
          "io.ratpack:ratpack-core:1.7.0"
        ]
      }
    },
    {
      "name": "reactor-3.1",
      "scope": {
        "name": "io.opentelemetry.reactor-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.1",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.1.0.RELEASE,)"
        ]
      }
    },
    {
      "name": "reactor-3.4",
      "scope": {
        "name": "io.opentelemetry.reactor-3.4"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.4",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.4.0,)"
        ]
      }
    },
    {
      "name": "reactor-kafka-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-kafka-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-kafka-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.kafka:reactor-kafka:[1.0.0,)"
        ]
      }
    },
    {
      "name": "reactor-netty-0.9",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-0.9"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-0.9",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty:[0.8.2.RELEASE,1.0.0)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans.",
          "name": "otel.instrumentation.reactor-netty.connection-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "reactor-netty-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty-http:[1.0.0,)",
          "io.projectreactor.netty:reactor-netty:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "rediscala-1.8",
      "scope": {
        "name": "io.opentelemetry.rediscala-1.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rediscala-1.8",
      "target_versions": {
        "javaagent": [
          "com.github.Ma27:rediscala_2.11:[1.8.1,)",
          "com.github.Ma27:rediscala_2.12:[1.8.1,)",
          "com.github.Ma27:rediscala_2.13:[1.9.0,)",
          "com.github.etaty:rediscala_2.11:[1.5.0,)",
          "com.github.etaty:rediscala_2.12:[1.8.0,)",
          "com.github.etaty:rediscala_2.13:[1.9.0,)",
          "io.github.rediscala:rediscala_2.13:[1.10.0,)"
        ]
      }
    },
    {
      "name": "redisson-3.0",
      "scope": {
        "name": "io.opentelemetry.redisson-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.0",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.0.0,3.17.0)"
        ]
      }
    },
    {
      "name": "redisson-3.17",
      "scope": {
        "name": "io.opentelemetry.redisson-3.17"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.17",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.17.0,)"
        ]
      }
    },
    {
      "markdown_content": "# OpenTelemetry Resource Providers\n\nThis package includes some standard `ResourceProvider`s for filling in attributes related to\ncommon environments. Currently, the resources provide the following semantic conventions:\n\n## Populated attributes\n\n### Container\n\nProvider: `io.opentelemetry.instrumentation.resources.ContainerResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/container.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `container.id`\n\n### Host\n\nProvider: `io.opentelemetry.instrumentation.resources.HostResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/host.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `host.name`\n- `host.arch`\n\nProvider: `io.opentelemetry.instrumentation.resources.HostIdResourceProvider`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/host.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `host.id`\n\n### Operating System\n\nProvider: `io.opentelemetry.instrumentation.resources.OsResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/os.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `os.type`\n- `os.description`\n\n### Process\n\nImplementation: `io.opentelemetry.instrumentation.resources.ProcessResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/process.md#process>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `process.pid`\n- `process.executable.path` (note, we assume the `java` binary is located in the `bin` subfolder of `JAVA_HOME`)\n- `process.command_line` (note this includes all system properties and arguments when running)\n\n### Java Runtime\n\nImplementation: `io.opentelemetry.instrumentation.resources.ProcessRuntimeResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/process.md#process-runtimes>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `process.runtime.name`\n- `process.runtime.version`\n- `process.runtime.description`\n\n## Platforms\n\nThis package currently does not run on Android. It has been verified on OpenJDK and should work on\nother server JVM distributions but if you find any issues please let us know.\n\n[declarative config]: https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/configuration#declarative-configuration\n",
      "name": "resources",
      "scope": {
        "name": "io.opentelemetry.resources"
      },
      "semconv": [],
      "source_path": "instrumentation/resources"
    },
    {
      "name": "restlet-1.1",
      "scope": {
        "name": "io.opentelemetry.restlet-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-1.1",
      "target_versions": {
        "javaagent": [
          "org.restlet:org.restlet:[1.1.0, 1.2-M1)"
        ],
        "library": [
          "com.noelios.restlet:com.noelios.restlet:1.1.5",
          "org.restlet:org.restlet:[1.1.5,1.+)"
        ]
      }
    },
    {
      "name": "restlet-2.0",
      "scope": {
        "name": "io.opentelemetry.restlet-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-2.0",
      "target_versions": {
        "javaagent": [
          "org.restlet.jse:org.restlet:[2.0.0,)"
        ],
        "library": [
          "org.restlet.jse:org.restlet:2.0.2"
        ]
      }
    },
    {
      "name": "rmi",
      "scope": {
        "name": "io.opentelemetry.rmi"
      },
      "semconv": [],
      "source_path": "instrumentation/rmi",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Apache RocketMQ remoting-based client 4.0.0+\n\nProvides OpenTelemetry instrumentation for [Apache RocketMQ](https://rocketmq.apache.org/) remoting-based client.\n\n## Quickstart\n\n### Add the following dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-rocketmq-client-4.8).\n\nFor Maven, add the following to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-rocketmq-client-4.8</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add the following to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-rocketmq-client-4.8:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides the implementation of `SendMessageHook` and `ConsumeMessageHook` to provide OpenTelemetry-based spans and context propagation.\n\n```java\nRocketMqTelemetry rocketMqTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, DefaultMQProducerImpl producer, DefaultMQPushConsumerImpl pushConsumer) {\n  rocketMqTelemetry = RocketMqTelemetry.create(openTelemetry);\n  // For producer.\n  producer.registerSendMessageHook(rocketMqTelemetry.newTracingSendMessageHook());\n  // For push consumer.\n  pushConsumer.registerConsumeMessageHook(rocketMqTelemetry.newTracingConsumeMessageHook());\n}\n```\n",
      "name": "rocketmq-client-4.8",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-4.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-4.8",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client:[4.0.0,)"
        ],
        "library": [
          "org.apache.rocketmq:rocketmq-client:4.8.0"
        ]
      }
    },
    {
      "name": "rocketmq-client-5.0",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client-java:[5.0.0,)"
        ]
      }
    },
    {
      "markdown_content": "The main entry point is the `RuntimeMetrics` class in the package `io.opentelemetry.instrumentation.runtimemetrics.java17`:\n\n```java\n// Initialize JfrTelemetry\nRuntimeMetrics runtimeMetrics = RuntimeMetrics.create(openTelemetry);\n\n// Close JfrTelemetry to stop listening for JFR events\nruntimeMetrics.close();\n```\n\n`RuntimeMetrics` uses two underlying implementations to gather the full set of metric data, JFR and JMX.\nThe metrics gathered by the two implementations are mutually exclusive and the union of them produces\nthe full set of available metrics.\nThe JMX component is reused from the `io.opentelemetry.instrumentation.runtimemetrics.java8` package.\nThe JFR component uses JFR streaming and is only available in JAVA 17.\nIt works by subscribing to certain JFR events, and using relevant bits of information\nfrom the events to produce telemetry data like metrics. The code is divided into \"handlers\", which\nlisten for specific events and produce relevant telemetry. The handlers are organized into\nfeatures (i.e `JfrFeature`), which represent a category of telemetry and can be toggled on and\noff. `RuntimeMetrics` evaluates which features are enabled, and only listens for the events required\nby the handlers associated with those features.\n\nEnable or disable a feature as follows:\n\n```\nRuntimeMetrics runtimeMetrics = RuntimeMetrics.builder(openTelemetry)\n  .enableFeature(JfrFeature.BUFFER_METRICS)\n  .disableFeature(JfrFeature.LOCK_METRICS)\n  .build();\n```\n\nThe following table describes the set of `JfrFeatures` available, whether each is enabled by\ndefault, and the telemetry each produces:\n\n<!-- DO NOT MANUALLY EDIT. Regenerate table following changes to instrumentation using ./gradlew generateDocs -->\n<!-- generateDocsStart -->\n\n| JfrFeature                | Default Enabled | Metrics                                                                                                           |\n|---------------------------|-----------------|-------------------------------------------------------------------------------------------------------------------|\n| BUFFER_METRICS            | `false`         | `jvm.buffer.count`, `jvm.buffer.memory.limit`, `jvm.buffer.memory.used`                                           |\n| CLASS_LOAD_METRICS        | `false`         | `jvm.class.count`, `jvm.class.loaded`, `jvm.class.unloaded`                                                       |\n| CONTEXT_SWITCH_METRICS    | `true`          | `jvm.cpu.context_switch`                                                                                          |\n| CPU_COUNT_METRICS         | `true`          | `jvm.cpu.limit`                                                                                                   |\n| CPU_UTILIZATION_METRICS   | `false`         | `jvm.cpu.recent_utilization`, `jvm.system.cpu.utilization`                                                        |\n| GC_DURATION_METRICS       | `false`         | `jvm.gc.duration`                                                                                                 |\n| LOCK_METRICS              | `true`          | `jvm.cpu.longlock`                                                                                                |\n| MEMORY_ALLOCATION_METRICS | `true`          | `jvm.memory.allocation`                                                                                           |\n| MEMORY_POOL_METRICS       | `false`         | `jvm.memory.committed`, `jvm.memory.init`, `jvm.memory.limit`, `jvm.memory.used`, `jvm.memory.used_after_last_gc` |\n| NETWORK_IO_METRICS        | `true`          | `jvm.network.io`, `jvm.network.time`                                                                              |\n| THREAD_METRICS            | `false`         | `jvm.thread.count`                                                                                                |\n",
      "minimum_java_version": 17,
      "name": "runtime-telemetry-java17",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java17"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java17"
    },
    {
      "markdown_content": "# JVM Runtime Metrics\n\nThis module provides JVM runtime metrics as documented in the [semantic conventions](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/runtime/jvm-metrics.md).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-runtime-telemetry-java8).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-runtime-telemetry-java8</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nruntimeOnly(\"io.opentelemetry.instrumentation:opentelemetry-runtime-telemetry-java8:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nRegister observers for the desired runtime metrics:\n\n```java\nOpenTelemetry openTelemetry = // OpenTelemetry instance configured elsewhere\n\nClasses.registerObservers(openTelemetry);\nCpu.registerObservers(openTelemetry);\nMemoryPools.registerObservers(openTelemetry);\nThreads.registerObservers(openTelemetry);\nGarbageCollector.registerObservers(openTelemetry);\n```\n\n## Garbage Collector Dependent Metrics\n\nThe attributes reported on the memory metrics (`jvm.memory.*`) and gc metrics (`jvm.gc.*`) are dependent on the garbage collector used by the application, since each garbage collector organizes memory pools differently and has different strategies for reclaiming memory during garbage collection.\n\nThe following lists attributes reported for a variety of garbage collectors. Notice that attributes are not necessarily constant across `*.used`, `*.committed`, and `*.limit` since not all memory pools report a limit.\n\n- CMS Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Code Cache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Code Cache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Code Cache,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of minor GC,jvm.gc.name=ParNew}, {jvm.gc.action=end of major GC,jvm.gc.name=MarkSweepCompact}\n- G1 Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=G1 Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=G1 Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=G1 Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of minor GC,jvm.gc.name=G1 Young Generation}, {jvm.gc.action=end of major GC,jvm.gc.name=G1 Old Generation}\n- Parallel Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of major GC,jvm.gc.name=PS MarkSweep}, {jvm.gc.action=end of minor GC,jvm.gc.name=PS Scavenge}\n- Serial Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of minor GC,jvm.gc.name=Copy}, {jvm.gc.action=end of major GC,jvm.gc.name=MarkSweepCompact}\n- Shenandoah Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of GC cycle,jvm.gc.name=Shenandoah Cycles}, {jvm.gc.action=end of GC pause,jvm.gc.name=Shenandoah Pauses}\n- Z Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of GC cycle,jvm.gc.name=ZGC Cycles}, {jvm.gc.action=end of GC pause,jvm.gc.name=ZGC Pauses}\n",
      "name": "runtime-telemetry-java8",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java8"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java8"
    },
    {
      "name": "rxjava-1.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-1.0",
      "target_versions": {
        "library": [
          "io.reactivex:rxjava:1.0.7"
        ]
      }
    },
    {
      "name": "rxjava-2.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-2.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava2:rxjava:[2.0.6,)"
        ],
        "library": [
          "io.reactivex.rxjava2:rxjava:2.1.3"
        ]
      }
    },
    {
      "name": "rxjava-3.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.0.0,3.1.0]"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:[3.0.12,3.1.0)"
        ]
      }
    },
    {
      "name": "rxjava-3.1.1",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.1.1",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.1.1,)"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:3.1.1"
        ]
      }
    },
    {
      "name": "scala-fork-join-2.8",
      "scope": {
        "name": "io.opentelemetry.scala-fork-join-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/scala-fork-join-2.8",
      "target_versions": {
        "javaagent": [
          "org.scala-lang:scala-library:[2.8.0,2.12.0)"
        ]
      }
    },
    {
      "name": "servlet-2.2",
      "scope": {
        "name": "io.opentelemetry.servlet-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-2.2",
      "target_versions": {
        "javaagent": [
          "javax.servlet:servlet-api:[2.2, 3.0)"
        ]
      }
    },
    {
      "name": "servlet-3.0",
      "scope": {
        "name": "io.opentelemetry.servlet-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-3.0",
      "target_versions": {
        "javaagent": [
          "javax.servlet:javax.servlet-api:[3.0,)"
        ]
      }
    },
    {
      "name": "servlet-5.0",
      "scope": {
        "name": "io.opentelemetry.servlet-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-5.0",
      "target_versions": {
        "javaagent": [
          "jakarta.servlet:jakarta.servlet-api:[5.0.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it extracts the HTTP route and attaches it to SERVER spans and HTTP server metrics.\n",
      "name": "spark-2.3",
      "scope": {
        "name": "io.opentelemetry.spark-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/spark-2.3",
      "target_versions": {
        "javaagent": [
          "com.sparkjava:spark-core:[2.3,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental attribute `job.system` to spans.",
          "name": "otel.instrumentation.spring-batch.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, a new root span will be created for each chunk processing. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.experimental.chunk.new-trace",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, spans will be created for each item processed. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.item.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables INTERNAL spans for jobs run by the Spring Batch framework.",
      "disabled_by_default": true,
      "name": "spring-batch-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-batch-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-batch-3.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.batch:spring-batch-core:[3.0.0.RELEASE,5)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-batch.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation configures the OpenTelemetry Micrometer bridge to receive metrics from Spring Boot Actuator. It does not produce telemetry on its own.\n",
      "disabled_by_default": true,
      "name": "spring-boot-actuator-autoconfigure-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-boot-actuator-autoconfigure-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-actuator-autoconfigure-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.boot:spring-boot-actuator-autoconfigure:[2.0.0.RELEASE,)"
        ]
      }
    },
    {
      "description": "This instrumentation automatically detects the `service.name` and `service.version` for Spring Boot applications and sets them as resource attributes.\nIt uses the following strategies (first successful wins):\n  - Check for the SPRING_APPLICATION_NAME environment variable\n  - Check for spring.application.name system property\n  - Check for application.properties file on the classpath\n  - Check for application.properties in the current working dir\n  - Check for application.yml on the classpath\n  - Check for application.yml in the current working dir\n  - Check for --spring.application.name program argument (not jvm arg) via ProcessHandle\n  - Check for --spring.application.name program argument via sun.java.command system property\n",
      "name": "spring-boot-resources",
      "scope": {
        "name": "io.opentelemetry.spring-boot-resources"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-resources"
    },
    {
      "description": "This instrumentation enhances tracing for Spring Cloud AWS. It augments the existing AWS SDK instrumentation by providing higher-level tracing for SQS operations, capturing details specific to Spring Cloud AWS SQS usage and linking them to the underlying AWS SDK traces.\n",
      "minimum_java_version": 17,
      "name": "spring-cloud-aws-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-aws-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-aws-3.0",
      "target_versions": {
        "javaagent": [
          "io.awspring.cloud:spring-cloud-aws-sqs:[3.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `spring-cloud-gateway.route` attributes (e.g., `spring-cloud-gateway.route.id`, `spring-cloud-gateway.route.uri`, etc.) on spans.\n",
          "name": "otel.instrumentation.spring-cloud-gateway.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enhances tracing for Spring Cloud Gateway. It does not generate new telemetry on its own, but rather enriches existing traces produced by other instrumentations like Netty and Spring WebFlux with Spring Cloud Gateway-specific attributes.\n",
      "name": "spring-cloud-gateway-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-gateway-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-gateway/spring-cloud-gateway-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.cloud:spring-cloud-starter-gateway:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "description": "This instrumentation ensures proper context propagation for asynchronous operations within Spring Core. It modifies how tasks are submitted and executed to ensure that spans created by other instrumentations are correctly linked across thread boundaries, rather than generating any new telemetry itself.\n",
      "minimum_java_version": 17,
      "name": "spring-core-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-core-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-core-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-core:[2.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation enhances tracing for Spring Data operations. It works in conjunction with other instrumentations, such as JDBC, to provide additional context and details for database interactions initiated through Spring Data.\n",
      "name": "spring-data-1.8",
      "scope": {
        "name": "io.opentelemetry.spring-data-1.8"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-data/spring-data-1.8",
      "target_versions": {
        "javaagent": [
          "org.springframework.data:spring-data-commons:[1.8.0.RELEASE,]",
          "org.springframework:spring-aop:[1.2,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": "*",
          "description": "An array of Spring channel name patterns that will be intercepted.",
          "name": "otel.instrumentation.spring-integration.global-channel-interceptor-patterns",
          "type": "list"
        },
        {
          "default": false,
          "description": "Create producer spans when messages are sent to an output channel. Enable when you're using a messaging library that doesn't have its own instrumentation for generating producer spans. Note that the detection of output channels only works for Spring Cloud Stream `DirectWithAttributesChannel`.\n",
          "name": "otel.instrumentation.spring-integration.producer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables PRODUCER and CONSUMER spans for Spring Integration.",
      "name": "spring-integration-4.1",
      "scope": {
        "name": "io.opentelemetry.spring-integration-4.1"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-integration-4.1",
      "target_versions": {
        "javaagent": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,)"
        ],
        "library": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,5.+)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "otel.instrumentation.spring-integration.producer.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of CONSUMER spans for Spring JMS.",
      "name": "spring-jms-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-2.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[2.0,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of CONSUMER spans for Spring JMS.",
      "minimum_java_version": 17,
      "name": "spring-jms-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-6.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `kafka.record.queue_time_ms`",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables CONSUMER spans for Spring Kafka listeners.",
      "name": "spring-kafka-2.7",
      "scope": {
        "name": "io.opentelemetry.spring-kafka-2.7"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-kafka-2.7",
      "target_versions": {
        "javaagent": [
          "org.springframework.kafka:spring-kafka:[2.7.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "kafka.record.queue_time_ms",
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "otel.instrumentation.kafka.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `messaging.pulsar.message.type` on PRODUCER spans.\n",
          "name": "otel.instrumentation.pulsar.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables CONSUMER spans for Spring Pulsar listeners.",
      "minimum_java_version": 17,
      "name": "spring-pulsar-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-pulsar-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-pulsar-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.pulsar:spring-pulsar:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables CONSUMER spans for Spring RabbitMQ listeners.",
      "name": "spring-rabbit-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-rabbit-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-rabbit-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.amqp:spring-rabbit:(,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables CLIENT and SERVER spans for Spring RMI applications.",
      "name": "spring-rmi-4.0",
      "scope": {
        "name": "io.opentelemetry.spring-rmi-4.0"
      },
      "semconv": [
        "Aws"
      ],
      "source_path": "instrumentation/spring/spring-rmi-4.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[4.0.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental span attribute `job.system` with the value `spring_scheduling`.",
          "name": "otel.instrumentation.spring-scheduling.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Spring Scheduling tasks.",
      "name": "spring-scheduling-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-scheduling-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-scheduling-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[3.1.0.RELEASE,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-scheduling.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing the enduser.id attribute.",
          "name": "otel.instrumentation.common.enduser.id.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.role attribute.",
          "name": "otel.instrumentation.common.enduser.role.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.scope attribute.",
          "name": "otel.instrumentation.common.enduser.scope.enabled",
          "type": "boolean"
        },
        {
          "default": "ROLE_",
          "description": "Prefix of granted authorities identifying roles to capture in the `enduser.role` semantic attribute.",
          "name": "otel.instrumentation.spring-security.enduser.role.granted-authority-prefix",
          "type": "string"
        },
        {
          "default": "SCOPE_",
          "description": "Prefix of granted authorities identifying scopes to capture in the `enduser.scopes` semantic attribute.",
          "name": "otel.instrumentation.spring-security.scope.role.granted-authority-prefix",
          "type": "string"
        }
      ],
      "description": "This instrumentation does not emit any telemetry on its own. Instead, it captures enduser attributes, and is only enabled when at least one of the `enduser` configurations is enabled.\nNOTE: The `enduser` attributes have been deprecated and will be removed in 3.0+ of the java agent.\n",
      "markdown_content": "# OpenTelemetry Instrumentation: Spring Security Config\n\nProvides a Servlet `Filter` and a WebFlux `WebFilter` to capture `enduser.*` semantic attributes\nfrom Spring Security `Authentication` objects.\n\nAlso provides `Customizer` implementations to insert those filters into the filter chains created by\n`HttpSecurity` and `ServerHttpSecurity`, respectively.\n\n## Usage in Spring WebMVC Applications\n\nWhen not using [automatic instrumentation](../javaagent/), you can enable enduser attribute capturing\nfor a `SecurityFilterChain` by appling an `EnduserAttributesHttpSecurityCustomizer`\nto the `HttpSecurity` which constructs the `SecurityFilterChain`.\n\n```java\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.EnduserAttributesCapturer;\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.servlet.EnduserAttributesHttpSecurityCustomizer;\n\n@Configuration\n@EnableWebSecurity\nclass MyWebSecurityConfig {\n\n  @Bean\n  public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    // First, apply application related configuration to http\n\n    // Then, apply enduser.* attribute capturing\n    EnduserAttributesCapturer capturer = new EnduserAttributesCapturer();\n    // Set properties of capturer.  Defaults shown.\n    capturer.setEnduserIdEnabled(false);\n    capturer.setEnduserRoleEnabled(false);\n    capturer.setEnduserScopeEnabled(false);\n    capturer.setRoleGrantedAuthorityPrefix(\"ROLE_\");\n    capturer.setScopeGrantedAuthorityPrefix(\"SCOPE_\");\n\n    new EnduserAttributesHttpSecurityCustomizer(capturer)\n        .customize(http);\n\n    return http.build();\n  }\n}\n```\n\n## Usage in Spring WebFlux Applications\n\nWhen not using [automatic instrumentation](../javaagent/), you can enable enduser attribute capturing\nfor a `SecurityWebFilterChain` by appling an `EnduserAttributesServerHttpSecurityCustomizer`\nto the `ServerHttpSecurity` which constructs the `SecurityWebFilterChain`.\n\n```java\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.EnduserAttributesCapturer;\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.webflux.EnduserAttributesServerHttpSecurityCustomizer;\n\n@Configuration\n@EnableWebFluxSecurity\nclass MyWebFluxSecurityConfig {\n\n  @Bean\n  public SecurityWebFilterChain filterChain(ServerHttpSecurity http) throws Exception {\n    // First, apply application related configuration to http\n\n    // Then, apply enduser.* attribute capturing\n    EnduserAttributesCapturer capturer = new EnduserAttributesCapturer();\n    // Set properties of capturer.  Defaults shown.\n    capturer.setEnduserIdEnabled(false);\n    capturer.setEnduserRoleEnabled(false);\n    capturer.setEnduserScopeEnabled(false);\n    capturer.setRoleGrantedAuthorityPrefix(\"ROLE_\");\n    capturer.setScopeGrantedAuthorityPrefix(\"SCOPE_\");\n\n    new EnduserAttributesServerHttpSecurityCustomizer(capturer)\n        .customize(http);\n\n    return http.build();\n  }\n}\n```\n",
      "minimum_java_version": 17,
      "name": "spring-security-config-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-security-config-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-security-config-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.security:spring-security-config:[6.0.0,]"
        ],
        "library": [
          "io.projectreactor:reactor-core:3.5.0",
          "jakarta.servlet:jakarta.servlet-api:6.0.0",
          "org.springframework.security:spring-security-config:6.0.0",
          "org.springframework.security:spring-security-web:6.0.0",
          "org.springframework:spring-web:6.0.0"
        ]
      }
    },
    {
      "description": "This instrumentation provides a library integration that enables capturing HTTP client spans and metrics for Spring's RestTemplate. The agent integration enriches HTTP server spans and metrics with route information.\n",
      "markdown_content": "# Library Instrumentation for Spring Web version 3.1 and higher\n\nProvides OpenTelemetry instrumentation for Spring's RestTemplate.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `SPRING_VERSION` with the version of spring you're using.\n`Minimum version: 3.1`\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-spring-web-3.1).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <!-- opentelemetry -->\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-web-3.1</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- provides opentelemetry-sdk -->\n  <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-logging</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- required to instrument spring-web -->\n  <!-- this artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-web</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-web-3.1:OPENTELEMETRY_VERSION\")\nimplementation(\"io.opentelemetry:opentelemetry-exporter-logging:OPENTELEMETRY_VERSION\")\n\n//this artifact should already be present in your application\nimplementation(\"org.springframework:spring-web:SPRING_VERSION\")\n```\n\n### Features\n\n#### Telemetry-producing `ClientHttpRequestInterceptor` implementation\n\n`SpringWebTelemetry` allows creating a\ncustom [ClientHttpRequestInterceptor](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/ClientHttpRequestInterceptor.html)\nthat produces telemetry for HTTP requests sent using a `RestTemplate`. Example:\n\n##### Usage\n\n```java\n\nimport io.opentelemetry.instrumentation.spring.web.SpringWebTelemetry;\nimport io.opentelemetry.api.OpenTelemetry;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.ClientHttpRequestInterceptor;\nimport org.springframework.web.client.RestTemplate;\n\n@Configuration\npublic class RestTemplateConfig {\n\n  @Bean\n  public RestTemplate restTemplate(OpenTelemetry openTelemetry) {\n\n    RestTemplate restTemplate = new RestTemplate();\n    SpringWebTelemetry telemetry = SpringWebTelemetry.create(openTelemetry);\n    restTemplate.getInterceptors().add(telemetry.newInterceptor());\n\n    return restTemplate;\n  }\n}\n```\n\n### Starter Guide\n\nCheck out [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/) to learn more about\nusing the OpenTelemetry API to instrument your code.\n",
      "name": "spring-web-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-web-3.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-web/spring-web-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enriches HTTP server spans and metrics with route information.",
      "name": "spring-web-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-web-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-web/spring-web-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[6.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and metrics for Spring WebFlux 5.0. It also optionally enables experimental controller (INTERNAL) spans.\n",
      "name": "spring-webflux-5.0",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.0"
      },
      "semconv": [
        "Code",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.ipc:reactor-netty:[0.7.0.RELEASE,)",
          "io.projectreactor.netty:reactor-netty:[0.8.0.RELEASE,)",
          "org.springframework:spring-webflux:[5.0.0.RELEASE,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.controller-telemetry.enabled"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for the Spring WebFlux WebClient and Webflux server versions 5.3+ that enables HTTP client and server spans and metrics.\n",
      "markdown_content": "# Library Instrumentation for Spring Webflux\n\nProvides OpenTelemetry instrumentation for Spring's `WebClient` and Webflux server.\n\nFor this instrumentation, the minimum supported version of Spring Webflux is 5.3.0.\n\n## Add dependencies to your project\n\nFor Maven, add to your `pom.xml`:\n\n```xml\n\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-webflux-5.3</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- This artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webflux</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-webflux-5.3:OPENTELEMETRY_VERSION\")\n\n// this artifact should already be present in your application\nimplementation(\"org.springframework:spring-webflux:SPRING_VERSION\")\n```\n\n## Features\n\n`SpringWebfluxTelemetry` can emit a client span for each request sent using `WebClient` by\nimplementing\nthe [ExchangeFilterFunction](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/reactive/function/client/ExchangeFilterFunction.html)\ninterface.\n\n`SpringWebfluxTelemetry` can also emit a server span for each request received, by implementing\na `WebFilter` and using the OpenTelemetry Reactor instrumentation to ensure context is\npassed around correctly.\n\n### Web client instrumentation\n\nThe `WebClient` instrumentation will emit the `error.type` attribute with value `cancelled` whenever\nan outgoing HTTP request is cancelled.\n\n### Setup\n\nHere is how to set up client and server instrumentation respectively:\n\n```java\nimport io.opentelemetry.instrumentation.spring.webflux.v5_3.SpringWebfluxClientTelemetry;\nimport io.opentelemetry.instrumentation.spring.webflux.v5_3.SpringWebfluxServerTelemetry;\n\n@Configuration\npublic class WebClientConfig {\n  private final SpringWebfluxClientTelemetry webfluxClientTelemetry;\n  private final SpringWebfluxServerTelemetry webfluxServerTelemetry;\n\n  public WebClientConfig(OpenTelemetry openTelemetry) {\n    this.webfluxClientTelemetry = SpringWebfluxClientTelemetry.builder(openTelemetry).build();\n  }\n\n  // Adds instrumentation to WebClients\n  @Bean\n  public WebClient.Builder webClient() {\n    WebClient webClient = WebClient.create();\n    return webClient.mutate().filters(webfluxClientTelemetry::addFilter);\n  }\n\n  // Adds instrumentation to Webflux server\n  @Bean\n  public WebFilter webFilter() {\n    return webfluxServerTelemetry.createWebFilterAndRegisterReactorHook();\n  }\n}\n```\n\n## Starter Guide\n\nCheck\nout [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/)\nto learn more about using the OpenTelemetry API to instrument your code.\n",
      "name": "spring-webflux-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.3",
      "target_versions": {
        "library": [
          "org.springframework:spring-webflux:5.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 3.1+.\n",
      "name": "spring-webmvc-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for Spring WebMVC controllers, that enables the creation of HTTP server spans and metrics for requests processed by the Spring servlet container.\n",
      "markdown_content": "# Library Instrumentation for Spring Web MVC version 5.3 and higher\n\nProvides OpenTelemetry instrumentation for Spring WebMVC controllers.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `SPRING_VERSION` with the version of spring you're using.\n\n- `Minimum version: 5.3`\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-spring-webmvc-5.3).\n\nFor Maven add the following to your `pom.xml`:\n\n```xml\n<dependencies>\n  <!-- OpenTelemetry instrumentation -->\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-webmvc-5.3</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n   <!-- OpenTelemetry exporter -->\n   <!-- replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..) -->\n   <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-logging</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- required to instrument Spring WebMVC -->\n  <!-- this artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n\n</dependencies>\n```\n\nFor Gradle add the following to your dependencies:\n\n```groovy\n\n// OpenTelemetry instrumentation\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-5.3:OPENTELEMETRY_VERSION\")\n\n// OpenTelemetry exporter\n// replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..)\nimplementation(\"io.opentelemetry:opentelemetry-exporter-logging:OPENTELEMETRY_VERSION\")\n\n// required to instrument Spring WebMVC\n// this artifact should already be present in your application\nimplementation(\"org.springframework:spring-webmvc:SPRING_VERSION\")\n```\n\n### Features\n\n#### `SpringWebMvcTelemetry`\n\n`SpringWebMvcTelemetry` enables creating OpenTelemetry server spans around HTTP requests processed\nby the Spring servlet container.\n\n##### Usage in Spring Boot\n\nSpring Boot allows servlet `Filter`s to be registered as beans:\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.spring.webmvc.v5_3.SpringWebMvcTelemetry;\nimport javax.servlet.Filter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SpringWebMvcTelemetryConfiguration {\n\n   @Bean\n   public Filter telemetryFilter(OpenTelemetry openTelemetry) {\n      return SpringWebMvcTelemetry.create(openTelemetry).createServletFilter();\n   }\n}\n```\n\n### Starter Guide\n\nCheck\nout [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/)\nto learn more about using the OpenTelemetry API to instrument your code.\n",
      "name": "spring-webmvc-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-5.3",
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 6.0+.\n",
      "markdown_content": "# Library Instrumentation for Spring Web MVC version 6.0.0 and higher\n\nProvides OpenTelemetry instrumentation for Spring WebMVC controllers.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `SPRING_VERSION` with the version of spring you're using.\n\n- `Minimum version: 6.0.0`\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-spring-webmvc-6.0).\n\nFor Maven add the following to your `pom.xml`:\n\n```xml\n<dependencies>\n  <!-- OpenTelemetry instrumentation -->\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-webmvc-6.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n   <!-- OpenTelemetry exporter -->\n   <!-- replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..) -->\n   <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-logging</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- required to instrument Spring WebMVC -->\n  <!-- this artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n\n</dependencies>\n```\n\nFor Gradle add the following to your dependencies:\n\n```groovy\n\n// OpenTelemetry instrumentation\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-6.0:OPENTELEMETRY_VERSION\")\n\n// OpenTelemetry exporter\n// replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..)\nimplementation(\"io.opentelemetry:opentelemetry-exporter-logging:OPENTELEMETRY_VERSION\")\n\n// required to instrument Spring WebMVC\n// this artifact should already be present in your application\nimplementation(\"org.springframework:spring-webmvc:SPRING_VERSION\")\n```\n\n### Features\n\n#### `SpringWebMvcTelemetry`\n\n`SpringWebMvcTelemetry` enables creating OpenTelemetry server spans around HTTP requests processed\nby the Spring servlet container.\n\n##### Usage in Spring Boot\n\nSpring Boot allows servlet `Filter`s to be registered as beans:\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.spring.webmvc.v6_0.SpringWebMvcTelemetry;\nimport jakarta.servlet.Filter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SpringWebMvcTelemetryConfiguration {\n\n   @Bean\n   public Filter telemetryFilter(OpenTelemetry openTelemetry) {\n      return SpringWebMvcTelemetry.create(openTelemetry).createServletFilter();\n   }\n}\n```\n\n### Starter Guide\n\nCheck\nout [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/)\nto learn more about using the OpenTelemetry API to instrument your code.\n",
      "minimum_java_version": 17,
      "name": "spring-webmvc-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-6.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "disabled_by_default": true,
      "name": "spring-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-ws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-ws-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.ws:spring-ws-core:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "name": "spymemcached-2.12",
      "scope": {
        "name": "io.opentelemetry.spymemcached-2.12"
      },
      "semconv": [],
      "source_path": "instrumentation/spymemcached-2.12",
      "target_versions": {
        "javaagent": [
          "net.spy:spymemcached:[2.12.0,)"
        ]
      }
    },
    {
      "name": "struts-2.3",
      "scope": {
        "name": "io.opentelemetry.struts-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[2.1.0,7)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "struts-7.0",
      "scope": {
        "name": "io.opentelemetry.struts-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[7.0.0,)"
        ]
      }
    },
    {
      "name": "tapestry-5.4",
      "scope": {
        "name": "io.opentelemetry.tapestry-5.4"
      },
      "semconv": [],
      "source_path": "instrumentation/tapestry-5.4",
      "target_versions": {
        "javaagent": [
          "org.apache.tapestry:tapestry-core:[5.4.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "tomcat-10.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-10.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[10,)"
        ]
      }
    },
    {
      "name": "tomcat-7.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[7.0.4, 10)"
        ]
      }
    },
    {
      "name": "tomcat-jdbc",
      "scope": {
        "name": "io.opentelemetry.tomcat-jdbc"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/tomcat/tomcat-jdbc",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jdbc:[8.5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "twilio-6.6",
      "scope": {
        "name": "io.opentelemetry.twilio-6.6"
      },
      "semconv": [],
      "source_path": "instrumentation/twilio-6.6",
      "target_versions": {
        "javaagent": [
          "com.twilio.sdk:twilio:(,8.0.0)"
        ]
      }
    },
    {
      "name": "undertow-1.4",
      "scope": {
        "name": "io.opentelemetry.undertow-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/undertow-1.4",
      "target_versions": {
        "javaagent": [
          "io.undertow:undertow-core:[1.4.0.Final,)"
        ]
      }
    },
    {
      "name": "vaadin-14.2",
      "scope": {
        "name": "io.opentelemetry.vaadin-14.2"
      },
      "semconv": [],
      "source_path": "instrumentation/vaadin-14.2",
      "target_versions": {
        "javaagent": [
          "com.vaadin:flow-server:[2.2.0,3)",
          "com.vaadin:flow-server:[3.1.0,)"
        ]
      }
    },
    {
      "name": "vertx-http-client-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[3.0.0,4.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-http-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-4.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-http-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-5.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-kafka-client-3.6",
      "scope": {
        "name": "io.opentelemetry.vertx-kafka-client-3.6"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-kafka-client-3.6",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-kafka-client:[3.5.1,)"
        ]
      }
    },
    {
      "name": "vertx-redis-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-redis-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-redis-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-redis-client:[4.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.redis.database_index",
                  "type": "LONG"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "vertx-rx-java-3.5",
      "scope": {
        "name": "io.opentelemetry.vertx-rx-java-3.5"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-rx-java-3.5",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-rx-java2:[3.5.0,)"
        ]
      }
    },
    {
      "name": "vertx-sql-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.sql.table",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.user",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-sql-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.sql.table",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.user",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "vertx-web-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-web-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-web-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-web:[3.0.0,)"
        ]
      }
    },
    {
      "description": "Instrumentation for the vibur-dbcp library, which provides connection pool metrics.",
      "markdown_content": "# Library Instrumentation for Vibur DBCP version 11.0 and higher\n\nProvides OpenTelemetry instrumentation for [Vibur DBCP](https://www.vibur.org/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-vibur-dbcp-11.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-vibur-dbcp-11.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-vibur-dbcp-11.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `ViburDBCPDataSource` instances for collecting\nOpenTelemetry-based metrics.\n\n```java\nViburTelemetry viburTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, ViburDBCPDataSource viburDataSource) {\n  viburTelemetry = ViburTelemetry.create(openTelemetry);\n  viburTelemetry.registerMetrics(viburDataSource);\n}\n\nvoid destroy(ViburDBCPDataSource viburDataSource) {\n  viburTelemetry.unregisterMetrics(viburDataSource);\n}\n```\n",
      "name": "vibur-dbcp-11.0",
      "scope": {
        "name": "io.opentelemetry.vibur-dbcp-11.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vibur-dbcp-11.0",
      "target_versions": {
        "javaagent": [
          "org.vibur:vibur-dbcp:[11.0,)"
        ],
        "library": [
          "org.vibur:vibur-dbcp:11.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "wicket-8.0",
      "scope": {
        "name": "io.opentelemetry.wicket-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/wicket-8.0",
      "target_versions": {
        "javaagent": [
          "org.apache.wicket:wicket:[8.0.0,]"
        ]
      }
    },
    {
      "name": "xxl-job-1.9.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-1.9.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-1.9.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[1.9.2, 2.1.2)"
        ]
      }
    },
    {
      "name": "xxl-job-2.1.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.1.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.1.2,2.3.0)"
        ]
      }
    },
    {
      "name": "xxl-job-2.3.0",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.3.0",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.3.0,)"
        ]
      }
    },
    {
      "name": "zio-2.0",
      "scope": {
        "name": "io.opentelemetry.zio-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/zio/zio-2.0",
      "target_versions": {
        "javaagent": [
          "dev.zio:zio_2.12:[2.0.0,)",
          "dev.zio:zio_2.13:[2.0.0,)",
          "dev.zio:zio_3:[2.0.0,)"
        ]
      }
    }
  ],
  "2.19": [
    {
      "description": "This instrumentation enables HTTP server spans and HTTP server metrics for the ActiveJ HTTP server.",
      "display_name": "ActiveJ",
      "library_link": "https://activej.io/",
      "minimum_java_version": 17,
      "name": "activej-http-6.0",
      "scope": {
        "name": "io.opentelemetry.activej-http-6.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/activej-http-6.0",
      "target_versions": {
        "javaagent": [
          "io.activej:activej-http:[6.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides context propagation for Akka actors, it does not emit any telemetry on its own.",
      "display_name": "Akka Actors",
      "library_link": "https://doc.akka.io/libraries/akka-core/current/typed/index.html",
      "name": "akka-actor-2.3",
      "scope": {
        "name": "io.opentelemetry.akka-actor-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-2.3",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.3,)",
          "com.typesafe.akka:akka-actor_2.12:[2.3,)",
          "com.typesafe.akka:akka-actor_2.13:[2.3,)"
        ]
      }
    },
    {
      "description": "This instrumentation provides context propagation for the Akka Fork-Join Pool, it does not emit any telemetry on its own.",
      "display_name": "Akka Actors",
      "library_link": "https://doc.akka.io/libraries/akka-core/current/typed/index.html",
      "name": "akka-actor-fork-join-2.5",
      "scope": {
        "name": "io.opentelemetry.akka-actor-fork-join-2.5"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-fork-join-2.5",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.5,)",
          "com.typesafe.akka:akka-actor_2.12:[2.5,2.6)",
          "com.typesafe.akka:akka-actor_2.13:[2.5.23,2.6)"
        ]
      }
    },
    {
      "description": "This instrumentation enables HTTP client spans and metrics for the Akka HTTP client, and HTTP server spans and metrics for the Akka HTTP server.\n",
      "display_name": "Akka HTTP",
      "library_link": "https://doc.akka.io/docs/akka-http/current/index.html",
      "name": "akka-http-10.0",
      "scope": {
        "name": "io.opentelemetry.akka-http-10.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/akka/akka-http-10.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-http_2.11:[10,)",
          "com.typesafe.akka:akka-http_2.12:[10,)",
          "com.typesafe.akka:akka-http_2.13:[10,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "The Alibaba Druid instrumentation generates database connection pool metrics for druid data sources.\n",
      "library_link": "https://github.com/alibaba/druid",
      "name": "alibaba-druid-1.0",
      "scope": {
        "name": "io.opentelemetry.alibaba-druid-1.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/alibaba-druid-1.0",
      "target_versions": {
        "javaagent": [
          "com.alibaba:druid:(,)"
        ],
        "library": [
          "com.alibaba:druid:1.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "This instrumentation enables database connection pools metrics for Apache DBCP.\nThe instrumentation uses `MBeanRegistration` methods for lifecycle detection, therefore it only activates if the `BasicDataSource` is registered to an `MBeanServer`. If using Spring Boot, this happens automatically as all Spring beans that support JMX registration are automatically registered by default.\n",
      "library_link": "https://commons.apache.org/proper/commons-dbcp/",
      "markdown_content": "# Library Instrumentation for Apache DBCP version 2.0 and higher\n\nProvides OpenTelemetry instrumentation for [Apache DBCP](https://commons.apache.org/proper/commons-dbcp/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-apache-dbcp-2.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-apache-dbcp-2.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-apache-dbcp-2.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `BasicDataSourceMXBean` instances for collecting\nOpenTelemetry-based metrics. A non-null name of the data source must be explicitly provided.\n\n```java\nApacheDbcpTelemetry apacheDbcpTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, BasicDataSourceMXBean dataSource, String dataSourceName) {\n  apacheDbcpTelemetry = ApacheDbcpTelemetry.create(openTelemetry);\n  apacheDbcpTelemetry.registerMetrics(dataSource, dataSourceName);\n}\n\nvoid destroy(BasicDataSourceMXBean dataSource) {\n  apacheDbcpTelemetry.unregisterMetrics(dataSource);\n}\n```\n",
      "name": "apache-dbcp-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-dbcp-2.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/apache-dbcp-2.0",
      "target_versions": {
        "javaagent": [
          "org.apache.commons:commons-dbcp2:[2,)"
        ],
        "library": [
          "org.apache.commons:commons-dbcp2:2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        }
      ],
      "description": "The Apache Dubbo instrumentation provides RPC client spans and RPC server spans for Apache Dubbo RPC calls. Each call produces a span named after the Dubbo method, enriched with standard RPC attributes (system, service, method), network attributes, and error details if an exception occurs.",
      "library_link": "https://github.com/apache/dubbo/",
      "name": "apache-dubbo-2.7",
      "scope": {
        "name": "io.opentelemetry.apache-dubbo-2.7"
      },
      "semconv": [
        "Aws",
        "Database Client"
      ],
      "source_path": "instrumentation/apache-dubbo-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.dubbo:dubbo:[2.7,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for the Apache HttpAsyncClient.",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpasyncclient-4.1",
      "scope": {
        "name": "io.opentelemetry.apache-httpasyncclient-4.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpasyncclient-4.1",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents:httpasyncclient:[4.1,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for versions 2 and 3 of the Apache HttpClient.",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-2.0",
      "target_versions": {
        "javaagent": [
          "commons-httpclient:commons-httpclient:[2.0,4.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 4 of the Apache HttpClient.",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-4.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-client:(,3.0.0)",
          "org.apache.httpcomponents:httpclient:[4.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables HTTP client spans and HTTP client metrics for the Apache HttpClient.",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-4.3",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.3"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.3",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents:httpclient:[4.3,4.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 5 of the Apache HttpClient.",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-5.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents.client5:httpclient5:[5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables HTTP client spans and HTTP client metrics for the Apache HttpClient.",
      "library_link": "https://hc.apache.org/index.html",
      "markdown_content": "# Library Instrumentation for Apache Http client version 5.2\n\nProvides OpenTelemetry instrumentation for [Apache Http Client 5.2](https://hc.apache.org/httpcomponents-client-5.2.x/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-apache-httpclient-5.2).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-apache-httpclient-5.2</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-apache-httpclient-5.2:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides the class `ApacheHttpClientTelemetry` that has a builder\nmethod and allows the creation of an instance of the `HttpClientBuilder` to provide\nOpenTelemetry-based spans and context propagation:\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.apachehttpclient.v5_2.ApacheHttpClientTelemetry;\nimport org.apache.hc.client5.http.classic.HttpClient;\nimport org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n\npublic class ApacheHttpClientConfiguration {\n\n  private OpenTelemetry openTelemetry;\n\n  public ApacheHttpClientConfiguration(OpenTelemetry openTelemetry) {\n    this.openTelemetry = openTelemetry;\n  }\n\n  // creates a new http client builder for constructing http clients with opentelemetry instrumentation\n  public HttpClientBuilder createBuilder() {\n    return ApacheHttpClientTelemetry.builder(openTelemetry).build().newHttpClientBuilder();\n  }\n\n  // creates a new http client with opentelemetry instrumentation\n  public HttpClient newHttpClient() {\n    return ApacheHttpClientTelemetry.builder(openTelemetry).build().newHttpClient();\n  }\n}\n```\n",
      "name": "apache-httpclient-5.2",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.2",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents.client5:httpclient5:5.2.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `apache-shenyu.meta.` prefixed span attributes `app-name`, `service-name`, `context-path`, `param-types`, `id`, `method-name`, `rpc-type`, `path` and `rpc-ext`.\n",
          "name": "otel.instrumentation.apache-shenyu.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation does not emit telemetry on its own. Instead, it augments existing HTTP server spans and HTTP server metrics with the HTTP route and Shenyu specific attributes.\n",
      "library_link": "https://shenyu.apache.org/",
      "name": "apache-shenyu-2.4",
      "scope": {
        "name": "io.opentelemetry.apache-shenyu-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/apache-shenyu-2.4",
      "target_versions": {
        "javaagent": [
          "org.apache.shenyu:shenyu-web:[2.4.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation enables HTTP client spans and metrics for the Armeria HTTP client, and HTTP server spans and metrics for the Armeria HTTP server.\n",
      "library_link": "https://armeria.dev/",
      "name": "armeria-1.3",
      "scope": {
        "name": "io.opentelemetry.armeria-1.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/armeria/armeria-1.3",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria:[1.3.0,)"
        ],
        "library": [
          "com.linecorp.armeria:armeria:1.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables RPC client spans and metrics for the Armeria gRPC client, and RPC server spans and metrics for the Armeria gRPC server.\n",
      "library_link": "https://armeria.dev/",
      "name": "armeria-grpc-1.14",
      "scope": {
        "name": "io.opentelemetry.armeria-grpc-1.14"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Rpc"
      ],
      "source_path": "instrumentation/armeria/armeria-grpc-1.14",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria-grpc:[1.14.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 1 of the AsyncHttpClient (AHC) HTTP client.",
      "library_link": "https://github.com/AsyncHttpClient/async-http-client",
      "name": "async-http-client-1.9",
      "scope": {
        "name": "io.opentelemetry.async-http-client-1.9"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-1.9",
      "target_versions": {
        "javaagent": [
          "com.ning:async-http-client:[1.9.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 2 of the AsyncHttpClient (AHC) HTTP client.",
      "library_link": "https://github.com/AsyncHttpClient/async-http-client",
      "name": "async-http-client-2.0",
      "scope": {
        "name": "io.opentelemetry.async-http-client-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-2.0",
      "target_versions": {
        "javaagent": [
          "org.asynchttpclient:async-http-client:[2.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it hooks into the Avaje Jex Context to extract the HTTP route and attach it to existing HTTP server spans and HTTP server metrics.\n",
      "library_link": "https://avaje.io/jex/",
      "minimum_java_version": 21,
      "name": "avaje-jex-3.0",
      "scope": {
        "name": "io.opentelemetry.avaje-jex-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/avaje-jex-3.0",
      "target_versions": {
        "javaagent": [
          "io.avaje:avaje-jex:[3.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "Provides lightweight instrumentation of the Lambda core library, supporting all versions. It generates FaaS server spans with the `faas.invocation_id` attribute. Use this package if you only use `RequestStreamHandler` or know you don't use any event classes from `aws-lambda-java-events`. This also includes when you are using `aws-serverless-java-container` to run e.g., a Spring Boot application on Lambda.\nFor custom wrappers when using library instrumentation, you can configure the `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` environment variable to contain your lambda handler method (in the format `package.ClassName::methodName`) and use one of wrappers as your lambda `Handler`.\n",
      "library_link": "https://docs.aws.amazon.com/lambda/latest/dg/java-handler.html",
      "markdown_content": "# AWS Lambda Instrumentation\n\nThis package contains libraries to help instrument AWS lambda functions in your code.\n\n## Using wrappers\n\nTo use the instrumentation, configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` env property to your lambda handler method in following format `package.ClassName::methodName`\nand use one of wrappers as your lambda `Handler`.\n\nIn order to configure a span flush timeout (default is set to 10 seconds), please configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_FLUSH_TIMEOUT` env property. The value is in milliseconds.\n\nAvailable wrappers:\n\n- `io.opentelemetry.instrumentation.awslambdacore.v1_0.TracingRequestStreamWrapper` - for wrapping streaming handlers (implementing `RequestStreamHandler`), enabling HTTP context propagation for HTTP requests\n\nWhen using known Lambda event types as parameters, use [aws-lambda-events-2.2](../../aws-lambda-events-2.2/library).\n\n## Using handlers\n\nTo use the instrumentation, replace your function classes that implement `RequestHandler` (or `RequestStreamHandler`) with those\nthat extend `TracingRequestHandler` (or `TracingRequestStreamHandler`). You will need to change the method name to `doHandleRequest`\nand pass an initialized `OpenTelemetrySdk` to the base class.\n\n```java\npublic class MyRequestHandler extends TracingRequestHandler<String, String> {\n\n  private static final OpenTelemetrySdk SDK = OpenTelemetrySdk.builder()\n      .addSpanProcessor(spanProcessor)\n      .buildAndRegisterGlobal();\n\n  public MyRequestHandler() {\n    super(SDK);\n  }\n\n  // Note the method is named doHandleRequest instead of handleRequest.\n  @Override\n  protected String doHandleRequest(String input, Context context) {\n    if (input.equals(\"hello\")) {\n      return \"world\";\n    }\n    return \"goodbye\";\n  }\n}\n```\n\nA `SERVER` span will be created with the name you specify for the function when deploying it.\n\nIn addition, it is recommended to set up X-Ray trace propagation to be able to\nlink to tracing information provided by Lambda itself. To do so, add a dependency on\n`io.opentelemetry.contrib:opentelemetry-aws-xray-propagator`.\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.contrib%20AND%20a:opentelemetry-aws-xray-propagator).\n\nGradle:\n\n```kotlin\ndependencies {\n  implementation(\"io.opentelemetry.contrib:opentelemetry-aws-xray-propagator:OPENTELEMETRY_VERSION\")\n}\n```\n\nMaven:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.contrib</groupId>\n    <artifactId>opentelemetry-aws-xray-propagator</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\n## Trace propagation\n\nContext propagation for this instrumentation can be done either with X-Ray propagation or regular HTTP propagation. If X-Ray is enabled for instrumented lambda, it will be preferred. If X-Ray is disabled, HTTP propagation will be tried (that is HTTP headers will be read to check for a valid trace context).\n\n### X-Ray propagation\n\nThis instrumentation supports propagating traces using the `X-Amzn-Trace-Id` format for both normal\nrequests and SQS requests. X-Ray propagation is always enabled, there is no need to configure it explicitly.\n\n### HTTP headers based propagation\n\nFor API Gateway (HTTP) requests instrumented by using one of following methods:\n\n- extending `TracingRequestStreamHandler` or `TracingRequestHandler`\n- wrapping with `TracingRequestStreamWrapper` or `TracingRequestApiGatewayWrapper`\n  traces can be propagated with supported HTTP headers (see <https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators>).\n\nIn order to enable requested propagation for a handler, configure it on the SDK you build.\n\n```java\n  static {\n    OpenTelemetrySdk.builder()\n      ...\n      .setPropagators(ContextPropagators.create(B3Propagator.injectingSingleHeader()))\n      .buildAndRegisterGlobal();\n  }\n```\n\nIf using the wrappers, set the `OTEL_PROPAGATORS` environment variable as described [here](https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#propagator).\n",
      "name": "aws-lambda-core-1.0",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-core-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/aws-lambda/aws-lambda-core-1.0",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This version of the library instrumentation is deprecated, please use the `aws-lambda-events-3.11` library instrumentation instead. This instrumentation builds on top of the `aws-lambda-core-1.0` instrumentation, expanding support to cover the Lambda library, including standard and custom event types.\n",
      "library_link": "https://docs.aws.amazon.com/lambda/latest/dg/java-handler.html",
      "markdown_content": "# AWS Lambda Instrumentation\n\nThis package contains libraries to help instrument AWS lambda functions in your code.\n\n## Using wrappers\n\nTo use the instrumentation, configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` env property to your lambda handler method in following format `package.ClassName::methodName`\nand use one of wrappers as your lambda `Handler`.\n\nIn order to configure a span flush timeout (default is set to 10 seconds), please configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_FLUSH_TIMEOUT` env property. The value is in milliseconds.\n\nAvailable wrappers:\n\n- `io.opentelemetry.instrumentation.awslambdaevents.v2_2.TracingRequestWrapper` - for wrapping regular handlers (implementing `RequestHandler`)\n- `io.opentelemetry.instrumentation.awslambdaevents.v2_2.TracingRequestApiGatewayWrapper` - for wrapping regular handlers (implementing `RequestHandler`) proxied through API Gateway, enabling HTTP context propagation\n- `io.opentelemetry.instrumentation.awslambdacore.v1_0.TracingRequestStreamWrapper` - for wrapping streaming handlers (implementing `RequestStreamHandler`), enabling HTTP context propagation for HTTP requests\n\nIf you are only using `TracingRequestStreamWrapper`, consider using [aws-lambda-core-1.0](../../aws-lambda-core-1.0/library) instead to reduce the size of\nyour compiled function.\n\n## Using handlers\n\nTo use the instrumentation, replace your function classes that implement `RequestHandler` (or `RequestStreamHandler`) with those\nthat extend `TracingRequestHandler` (or `TracingRequestStreamHandler`). You will need to change the method name to `doHandleRequest`\nand pass an initialized `OpenTelemetrySdk` to the base class.\n\n```java\npublic class MyRequestHandler extends TracingRequestHandler<String, String> {\n\n  private static final OpenTelemetrySdk SDK = OpenTelemetrySdk.builder()\n      .addSpanProcessor(spanProcessor)\n      .buildAndRegisterGlobal();\n\n  public MyRequestHandler() {\n    super(SDK);\n  }\n\n  // Note the method is named doHandleRequest instead of handleRequest.\n  @Override\n  protected String doHandleRequest(String input, Context context) {\n    if (input.equals(\"hello\")) {\n      return \"world\";\n    }\n    return \"goodbye\";\n  }\n}\n```\n\nA `SERVER` span will be created with the name you specify for the function when deploying it.\n\nIn addition, it is recommended to set up X-Ray trace propagation to be able to\nlink to tracing information provided by Lambda itself. To do so, add a dependency on\n`opentelemetry-extension-tracepropagators`. Make sure the version matches the version of the SDK\nyou use.\n\nGradle:\n\n```kotlin\ndependencies {\n  implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators:0.8.0\")\n}\n```\n\nMaven:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n    <version>0.8.0</version>\n  </dependency>\n</dependencies>\n```\n\n## SQS Handler\n\nThis package provides a special handler for SQS-triggered functions to include messaging data.\nIf using SQS, it is recommended to use them instead of `TracingRequestHandler`.\n\nIf your application processes one message at a time, each independently, it is recommended to extend\n`TracingSQSMessageHandler`. This will create a single span corresponding to a received batch of\nmessages along with one span for each of the messages as you process them.\n\n```java\npublic class MyMessageHandler extends TracingSQSMessageHandler {\n  @Override\n  protected void handleMessage(SQSMessage message, Context context) {\n    System.out.println(message.getBody());\n  }\n}\n```\n\nIf you handle a batch of messages together, for example by aggregating them into a single unit,\nextend `TracingSQSEventHandler` to process a batch at a time.\n\n```java\npublic class MyBatchHandler extends TracingSQSEventHandler {\n  @Override\n  protected void handleEvent(SQSEvent event, Context context) {\n    System.out.println(event.getRecords().size());\n  }\n}\n```\n\n## Trace propagation\n\nContext propagation for this instrumentation can be done either with X-Ray propagation or regular HTTP propagation. If X-Ray is enabled for instrumented lambda, it will be preferred. If X-Ray is disabled, HTTP propagation will be tried (that is HTTP headers will be read to check for a valid trace context).\n\n### X-Ray propagation\n\nThis instrumentation supports propagating traces using the `X-Amzn-Trace-Id` format for both normal\nrequests and SQS requests. X-Ray propagation is always enabled, there is no need to configure it explicitly.\n\n### HTTP headers based propagation\n\nFor API Gateway (HTTP) requests instrumented by using one of following methods:\n\n- extending `TracingRequestStreamHandler` or `TracingRequestHandler`\n- wrapping with `TracingRequestStreamWrapper` or `TracingRequestApiGatewayWrapper`\n  traces can be propagated with supported HTTP headers (see <https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators>).\n\nIn order to enable requested propagation for a handler, configure it on the SDK you build.\n\n```java\n  static {\n    OpenTelemetrySdk.builder()\n      ...\n      .setPropagators(ContextPropagators.create(B3Propagator.injectingSingleHeader()))\n      .buildAndRegisterGlobal();\n  }\n```\n\nIf using the wrappers, set the `OTEL_PROPAGATORS` environment variable as described [here](https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#propagator).\n",
      "name": "aws-lambda-events-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-events-2.2"
      },
      "semconv": [
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-lambda/aws-lambda-events-2.2",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0",
          "com.amazonaws:aws-lambda-java-events:2.2.1"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                },
                {
                  "name": "faas.trigger",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "This instrumentation builds on top of the `aws-lambda-core-1.0` instrumentation, expanding support to cover the Lambda library, including standard and custom event types.\n",
      "library_link": "https://docs.aws.amazon.com/lambda/latest/dg/java-handler.html",
      "name": "aws-lambda-events-3.11",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-events-3.11"
      },
      "semconv": [
        "Cloud",
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-lambda/aws-lambda-events-3.11",
      "target_versions": {
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0",
          "com.amazonaws:aws-lambda-java-events:3.11.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "cloud.account.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cloud.resource_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                },
                {
                  "name": "faas.trigger",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the experimental span attributes `aws.agent`, `aws.bucket.name`, `aws.queue.url`, `aws.queue.name`, `aws.stream.name`, `aws.table.name`, `aws.lambda.function.arn` and `aws.lambda.function.name` for AWS SDK instrumentation.\n",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation covers the AWS SDK 1.11+ client library, enabling messaging and client spans and metrics for calls to AWS services including DynamoDB, EC2, Kinesis, Lambda, RDS, S3, secrets manager, SNS/SQS and step functions.\n",
      "library_link": "https://aws.amazon.com/sdk-for-java/",
      "name": "aws-sdk-1.11",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-1.11"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-1.11",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-java-sdk-core:[1.10.33,)",
          "com.amazonaws:aws-java-sdk-sqs:[1.10.33,)"
        ],
        "library": [
          "com.amazonaws:aws-java-sdk-core:1.11.0",
          "com.amazonaws:aws-java-sdk-sqs:[1.11.106,1.12.583)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.table_names",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.table_names",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Determines whether errors returned by each individual HTTP request should be recorded as events for the SDK span.",
          "name": "otel.instrumentation.aws-sdk.experimental-record-individual-http-error",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental span attributes `aws.agent`, `aws.lambda.function.arn` and `aws.lambda.function.name` for AWS SDK instrumentation.\n",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether the configured TextMapPropagator should be used to inject into supported messaging attributes (for SQS).",
          "name": "otel.instrumentation.aws-sdk.experimental-use-propagator-for-messaging",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether Generative AI events include full content of user and assistant messages. Note that full content can have data privacy and size concerns and care should be taken when enabling this\n",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation covers the AWS SDK 2.2+ client library, enabling messaging and client spans and metrics for calls to AWS services including DynamoDB, EC2, Kinesis, Lambda, RDS, S3, SNS/SQS and Bedrock.\n",
      "library_link": "https://aws.amazon.com/sdk-for-java/",
      "markdown_content": "# AWS Java SDK v2 Instrumentation\n\nInstrumentation for [AWS Java SDK v2](https://github.com/aws/aws-sdk-java-v2).\n\n## Usage\n\nTo instrument all AWS SDK clients include the `opentelemetry-aws-sdk-2.2-autoconfigure` submodule in your classpath.\n\nTo register instrumentation only on a specific SDK client, register the interceptor when creating it.\n\n```java\nAwsSdkTelemetry telemetry = AwsSdkTelemetry.create(openTelemetry).build();\nDynamoDbClient client = DynamoDbClient.builder()\n  .overrideConfiguration(ClientOverrideConfiguration.builder()\n    .addExecutionInterceptor(telemetry.newExecutionInterceptor()))\n    .build())\n  .build();\n```\n\nFor SQS an additional step is needed\n```java\nSqsClientBuilder sqsClientBuilder = SqsClient.builder();\n...\nSqsClient sqsClient = telemetry.wrap(sqsClientBuilder.build());\n```\n```java\nSqsAsyncClientBuilder sqsAsyncClientBuilder = SqsAsyncClient.builder();\n...\nSqsAsyncClient sqsAsyncClient = telemetry.wrap(sqsAsyncClientBuilder.build());\n```\n\n## Trace propagation\n\nThe AWS SDK instrumentation always injects the trace header into the request\nusing the [AWS Trace Header](https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader) format.\nThis format is the only format recognized by AWS managed services, and populating will allow\npropagating the trace through them.\n\nAdditionally, you can enable an experimental option to use the configured propagator to inject into\nmessage attributes (see [parent README](../../README.md)). This currently supports the following AWS APIs:\n\n- SQS.SendMessage\n- SQS.SendMessageBatch\n- SNS.Publish\n  (SNS.PublishBatch is not supported at the moment because it is not available in the minimum SDK\n  version targeted by the instrumentation)\n\nNote that injection will only happen if, after injection, a maximum of 10 attributes is used to not\nrun over API limitations set by AWS.\n\nIf this does not fulfill your use case, perhaps because you are\nusing the same SDK with a different non-AWS managed service, let us know so we can provide\nconfiguration for this behavior.\n\n## Development\n\n### Testing\n\nSome tests use recorded API responses to run through instrumentation. By default, recordings\nare used, but if needing to add new tests/recordings or update existing ones, run the tests with\nthe `RECORD_WITH_REAL_API` environment variable set. AWS credentials will need to be correctly\nconfigured to work.\n",
      "name": "aws-sdk-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-2.2"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Gen Ai",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-2.2",
      "target_versions": {
        "javaagent": [
          "software.amazon.awssdk:aws-core:[2.2.0,)",
          "software.amazon.awssdk:bedrock-runtime:[2.25.63,)",
          "software.amazon.awssdk:lambda:[2.17.0,)",
          "software.amazon.awssdk:sns:[2.2.0,)",
          "software.amazon.awssdk:sqs:[2.2.0,)"
        ],
        "library": [
          "software.amazon.awssdk:aws-core:2.2.0",
          "software.amazon.awssdk:aws-json-protocol:2.2.0",
          "software.amazon.awssdk:lambda:2.2.0",
          "software.amazon.awssdk:sns:2.2.0",
          "software.amazon.awssdk:sqs:2.2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "GenAI operation duration.",
              "name": "gen_ai.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.token.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Measures number of input and output tokens used.",
              "name": "gen_ai.client.token.usage",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "token"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.global_secondary_indexes",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.limit",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.read_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.write_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.select",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.secretsmanager.secret.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.max_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.stop_sequences",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.temperature",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.top_p",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.response.finish_reasons",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.usage.output_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.global_secondary_indexes",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.limit",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.read_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.write_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.select",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.secretsmanager.secret.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "library_link": "https://learn.microsoft.com/en-us/java/api/overview/azure/core-readme?view=azure-java-stable",
      "name": "azure-core-1.14",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.14"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.14",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.14.0,1.19.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "library_link": "https://learn.microsoft.com/en-us/java/api/overview/azure/core-readme?view=azure-java-stable",
      "name": "azure-core-1.19",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.19"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.19",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.19.0,1.36.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "library_link": "https://learn.microsoft.com/en-us/java/api/overview/azure/core-readme?view=azure-java-stable",
      "name": "azure-core-1.36",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.36"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.36",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.36.0,)"
        ]
      }
    },
    {
      "description": "The c3p0 instrumentation provides connection pool metrics for c3p0 data sources.",
      "library_link": "https://github.com/swaldman/c3p0",
      "markdown_content": "# Library Instrumentation for C3P0 version 0.9 and higher\n\nProvides OpenTelemetry instrumentation for [C3P0](https://www.mchange.com/projects/c3p0/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-c3p0-0.9).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-c3p0-0.9</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-c3p0-0.9:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `PooledDataSource` instances for\ncollecting OpenTelemetry-based metrics.\n\n```java\nC3p0Telemetry c3p0Telemetry;\n\nvoid configure(OpenTelemetry openTelemetry, PooledDataSource dataSource) {\n  c3p0Telemetry = C3p0Telemetry.create(openTelemetry);\n  c3p0Telemetry.registerMetrics(dataSource);\n}\n\nvoid destroy(PooledDataSource dataSource) {\n  c3p0Telemetry.unregisterMetrics(dataSource);\n}\n```\n",
      "name": "c3p0-0.9",
      "scope": {
        "name": "io.opentelemetry.c3p0-0.9"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/c3p0-0.9",
      "target_versions": {
        "javaagent": [
          "com.mchange:c3p0:(,)"
        ],
        "library": [
          "com.mchange:c3p0:0.9.2"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental `camel.uri`, `camel.kafka.partitionKey`, `camel.kafka.key` and `camel.kafka.offset` span attributes.\n",
          "name": "otel.instrumentation.camel.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Apache Camel 2.x applications by generating spans for each route execution. For Camel versions 3.5 and newer, users should instead use the native 'camel-opentelemetry' component provided directly by the Camel project.\n",
      "library_link": "https://camel.apache.org/",
      "name": "camel-2.20",
      "scope": {
        "name": "io.opentelemetry.camel-2.20"
      },
      "semconv": [
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/camel-2.20",
      "target_versions": {
        "javaagent": [
          "org.apache.camel:camel-core:[2.19,3)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "camel.uri",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "camel.uri",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            },
            {
              "attributes": [
                {
                  "name": "camel.uri",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "otel.instrumentation.camel.experimental-span-attributes=true"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "library_link": "https://github.com/apache/cassandra-java-driver",
      "name": "cassandra-3.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-3.0"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-3.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.cassandra:cassandra-driver-core:[3.0,4.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.cassandra.table",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "library_link": "https://github.com/apache/cassandra-java-driver",
      "name": "cassandra-4.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.0"
      },
      "semconv": [
        "Cassandra",
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-4.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.0,4.4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.cassandra.consistency_level",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.dc",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.id",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.idempotence",
                  "type": "BOOLEAN"
                },
                {
                  "name": "db.cassandra.page_size",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.speculative_execution_count",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.table",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "cassandra.consistency.level",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.dc",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.page.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "cassandra.query.idempotent",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "cassandra.speculative_execution.count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "library_link": "https://github.com/apache/cassandra-java-driver",
      "name": "cassandra-4.4",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.4"
      },
      "semconv": [
        "Cassandra",
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-4.4",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.4,]"
        ],
        "library": [
          "com.datastax.oss:java-driver-core:4.4.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.cassandra.consistency_level",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.dc",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.id",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.idempotence",
                  "type": "BOOLEAN"
                },
                {
                  "name": "db.cassandra.page_size",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.speculative_execution_count",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.table",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "cassandra.consistency.level",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.dc",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.page.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "cassandra.query.idempotent",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "cassandra.speculative_execution.count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and metrics for the V1 ClickHouse client.",
      "library_link": "https://github.com/ClickHouse/clickhouse-java",
      "name": "clickhouse-client-v1-0.5",
      "scope": {
        "name": "io.opentelemetry.clickhouse-client-v1-0.5"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/clickhouse/clickhouse-client-v1-0.5",
      "target_versions": {
        "javaagent": [
          "com.clickhouse.client:clickhouse-client:[0.5.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and metrics for the V2 ClickHouse client.",
      "library_link": "https://github.com/ClickHouse/clickhouse-java",
      "name": "clickhouse-client-v2-0.8",
      "scope": {
        "name": "io.opentelemetry.clickhouse-client-v2-0.8"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/clickhouse/clickhouse-client-v2-0.8",
      "target_versions": {
        "javaagent": [
          "com.clickhouse:client-v2:[0.6.4,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "This instrumentation enables database client spans and database client metrics for Couchbase 2.0 operations. It automatically traces key-value operations (get, upsert, replace, remove), view queries, N1QL queries, and cluster management operations.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-2.0",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/couchbase/couchbase-2.0",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2,3)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental span attributes `couchbase.operation_id` and `couchbase.local.address`. Different operation types receive different experimental attributes.\n",
          "name": "otel.instrumentation.couchbase.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Couchbase 2.6 operations. It automatically traces key-value operations (get, upsert, replace, remove), view queries, N1QL queries, and cluster management operations.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-2.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.6"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/couchbase/couchbase-2.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2.6.0,3)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "couchbase.local.address",
                  "type": "STRING"
                },
                {
                  "name": "couchbase.operation_id",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.couchbase.experimental-span-attributes=true"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project for versions 3+. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-3.1",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1,3.1.6)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project for versions 3+. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-3.1.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1.6,3.2.0)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project for versions 3+. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-3.2",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.2",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.2.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the dropwizard metrics instrumentation.",
          "name": "otel.instrumentation.dropwizard-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "The dropwizard-metrics instrumentation for the dropwizard/codahale metrics library produces OpenTelemetry compliant versions of the metrics generated by the Dropwizard MetricRegistry.\nThe Dropwizard metrics API does not have a concept of metric labels/tags/attributes, thus the data produced by this integration might be of very low quality, depending on how the API is used in the instrumented application.\n",
      "disabled_by_default": true,
      "library_link": "https://metrics.dropwizard.io/4.2.0/",
      "name": "dropwizard-metrics-4.0",
      "scope": {
        "name": "io.opentelemetry.dropwizard-metrics-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-metrics-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard.metrics:metrics-core:[4.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the creation of spans for Dropwizard views.",
      "library_link": "https://www.dropwizard.io/en/latest/manual/views.html",
      "name": "dropwizard-views-0.7",
      "scope": {
        "name": "io.opentelemetry.dropwizard-views-0.7"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-views-0.7",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-views:(,3.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.view-telemetry.enabled=true"
        }
      ]
    },
    {
      "description": "This instrumentation extends the elasticsearch-rest-7.0 instrumentation by adding additional `db.elasticsearch.path_parts.id` and `db.elasticsearch.path_parts.index` attributes to Elasticsearch database client spans. Versions 8.10 and later of the client have native support for OpenTelemetry.\n",
      "library_link": "https://www.elastic.co/docs/reference/elasticsearch/clients/java",
      "name": "elasticsearch-api-client-7.16",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-api-client-7.16"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-api-client-7.16",
      "target_versions": {
        "javaagent": [
          "co.elastic.clients:elasticsearch-java:[7.16,7.17.20)",
          "co.elastic.clients:elasticsearch-java:[8.0.0,8.10)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.elasticsearch.path_parts.id",
                  "type": "STRING"
                },
                {
                  "name": "db.elasticsearch.path_parts.index",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.elasticsearch.path_parts.id",
                  "type": "STRING"
                },
                {
                  "name": "db.elasticsearch.path_parts.index",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch REST clients.",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-rest",
      "name": "elasticsearch-rest-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[5.0,6.4)",
          "org.elasticsearch.client:rest:[5.0,6.4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch REST clients.",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-rest",
      "name": "elasticsearch-rest-6.4",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-6.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-6.4",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[6.4,7.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch REST clients.",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-rest",
      "name": "elasticsearch-rest-7.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-7.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-7.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[7.0,)"
        ],
        "library": [
          "org.elasticsearch.client:elasticsearch-rest-client:7.0.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of the experimental span attributes `elasticsearch.action`, `elasticsearch.id`, `elasticsearch.request`, `elasticsearch.request.indices`, `elasticsearch.request.write.routing`, `elasticsearch.request.write.type`, `elasticsearch.response.status`, `elasticsearch.shard.replication.failed`, `elasticsearch.shard.replication.successful`, `elasticsearch.shard.replication.total`, `elasticsearch.type`, and `elasticsearch.version`.\n",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-api/",
      "name": "elasticsearch-transport-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.0.0,5.3.0)",
          "org.elasticsearch:elasticsearch:[5.0.0,5.3.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of `elasticsearch.action`, `elasticsearch.id`, `elasticsearch.request`, `elasticsearch.request.indices`, `elasticsearch.request.search.types`, `elasticsearch.request.write.type`, `elasticsearch.request.write.version`, `elasticsearch.response.status`, `elasticsearch.shard.broadcast.failed`, `elasticsearch.shard.broadcast.successful`, `elasticsearch.shard.broadcast.total`, `elasticsearch.shard.replication.failed`, `elasticsearch.shard.replication.successful`, `elasticsearch.shard.replication.total`, `elasticsearch.type`, and `elasticsearch.version` experimental span attributes.\n",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-api/",
      "name": "elasticsearch-transport-5.3",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.3"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.3",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.3.0,6.0.0)",
          "org.elasticsearch:elasticsearch:[5.3.0,6.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.search.types",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of `elasticsearch.action`, `elasticsearch.id`, `elasticsearch.request`, `elasticsearch.request.indices`, `elasticsearch.request.write.type`, `elasticsearch.request.write.version`, `elasticsearch.response.status`, `elasticsearch.shard.replication.failed`, `elasticsearch.shard.replication.successful`, `elasticsearch.shard.replication.total`, `elasticsearch.type`, and `elasticsearch.version` experimental span attributes.\n",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-api/",
      "name": "elasticsearch-transport-6.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-6.0"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-6.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[6.0.0,)",
          "org.elasticsearch:elasticsearch:[6.0.0,8.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "List of Executor subclasses to be instrumented.",
          "name": "otel.instrumentation.executors.include",
          "type": "list"
        },
        {
          "default": false,
          "description": "Whether to instrument all classes that implement the Executor interface.",
          "name": "otel.instrumentation.executors.include-all",
          "type": "boolean"
        }
      ],
      "description": "The executor instrumentation ensures that context is automatically propagated when using common Java executors (e.g., ThreadPoolExecutor, ScheduledThreadPoolExecutor, ForkJoinPool). When a task is submitted, the current context is captured and bound to the task. Then, when the task eventually runs, even if it\u2019s on a different thread, the instrumentation reactivates that context, enabling consistent correlation across concurrent and asynchronous workflows.\n",
      "library_link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html",
      "name": "executors",
      "scope": {
        "name": "io.opentelemetry.executors"
      },
      "semconv": [],
      "source_path": "instrumentation/executors",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "description": "This instrumentation for Finagle HTTP clients and servers ensures that telemetry is correctly generated by the underlying Netty instrumentation. It augments existing telemetry by bridging the gap between Finagle's abstractions and Netty's pipeline, primarily for context propagation.\n",
      "library_link": "https://github.com/twitter/finagle",
      "name": "finagle-http-23.11",
      "scope": {
        "name": "io.opentelemetry.finagle-http-23.11"
      },
      "semconv": [],
      "source_path": "instrumentation/finagle-http-23.11",
      "target_versions": {
        "javaagent": [
          "com.twitter:finagle-http_2.12:[23.11.0,]",
          "com.twitter:finagle-http_2.13:[23.11.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation for the Finatra web framework augments the telemetry generated by the underlying Netty instrumentation. It provides more specific, high-level context, such as route information, to the spans generated by Netty.",
      "library_link": "https://github.com/twitter/finatra",
      "name": "finatra-2.9",
      "scope": {
        "name": "io.opentelemetry.finatra-2.9"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/finatra-2.9",
      "target_versions": {
        "javaagent": [
          "com.twitter:finatra-http_2.11:[2.9.0,]",
          "com.twitter:finatra-http_2.12:[2.9.0,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Apache Geode cache operations.",
      "library_link": "https://geode.apache.org/",
      "name": "geode-1.4",
      "scope": {
        "name": "io.opentelemetry.geode-1.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/geode-1.4",
      "target_versions": {
        "javaagent": [
          "org.apache.geode:geode-core:[1.4.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for Google HTTP Client requests.",
      "library_link": "https://github.com/googleapis/google-http-java-client",
      "name": "google-http-client-1.19",
      "scope": {
        "name": "io.opentelemetry.google-http-client-1.19"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/google-http-client-1.19",
      "target_versions": {
        "javaagent": [
          "com.google.http-client:google-http-client:[1.19.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enriches existing HTTP server spans with HTTP route information, and optionally enables experimental controller (INTERNAL) spans for Grails applications.\n",
      "library_link": "https://grails.apache.org/",
      "name": "grails-3.0",
      "scope": {
        "name": "io.opentelemetry.grails-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/grails-3.0",
      "target_versions": {
        "javaagent": [
          "org.grails:grails-web-url-mappings:[3.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.controller-telemetry.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Whether GraphQL operation name is added to the span name. WARNING: The GraphQL operation name is provided by the client and can have high cardinality. Use only when the server is not exposed to malicious clients.\n",
          "name": "otel.instrumentation.graphql.add-operation-name-to-span-name.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables sanitization of sensitive information from queries so they aren't added as span attributes.",
          "name": "otel.instrumentation.graphql.query-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for GraphQL Java operations.",
      "library_link": "https://www.graphql-java.com/",
      "markdown_content": "# Library Instrumentation for GraphQL Java version 12.0 to 20.0\n\nProvides OpenTelemetry instrumentation for [GraphQL Java](https://www.graphql-java.com/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-graphql-java-12.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-graphql-java-12.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-graphql-java-12.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a GraphQL Java `Instrumentation` implementation that can be\nadded to an instance of the `GraphQL` to provide OpenTelemetry-based spans.\n\n```java\nvoid configure(OpenTelemetry openTelemetry, GraphQL.Builder builder) {\n  GraphQLTelemetry telemetry = GraphQLTelemetry.builder(openTelemetry).build();\n  builder.instrumentation(telemetry.newInstrumentation());\n}\n```\n",
      "name": "graphql-java-12.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-12.0"
      },
      "semconv": [
        "Graphql"
      ],
      "source_path": "instrumentation/graphql-java/graphql-java-12.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[12,20)"
        ],
        "library": [
          "com.graphql-java:graphql-java:[12.0,19.+)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "graphql.document",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Whether GraphQL operation name is added to the span name. WARNING: The GraphQL operation name is provided by the client and can have high cardinality. Use only when the server is not exposed to malicious clients.\n",
          "name": "otel.instrumentation.graphql.add-operation-name-to-span-name.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables span generation for data fetchers.",
          "name": "otel.instrumentation.graphql.data-fetcher.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables sanitization of sensitive information from queries so they aren't added as span attributes.",
          "name": "otel.instrumentation.graphql.query-sanitizer.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Whether to create spans for trivial data fetchers. A trivial data fetcher is one that simply maps data from an object to a field.",
          "name": "otel.instrumentation.graphql.trivial-data-fetcher.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for GraphQL Java operations.",
      "library_link": "https://www.graphql-java.com/",
      "markdown_content": "# Library Instrumentation for GraphQL Java version 20.0 and higher\n\nProvides OpenTelemetry instrumentation for [GraphQL Java](https://www.graphql-java.com/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-graphql-java-12.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-graphql-java-20.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-graphql-java-20.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a GraphQL Java `Instrumentation` implementation that can be\nadded to an instance of the `GraphQL` to provide OpenTelemetry-based spans.\n\n```java\nvoid configure(OpenTelemetry openTelemetry, GraphQL.Builder builder) {\n  GraphQLTelemetry telemetry = GraphQLTelemetry.builder(openTelemetry).build();\n  builder.instrumentation(telemetry.newInstrumentation());\n}\n```\n",
      "minimum_java_version": 11,
      "name": "graphql-java-20.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-20.0"
      },
      "semconv": [
        "Graphql"
      ],
      "source_path": "instrumentation/graphql-java/graphql-java-20.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[20,)"
        ],
        "library": [
          "com.graphql-java:graphql-java:20.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "graphql.document",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "graphql.document",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.field.name",
                  "type": "STRING"
                },
                {
                  "name": "graphql.field.path",
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.graphql.data-fetcher.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.body.size` and `http.server.response.body.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP server spans and HTTP server metrics for Grizzly applications.",
      "library_link": "https://javaee.github.io/grizzly/httpserverframework.html",
      "name": "grizzly-2.3",
      "scope": {
        "name": "io.opentelemetry.grizzly-2.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/grizzly-2.3",
      "target_versions": {
        "javaagent": [
          "org.glassfish.grizzly:grizzly-http:[2.3,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of request metadata keys. gRPC client instrumentation will capture metadata values corresponding to configured keys as span attributes.\n",
          "name": "otel.instrumentation.grpc.capture-metadata.client.request",
          "type": "list"
        },
        {
          "default": "",
          "description": "A comma-separated list of request metadata keys. gRPC server instrumentation will capture metadata values corresponding to configured keys as span attributes.\n",
          "name": "otel.instrumentation.grpc.capture-metadata.server.request",
          "type": "list"
        },
        {
          "default": true,
          "description": "Determines whether to emit a span event for each individual message received and sent.",
          "name": "otel.instrumentation.grpc.emit-message-events",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes `grpc.received.message_count`, `grpc.sent.message_count` and `grpc.canceled`.\n",
          "name": "otel.instrumentation.grpc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables RPC client spans and metrics, and RPC server spans and metrics for gRPC version 1.6 and above.",
      "library_link": "https://github.com/grpc/grpc-java",
      "markdown_content": "# Library Instrumentation for gRPC 1.6.0+\n\nProvides OpenTelemetry instrumentation for [gRPC](https://grpc.io/).\n\n## Quickstart\n\n### Add the following dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-grpc-1.6).\n\nFor Maven, add the following to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-grpc-1.6</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add the following to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-grpc-1.6:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides the implementation of `ClientInterceptor` and `ServerInterceptor` to provide OpenTelemetry-based spans and context propagation.\n\n```java\n// For client-side, attach the interceptor to your channel builder.\nvoid configureClientInterceptor(OpenTelemetry openTelemetry, NettyChannelBuilder nettyChannelBuilder) {\n  GrpcTelemetry grpcTelemetry = GrpcTelemetry.create(openTelemetry);\n  nettyChannelBuilder.intercept(grpcTelemetry.newClientInterceptor());\n}\n\n// For server-side, attatch the interceptor to your service.\nServerServiceDefinition configureServerInterceptor(OpenTelemetry openTelemetry, ServerServiceDefinition serviceDefinition) {\n  GrpcTelemetry grpcTelemetry = GrpcTelemetry.create(openTelemetry);\n  return ServerInterceptors.intercept(serviceDefinition, grpcTelemetry.newServerInterceptor());\n}\n```\n",
      "name": "grpc-1.6",
      "scope": {
        "name": "io.opentelemetry.grpc-1.6"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Network",
        "Rpc"
      ],
      "source_path": "instrumentation/grpc-1.6",
      "target_versions": {
        "javaagent": [
          "io.grpc:grpc-core:[1.6.0,)"
        ],
        "library": [
          "io.grpc:grpc-core:1.6.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an outbound RPC invocation.",
              "name": "rpc.client.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an inbound RPC invocation.",
              "name": "rpc.server.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an outbound RPC invocation.",
              "name": "rpc.client.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an inbound RPC invocation.",
              "name": "rpc.server.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "grpc.received.message_count",
                  "type": "LONG"
                },
                {
                  "name": "grpc.sent.message_count",
                  "type": "LONG"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "grpc.received.message_count",
                  "type": "LONG"
                },
                {
                  "name": "grpc.sent.message_count",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "otel.instrumentation.grpc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "name": "guava-10.0",
      "scope": {
        "name": "io.opentelemetry.guava-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/guava-10.0",
      "target_versions": {
        "javaagent": [
          "com.google.guava:guava:[10.0,]"
        ],
        "library": [
          "com.google.guava:guava:10.0"
        ]
      }
    },
    {
      "description": "This instrumentation enables RPC server spans for GWT RPC requests.",
      "library_link": "https://www.gwtproject.org/",
      "name": "gwt-2.0",
      "scope": {
        "name": "io.opentelemetry.gwt-2.0"
      },
      "semconv": [
        "Aws"
      ],
      "source_path": "instrumentation/gwt-2.0",
      "target_versions": {
        "javaagent": [
          "com.google.gwt:gwt-servlet:[2.0.0,)",
          "org.gwtproject:gwt-servlet:[2.10.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate operations, including session methods (e.g., `save`, `update`, `delete`), transaction commits, and query executions.\n",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "name": "hibernate-3.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-3.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[3.3.0.GA,4.0.0.Final)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate operations, including session methods (e.g., `save`, `update`, `delete`), transaction commits, and query executions.\n",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "name": "hibernate-4.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-4.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.0.0.Final,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate operations, including session methods (e.g., `save`, `update`, `delete`), transaction commits, and query executions.\n",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "minimum_java_version": 11,
      "name": "hibernate-6.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-6.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[6.0.0.Final,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate stored procedure calls.",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "name": "hibernate-procedure-call-4.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-procedure-call-4.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-procedure-call-4.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.3.0.Final,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation does not emit any telemetry on its own. Instead, it enables context propagation for Hibernate Reactive asynchronous operations.\n",
      "library_link": "https://hibernate.org/reactive/",
      "name": "hibernate-reactive-1.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-reactive-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-reactive-1.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate.reactive:hibernate-reactive-core:(,)"
        ]
      }
    },
    {
      "description": "This instrumentation provides database client metrics for HikariCP 3.0+ connection pools. It reports metrics like connection timeouts, creation time, wait time, and usage time, along with connection pool statistics such as the number of active, idle, and pending connections.\n",
      "library_link": "https://github.com/brettwooldridge/HikariCP",
      "markdown_content": "# Library Instrumentation for HikariCP version 3.0 and higher\n\nProvides OpenTelemetry instrumentation for [HikariCP](https://github.com/brettwooldridge/HikariCP).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-hikaricp-3.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-hikaricp-3.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-hikaricp-3.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a `MetricsTrackerFactory` implementation that can be added to\nan instance of the `HikariConfig` (or `HikariDataSource`) to provide OpenTelemetry-based metrics.\n\n```java\nvoid configure(OpenTelemetry openTelemetry, HikariConfig connectionPoolConfig) {\n  HikariTelemetry telemetry = HikariTelemetry.create(openTelemetry);\n  connectionPoolConfig.setMetricsTrackerFactory(telemetry.createMetricsTrackerFactory());\n}\n```\n",
      "name": "hikaricp-3.0",
      "scope": {
        "name": "io.opentelemetry.hikaricp-3.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/hikaricp-3.0",
      "target_versions": {
        "javaagent": [
          "com.zaxxer:HikariCP:[3.0.0,)"
        ],
        "library": [
          "com.zaxxer:HikariCP:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time it took to create a new connection.",
              "name": "db.client.connections.create_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of connection timeouts that have occurred trying to obtain a connection from the pool.",
              "name": "db.client.connections.timeouts",
              "type": "LONG_SUM",
              "unit": "timeouts"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time between borrowing a connection and returning it to the pool.",
              "name": "db.client.connections.use_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time it took to obtain an open connection from the pool.",
              "name": "db.client.connections.wait_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to create a new connection.",
              "name": "db.client.connection.create_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connection timeouts that have occurred trying to obtain a connection from the pool.",
              "name": "db.client.connection.timeouts",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "timeout"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time between borrowing a connection and returning it to the pool.",
              "name": "db.client.connection.use_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to obtain an open connection from the pool.",
              "name": "db.client.connection.wait_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables the generation of HTTP client spans and HTTP client metrics for requests made using `java.net.HttpURLConnection`.\n",
      "library_link": "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/HttpURLConnection.html",
      "name": "http-url-connection",
      "scope": {
        "name": "io.opentelemetry.http-url-connection"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/http-url-connection",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing the experimental `hystrix.command`, `hystrix.circuit_open` and `hystrix.group` span attributes.",
          "name": "otel.instrumentation.hystrix.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hystrix command executions and fallbacks.",
      "library_link": "https://github.com/Netflix/Hystrix",
      "name": "hystrix-1.4",
      "scope": {
        "name": "io.opentelemetry.hystrix-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/hystrix-1.4",
      "target_versions": {
        "javaagent": [
          "com.netflix.hystrix:hystrix-core:[1.4.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hystrix.circuit_open",
                  "type": "BOOLEAN"
                },
                {
                  "name": "hystrix.command",
                  "type": "STRING"
                },
                {
                  "name": "hystrix.group",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hystrix.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation enables the generation of database client spans and metrics for the InfluxDB Java client.",
      "library_link": "https://github.com/influxdata/influxdb-java",
      "name": "influxdb-2.4",
      "scope": {
        "name": "io.opentelemetry.influxdb-2.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/influxdb-2.4",
      "target_versions": {
        "javaagent": [
          "org.influxdb:influxdb-java:[2.4,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for requests made using the Java HTTP client.",
      "library_link": "https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/package-summary.html",
      "markdown_content": "# Library Instrumentation for Java HTTP Client\n\nProvides OpenTelemetry instrumentation for [Java HTTP Client](https://openjdk.org/groups/net/httpclient/intro.html).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-java-http-client).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-java-http-client</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-java-http-client:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library contains an `HttpClient` wrapper that provides OpenTelemetry-based spans\nand context propagation.\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.httpclient.JavaHttpClientTelemetry;\nimport java.net.http.HttpClient;\n\nimport java.util.concurrent.ExecutorService;\n\npublic class JavaHttpClientConfiguration {\n\n  //Use this HttpClient implementation for making standard http client calls.\n  public HttpClient createTracedClient(OpenTelemetry openTelemetry) {\n    return JavaHttpClientTelemetry.builder(openTelemetry).build().newHttpClient(createClient());\n  }\n\n  //your configuration of the Java HTTP Client goes here:\n  private HttpClient createClient() {\n    return HttpClient.newBuilder().build();\n  }\n}\n```\n",
      "minimum_java_version": 11,
      "name": "java-http-client",
      "scope": {
        "name": "io.opentelemetry.java-http-client"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/java-http-client",
      "target_versions": {
        "javaagent": [
          "Java 11+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.body.size` and `http.server.response.body.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP server spans and HTTP server metrics for the Java HTTP server.",
      "library_link": "https://docs.oracle.com/en/java/javase/21/docs/api/jdk.httpserver/module-summary.html",
      "markdown_content": "# Library Instrumentation for Java HTTP Server\n\nProvides OpenTelemetry instrumentation for [Java HTTP Server](https://docs.oracle.com/en/java/javase/21/docs/api/jdk.httpserver/module-summary.html).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-java-http-server).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-java-http-server</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-java-http-server:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library contains a `Filter` wrapper that provides OpenTelemetry-based spans\nand context propagation.\n\n```java\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\n\nimport com.sun.net.httpserver.HttpContext;\nimport com.sun.net.httpserver.HttpServer;\n\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\n\npublic class Application {\n\n  static void main(String args) throws IOException {\n\n    final HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);\n    final HttpContext context =\n        server.createContext(\n            \"/\",\n            ctx -> {\n              // http logic\n            });\n\n    OpenTelemetry openTelemetry = //...\n\n    JavaHttpServerTelemetry.create(openTelemetry).configure(context);\n  }\n}\n```\n",
      "name": "java-http-server",
      "scope": {
        "name": "io.opentelemetry.java-http-server"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/java-http-server",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enriches existing HTTP server spans with route information, it does not emit any telemetry on its own.",
      "library_link": "https://javalin.io/",
      "minimum_java_version": 11,
      "name": "javalin-5.0",
      "scope": {
        "name": "io.opentelemetry.javalin-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/javalin-5.0",
      "target_versions": {
        "javaagent": [
          "io.javalin:javalin:[5.0.0,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "jaxrs-1.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-1.0",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:jsr311-api:[0.5,)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-annotations"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-annotations",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:javax.ws.rs-api:[,]"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-cxf-3.2",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-cxf-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-cxf-3.2",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxrs:[3.2,4)",
          "org.apache.tomee:openejb-cxf-rs:(8,)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-jersey-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-jersey-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-jersey-2.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.containers:jersey-container-servlet:[2.0,3.0.0)",
          "org.glassfish.jersey.core:jersey-server:[2.0,3.0.0)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-resteasy-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-jaxrs:[3.0.0.Final,3.1.0.Final)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.5.0.Final,4)"
        ]
      }
    },
    {
      "name": "jaxrs-2.0-resteasy-3.1",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[4.0.0.Final,6)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.1.0.Final,3.5.0.Final)"
        ]
      }
    },
    {
      "name": "jaxrs-3.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-annotations"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-annotations",
      "target_versions": {
        "javaagent": [
          "jakarta.ws.rs:jakarta.ws.rs-api:[3.0.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-jersey-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-jersey-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-jersey-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.core:jersey-server:[3.0.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-resteasy-6.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-resteasy-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-resteasy-6.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[6.0.0.Final,)"
        ]
      }
    },
    {
      "name": "jaxws-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0",
      "target_versions": {
        "javaagent": [
          "javax.xml.ws:jaxws-api:[2.0,]"
        ]
      }
    },
    {
      "name": "jaxws-2.0-axis2-1.6",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0-axis2-1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0-axis2-1.6",
      "target_versions": {
        "javaagent": [
          "org.apache.axis2:axis2-jaxws:[1.6.0,)"
        ]
      }
    },
    {
      "name": "jaxws-cxf-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-cxf-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-cxf-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxws:[3.0.0,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "jaxws-jws-api-1.1",
      "scope": {
        "name": "io.opentelemetry.jaxws-jws-api-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-jws-api-1.1",
      "target_versions": {
        "javaagent": [
          "javax.jws:javax.jws-api:[1.1,]"
        ]
      }
    },
    {
      "name": "jaxws-metro-2.2",
      "scope": {
        "name": "io.opentelemetry.jaxws-metro-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-metro-2.2",
      "target_versions": {
        "javaagent": [
          "com.sun.xml.ws:jaxws-rt:[2.2.0.1,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-appender-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-appender-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-appender-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-mdc-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-mdc-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-mdc-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": false,
          "description": "Enables instrumentation of JDBC datasource connections.",
          "name": "otel.instrumentation.jdbc-datasource.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Sets whether the query parameters should be captured as span attributes named <code>db.query.parameter.&lt;key&gt;</code>. Enabling this option disables the statement sanitization.<p>WARNING: captured query parameters may contain sensitive information such as passwords, personally identifiable information or protected health info.\n",
          "name": "otel.instrumentation.jdbc.experimental.capture-query-parameters",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental instrumentation to create spans for COMMIT and ROLLBACK operations.",
          "name": "otel.instrumentation.jdbc.experimental.transaction.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables statement sanitization for database queries. Takes precedent to otel.instrumentation.common.db-statement-sanitizer.enabled.",
          "name": "otel.instrumentation.jdbc.statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "The JDBC instrumentation provides database client spans and metrics. Each call produces a span named after the SQL verb, enriched with standard DB client attributes (system, database, operation, sanitized statement, peer address) and error details if an exception occurs.\nThere is also a \"jdbc-datasource\" instrumentation that creates spans for datasource connections, but is disabled by default due to the volume of telemetry produced.\n",
      "library_link": "https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html",
      "markdown_content": "# Library Instrumentation for JDBC\n\nProvides OpenTelemetry instrumentation for\n[Java JDBC API](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-jdbc).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-jdbc</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThere are two possible ways to activate the OpenTelemetry JDBC instrumentation. The first way is more preferable for\nDI frameworks which uses connection pools, as it wraps a `DataSource` with a special OpenTelemetry wrapper. The second\none requires to change the connection URL and switch to use a special OpenTelemetry driver.\n\n#### Datasource way\n\nIf your application uses a DataSource, simply wrap your current DataSource object with `OpenTelemetryDataSource`.\n`OpenTelemetryDataSource` has a constructor method that accepts the `DataSource` to wrap. This is by far the simplest\nmethod especially if you use a dependency injection (DI) frameworks such as\n[Spring Framework](https://spring.io/projects/spring-framework), [Micronaut](https://micronaut.io),\n[Quarkus](https://quarkus.io), or [Guice](https://github.com/google/guice).\n\n```java\nimport org.apache.commons.dbcp2.BasicDataSource;\nimport org.springframework.context.annotation.Configuration;\nimport io.opentelemetry.instrumentation.jdbc.datasource.OpenTelemetryDataSource;\n\n@Configuration\npublic class DataSourceConfig {\n\n  @Bean\n  public DataSource dataSource() {\n    BasicDataSource dataSource = new BasicDataSource();\n    dataSource.setDriverClassName(\"org.postgresql.Driver\");\n    dataSource.setUrl(\"jdbc:postgresql://127.0.0.1:5432/example\");\n    dataSource.setUsername(\"postgres\");\n    dataSource.setPassword(\"root\");\n    return JdbcTelemetry.create(openTelemetry).wrap(dataSource);\n  }\n\n}\n```\n\n#### Driver way\n\n1. Activate tracing for JDBC connections by setting `jdbc:otel:` prefix to the JDBC URL, e.g. `jdbc:otel:h2:mem:test`.\n\n2. Set the driver class to `io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver`.\n\n3. Inject `OpenTelemetry` into `io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver` _before the initialization of the database connection pool_.\nYou can do this with the `void setOpenTelemetry(OpenTelemetry openTelemetry)` method of `io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver`.\nAnother way is to use `OpenTelemetryDriver.install(OpenTelemetry openTelemetry)`.\n",
      "name": "jdbc",
      "scope": {
        "name": "io.opentelemetry.jdbc"
      },
      "semconv": [],
      "source_path": "instrumentation/jdbc",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "name": "jedis-1.4",
      "scope": {
        "name": "io.opentelemetry.jedis-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-1.4",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[1.4.0,3.0.0)"
        ]
      }
    },
    {
      "name": "jedis-3.0",
      "scope": {
        "name": "io.opentelemetry.jedis-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-3.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[3.0.0,4)"
        ]
      }
    },
    {
      "name": "jedis-4.0",
      "scope": {
        "name": "io.opentelemetry.jedis-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-4.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[4.0.0-beta1,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jetty-11.0",
      "scope": {
        "name": "io.opentelemetry.jetty-11.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-11.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[11, 12)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "jetty-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-12.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[12,)"
        ]
      }
    },
    {
      "name": "jetty-8.0",
      "scope": {
        "name": "io.opentelemetry.jetty-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-8.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[8.0.0.v20110901,11)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "jetty-httpclient-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-12.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[12,)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:12.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jetty-httpclient-9.2",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-9.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-9.2",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[9.2,10)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:[9.2.0.v20140526,9.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jms-1.1",
      "scope": {
        "name": "io.opentelemetry.jms-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-1.1",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:(,3)",
          "javax.jms:javax.jms-api:(,)",
          "javax.jms:jms-api:(,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jms-3.0",
      "scope": {
        "name": "io.opentelemetry.jms-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-3.0",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:[3.0.0,)"
        ]
      }
    },
    {
      "name": "jodd-http-4.2",
      "scope": {
        "name": "io.opentelemetry.jodd-http-4.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jodd-http-4.2",
      "target_versions": {
        "javaagent": [
          "org.jodd:jodd-http:[4.2.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jsf-mojarra-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-1.2",
      "target_versions": {
        "javaagent": [
          "com.sun.faces:jsf-impl:[2.0,2.1)",
          "com.sun.faces:jsf-impl:[2.1,2.2)",
          "javax.faces:jsf-impl:[1.2,2)",
          "org.glassfish:jakarta.faces:[2.3.9,3)",
          "org.glassfish:javax.faces:[2.0.7,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-mojarra-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish:jakarta.faces:[3,)"
        ]
      }
    },
    {
      "name": "jsf-myfaces-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-1.2",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[1.2,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-myfaces-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[3,)"
        ]
      }
    },
    {
      "name": "jsp-2.3",
      "scope": {
        "name": "io.opentelemetry.jsp-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/jsp-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jasper:[7.0.19,10)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the capture of the experimental consumer attribute \"kafka.record.queue_time_ms\"",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enable context propagation for kafka message producers.",
          "name": "otel.instrumentation.kafka.producer-propagation.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables messaging spans and metrics for Apache Kafka 0.11 clients. It automatically traces message production and consumption, propagates context, and emits metrics for production and consumption.\n",
      "library_link": "https://kafka.apache.org/",
      "name": "kafka-clients-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-clients:[0.11.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation provides a library integration that enables messaging spans and metrics for Apache Kafka 2.6+ clients.\n",
      "library_link": "https://kafka.apache.org/",
      "markdown_content": "# Library instrumentation for Kafka Clients version 2.6 and higher\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-kafka-clients-2.6).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-kafka-clients-2.6</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-kafka-clients-2.6:OPENTELEMETRY_VERSION\")\n```\n\n### Usage (Tracing)\n\nThere are two options for capturing traces, either using interceptors or wrapping clients, both described below.\n\n#### Using interceptors\n\nThe Kafka clients API provides a way to \"intercept\" messages before they are sent to the brokers as well as messages received from the broker before being passed to the application.\nThe OpenTelemetry instrumented Kafka library provides two interceptors to be configured to add tracing information automatically.\nThe interceptor class has to be set in the properties bag used to create the Kafka client.\n\nUse the `TracingProducerInterceptor` for the producer in order to create a \"send\" span automatically, each time a message is sent.\n\n```java\nprops.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingProducerInterceptor.class.getName());\n```\n\nUse the `TracingConsumerInterceptor` for the consumer in order to create a \"receive\" span automatically, each time a message is received.\n\n```java\nprops.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingConsumerInterceptor.class.getName());\n```\n\n#### Wrapping clients\n\nThe other way is by wrapping the Kafka client with a tracing enabled Kafka client.\n\nAssuming you have a `Producer<K, V> producer` instance, you can wrap it in the following way.\n\n```java\nKafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());\nProducer<String, String> tracingProducer = telemetry.wrap(producer);\n```\n\nThen use the `tracingProducer` as usual for sending messages to the Kafka cluster.\n\nAssuming you have a `Consumer<K, V> consumer` instance, you can wrap it in the following way.\n\n```java\nKafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());\nConsumer<String, String> tracingConsumer = telemetry.wrap(this.consumer);\n```\n\nThen use the `tracingConsumer` as usual for receiving messages from the Kafka cluster.\n\n### Usage (Metrics)\n\nThe Kafka client exposes metrics via `org.apache.kafka.common.metrics.MetricsReporter` interface.\nOpenTelemetry provides an implementation that bridges the metrics into OpenTelemetry.\n\nTo use, merge the config properties\nfrom `KafkaTelemetry.create(OpenTelemetry).metricConfigProperties()`\nwith the configuration used when creating your producer or consumer.\n\nNote: Kafka reports several metrics at multiple attribute granularities. For\nexample, `records-consumed-total` is reported with attribute key `[client-id]`\nand `[client-id, topic]`. If you analyze the sum of records consumed, ignoring dimensions, backends\nare likely to double count. The implementation detects this scenario and only records the most\ngranular set of attributes available. In the case\nof `records-consumed-total`, it reports `[client-id, topic]` and ignores `[client-id]`.\n\nThe following table shows the full set of metrics exposed by the kafka client, and the corresponding\nOpenTelemetry metric each maps to (if available). Empty values in the Instrument Name, Instrument\nDescription, etc column indicates there is no registered mapping for the metric and data is NOT\ncollected.\n\n| Metric Group                     | Metric Name                                 | Attribute Keys                  | Instrument Name                                            | Instrument Description                                                                                                                            | Instrument Type             |\n|----------------------------------|---------------------------------------------|---------------------------------|------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|\n| `consumer-coordinator-metrics`   | `assigned-partitions`                       | `client-id`                     | `kafka.consumer.assigned_partitions`                       | The number of partitions currently assigned to this consumer.                                                                                     | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-latency-avg`                        | `client-id`                     | `kafka.consumer.commit_latency_avg`                        | The average time taken for a commit request.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-latency-max`                        | `client-id`                     | `kafka.consumer.commit_latency_max`                        | The max time taken for a commit request.                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-rate`                               | `client-id`                     | `kafka.consumer.commit_rate`                               | The number of commit calls per second.                                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-total`                              | `client-id`                     | `kafka.consumer.commit_total`                              | The total number of commit calls.                                                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `failed-rebalance-rate-per-hour`            | `client-id`                     | `kafka.consumer.failed_rebalance_rate_per_hour`            | The number of failed rebalance events per hour.                                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `failed-rebalance-total`                    | `client-id`                     | `kafka.consumer.failed_rebalance_total`                    | The total number of failed rebalance events.                                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `heartbeat-rate`                            | `client-id`                     | `kafka.consumer.heartbeat_rate`                            | The number of heartbeats per second.                                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `heartbeat-response-time-max`               | `client-id`                     | `kafka.consumer.heartbeat_response_time_max`               | The max time taken to receive a response to a heartbeat request.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `heartbeat-total`                           | `client-id`                     | `kafka.consumer.heartbeat_total`                           | The total number of heartbeats.                                                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `join-rate`                                 | `client-id`                     | `kafka.consumer.join_rate`                                 | The number of group joins per second.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `join-time-avg`                             | `client-id`                     | `kafka.consumer.join_time_avg`                             | The average time taken for a group rejoin.                                                                                                        | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `join-time-max`                             | `client-id`                     | `kafka.consumer.join_time_max`                             | The max time taken for a group rejoin.                                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `join-total`                                | `client-id`                     | `kafka.consumer.join_total`                                | The total number of group joins.                                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `last-heartbeat-seconds-ago`                | `client-id`                     | `kafka.consumer.last_heartbeat_seconds_ago`                | The number of seconds since the last coordinator heartbeat was sent.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `last-rebalance-seconds-ago`                | `client-id`                     | `kafka.consumer.last_rebalance_seconds_ago`                | The number of seconds since the last successful rebalance event.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-assigned-latency-avg`            | `client-id`                     | `kafka.consumer.partition_assigned_latency_avg`            | The average time taken for a partition-assigned rebalance listener callback.                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-assigned-latency-max`            | `client-id`                     | `kafka.consumer.partition_assigned_latency_max`            | The max time taken for a partition-assigned rebalance listener callback.                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-lost-latency-avg`                | `client-id`                     | `kafka.consumer.partition_lost_latency_avg`                | The average time taken for a partition-lost rebalance listener callback.                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-lost-latency-max`                | `client-id`                     | `kafka.consumer.partition_lost_latency_max`                | The max time taken for a partition-lost rebalance listener callback.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-revoked-latency-avg`             | `client-id`                     | `kafka.consumer.partition_revoked_latency_avg`             | The average time taken for a partition-revoked rebalance listener callback.                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-revoked-latency-max`             | `client-id`                     | `kafka.consumer.partition_revoked_latency_max`             | The max time taken for a partition-revoked rebalance listener callback.                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-latency-avg`                     | `client-id`                     | `kafka.consumer.rebalance_latency_avg`                     | The average time taken for a group to complete a successful rebalance, which may be composed of several failed re-trials until it succeeded.      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-latency-max`                     | `client-id`                     | `kafka.consumer.rebalance_latency_max`                     | The max time taken for a group to complete a successful rebalance, which may be composed of several failed re-trials until it succeeded.          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-latency-total`                   | `client-id`                     | `kafka.consumer.rebalance_latency_total`                   | The total number of milliseconds this consumer has spent in successful rebalances since creation.                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `rebalance-rate-per-hour`                   | `client-id`                     | `kafka.consumer.rebalance_rate_per_hour`                   | The number of successful rebalance events per hour, each event is composed of several failed re-trials until it succeeded.                        | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-total`                           | `client-id`                     | `kafka.consumer.rebalance_total`                           | The total number of successful rebalance events, each event is composed of several failed re-trials until it succeeded.                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `sync-rate`                                 | `client-id`                     | `kafka.consumer.sync_rate`                                 | The number of group syncs per second.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `sync-time-avg`                             | `client-id`                     | `kafka.consumer.sync_time_avg`                             | The average time taken for a group sync.                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `sync-time-max`                             | `client-id`                     | `kafka.consumer.sync_time_max`                             | The max time taken for a group sync.                                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `sync-total`                                | `client-id`                     | `kafka.consumer.sync_total`                                | The total number of group syncs.                                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `bytes-consumed-rate`                       | `client-id`,`topic`             | `kafka.consumer.bytes_consumed_rate`                       | The average number of bytes consumed per second.                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `bytes-consumed-total`                      | `client-id`,`topic`             | `kafka.consumer.bytes_consumed_total`                      | The total number of bytes consumed.                                                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `fetch-latency-avg`                         | `client-id`                     | `kafka.consumer.fetch_latency_avg`                         | The average time taken for a fetch request.                                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-latency-max`                         | `client-id`                     | `kafka.consumer.fetch_latency_max`                         | The max time taken for any fetch request.                                                                                                         | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-rate`                                | `client-id`                     | `kafka.consumer.fetch_rate`                                | The number of fetch requests per second.                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-size-avg`                            | `client-id`,`topic`             | `kafka.consumer.fetch_size_avg`                            | The average number of bytes fetched per request.                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-size-max`                            | `client-id`,`topic`             | `kafka.consumer.fetch_size_max`                            | The maximum number of bytes fetched per request.                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-throttle-time-avg`                   | `client-id`                     | `kafka.consumer.fetch_throttle_time_avg`                   | The average throttle time in ms.                                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-throttle-time-max`                   | `client-id`                     | `kafka.consumer.fetch_throttle_time_max`                   | The maximum throttle time in ms.                                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-total`                               | `client-id`                     | `kafka.consumer.fetch_total`                               | The total number of fetch requests.                                                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `records-consumed-rate`                     | `client-id`,`topic`             | `kafka.consumer.records_consumed_rate`                     | The average number of records consumed per second.                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-consumed-total`                    | `client-id`,`topic`             | `kafka.consumer.records_consumed_total`                    | The total number of records consumed.                                                                                                             | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `records-lag`                               | `client-id`,`topic`,`partition` | `kafka.consumer.records_lag`                               | The latest lag of the partition.                                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lag-avg`                           | `client-id`,`topic`,`partition` | `kafka.consumer.records_lag_avg`                           | The average lag of the partition.                                                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lag-max`                           | `client-id`,`topic`,`partition` | `kafka.consumer.records_lag_max`                           | The maximum lag in terms of number of records for any partition in this window. NOTE: This is based on current offset and not committed offset.   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lead`                              | `client-id`,`topic`,`partition` | `kafka.consumer.records_lead`                              | The latest lead of the partition.                                                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lead-avg`                          | `client-id`,`topic`,`partition` | `kafka.consumer.records_lead_avg`                          | The average lead of the partition.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lead-min`                          | `client-id`,`topic`,`partition` | `kafka.consumer.records_lead_min`                          | The minimum lead in terms of number of records for any partition in this window.                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-per-request-avg`                   | `client-id`,`topic`             | `kafka.consumer.records_per_request_avg`                   | The average number of records in each request.                                                                                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `commit-sync-time-ns-total`                 | `client-id`                     | `kafka.consumer.commit_sync_time_ns_total`                 | The total time the consumer has spent in commitSync in nanoseconds.                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `committed-time-ns-total`                   | `client-id`                     | `kafka.consumer.committed_time_ns_total`                   | The total time the consumer has spent in committed in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `connection-close-rate`                     | `client-id`                     | `kafka.consumer.connection_close_rate`                     | The number of connections closed per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `connection-close-total`                    | `client-id`                     | `kafka.consumer.connection_close_total`                    | The total number of connections closed.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `connection-count`                          | `client-id`                     | `kafka.consumer.connection_count`                          | The current number of active connections.                                                                                                         | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `connection-creation-rate`                  | `client-id`                     | `kafka.consumer.connection_creation_rate`                  | The number of new connections established per second.                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `connection-creation-total`                 | `client-id`                     | `kafka.consumer.connection_creation_total`                 | The total number of new connections established.                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `failed-authentication-rate`                | `client-id`                     | `kafka.consumer.failed_authentication_rate`                | The number of connections with failed authentication per second.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `failed-authentication-total`               | `client-id`                     | `kafka.consumer.failed_authentication_total`               | The total number of connections with failed authentication.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `failed-reauthentication-rate`              | `client-id`                     | `kafka.consumer.failed_reauthentication_rate`              | The number of failed re-authentication of connections per second.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `failed-reauthentication-total`             | `client-id`                     | `kafka.consumer.failed_reauthentication_total`             | The total number of failed re-authentication of connections.                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `io-ratio`                                  | `client-id`                     | `kafka.consumer.io_ratio`                                  | *Deprecated* The fraction of time the I/O thread spent doing I/O.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-time-ns-avg`                            | `client-id`                     | `kafka.consumer.io_time_ns_avg`                            | The average length of time for I/O per select call in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-time-ns-total`                          | `client-id`                     | `kafka.consumer.io_time_ns_total`                          | The total time the I/O thread spent doing I/O.                                                                                                    | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `io-wait-ratio`                             | `client-id`                     | `kafka.consumer.io_wait_ratio`                             | *Deprecated* The fraction of time the I/O thread spent waiting.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-wait-time-ns-avg`                       | `client-id`                     | `kafka.consumer.io_wait_time_ns_avg`                       | The average length of time the I/O thread spent waiting for a socket ready for reads or writes in nanoseconds.                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-wait-time-ns-total`                     | `client-id`                     | `kafka.consumer.io_wait_time_ns_total`                     | The total time the I/O thread spent waiting.                                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `io-waittime-total`                         | `client-id`                     | `kafka.consumer.io_waittime_total`                         | *Deprecated* The total time the I/O thread spent waiting.                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `iotime-total`                              | `client-id`                     | `kafka.consumer.iotime_total`                              | *Deprecated* The total time the I/O thread spent doing I/O.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `last-poll-seconds-ago`                     | `client-id`                     | `kafka.consumer.last_poll_seconds_ago`                     | The number of seconds since the last poll() invocation.                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `network-io-rate`                           | `client-id`                     | `kafka.consumer.network_io_rate`                           | The number of network operations (reads or writes) on all connections per second.                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `network-io-total`                          | `client-id`                     | `kafka.consumer.network_io_total`                          | The total number of network operations (reads or writes) on all connections.                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `poll-idle-ratio-avg`                       | `client-id`                     | `kafka.consumer.poll_idle_ratio_avg`                       | The average fraction of time the consumer's poll() is idle as opposed to waiting for the user code to process records.                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `reauthentication-latency-avg`              | `client-id`                     | `kafka.consumer.reauthentication_latency_avg`              | The average latency observed due to re-authentication.                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `reauthentication-latency-max`              | `client-id`                     | `kafka.consumer.reauthentication_latency_max`              | The max latency observed due to re-authentication.                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `select-rate`                               | `client-id`                     | `kafka.consumer.select_rate`                               | The number of times the I/O layer checked for new I/O to perform per second.                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `select-total`                              | `client-id`                     | `kafka.consumer.select_total`                              | The total number of times the I/O layer checked for new I/O to perform.                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `successful-authentication-no-reauth-total` | `client-id`                     | `kafka.consumer.successful_authentication_no_reauth_total` | The total number of connections with successful authentication where the client does not support re-authentication.                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `successful-authentication-rate`            | `client-id`                     | `kafka.consumer.successful_authentication_rate`            | The number of connections with successful authentication per second.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `successful-authentication-total`           | `client-id`                     | `kafka.consumer.successful_authentication_total`           | The total number of connections with successful authentication.                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `successful-reauthentication-rate`          | `client-id`                     | `kafka.consumer.successful_reauthentication_rate`          | The number of successful re-authentication of connections per second.                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `successful-reauthentication-total`         | `client-id`                     | `kafka.consumer.successful_reauthentication_total`         | The total number of successful re-authentication of connections.                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `time-between-poll-avg`                     | `client-id`                     | `kafka.consumer.time_between_poll_avg`                     | The average delay between invocations of poll() in milliseconds.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `time-between-poll-max`                     | `client-id`                     | `kafka.consumer.time_between_poll_max`                     | The max delay between invocations of poll() in milliseconds.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `incoming-byte-rate`                        | `client-id`,`node-id`           | `kafka.consumer.incoming_byte_rate`                        | The number of bytes read off all sockets per second.                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `incoming-byte-total`                       | `client-id`,`node-id`           | `kafka.consumer.incoming_byte_total`                       | The total number of bytes read off all sockets.                                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-node-metrics`          | `outgoing-byte-rate`                        | `client-id`,`node-id`           | `kafka.consumer.outgoing_byte_rate`                        | The number of outgoing bytes sent to all servers per second.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `outgoing-byte-total`                       | `client-id`,`node-id`           | `kafka.consumer.outgoing_byte_total`                       | The total number of outgoing bytes sent to all servers.                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-node-metrics`          | `request-latency-avg`                       | `client-id`,`node-id`           | `kafka.consumer.request_latency_avg`                       | The average request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-latency-max`                       | `client-id`,`node-id`           | `kafka.consumer.request_latency_max`                       | The maximum request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-rate`                              | `client-id`,`node-id`           | `kafka.consumer.request_rate`                              | The number of requests sent per second.                                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-size-avg`                          | `client-id`,`node-id`           | `kafka.consumer.request_size_avg`                          | The average size of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-size-max`                          | `client-id`,`node-id`           | `kafka.consumer.request_size_max`                          | The maximum size of any request sent.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-total`                             | `client-id`,`node-id`           | `kafka.consumer.request_total`                             | The total number of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-node-metrics`          | `response-rate`                             | `client-id`,`node-id`           | `kafka.consumer.response_rate`                             | The number of responses received per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `response-total`                            | `client-id`,`node-id`           | `kafka.consumer.response_total`                            | The total number of responses received.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `batch-size-avg`                            | `client-id`                     | `kafka.producer.batch_size_avg`                            | The average number of bytes sent per partition per-request.                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `batch-size-max`                            | `client-id`                     | `kafka.producer.batch_size_max`                            | The max number of bytes sent per partition per-request.                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `batch-split-rate`                          | `client-id`                     | `kafka.producer.batch_split_rate`                          | The average number of batch splits per second.                                                                                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `batch-split-total`                         | `client-id`                     | `kafka.producer.batch_split_total`                         | The total number of batch splits.                                                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `buffer-available-bytes`                    | `client-id`                     | `kafka.producer.buffer_available_bytes`                    | The total amount of buffer memory that is not being used (either unallocated or in the free list).                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `buffer-exhausted-rate`                     | `client-id`                     | `kafka.producer.buffer_exhausted_rate`                     | The average per-second number of record sends that are dropped due to buffer exhaustion.                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `buffer-exhausted-total`                    | `client-id`                     | `kafka.producer.buffer_exhausted_total`                    | The total number of record sends that are dropped due to buffer exhaustion.                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `buffer-total-bytes`                        | `client-id`                     | `kafka.producer.buffer_total_bytes`                        | The maximum amount of buffer memory the client can use (whether or not it is currently used).                                                     | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `bufferpool-wait-ratio`                     | `client-id`                     | `kafka.producer.bufferpool_wait_ratio`                     | The fraction of time an appender waits for space allocation.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `bufferpool-wait-time-ns-total`             | `client-id`                     | `kafka.producer.bufferpool_wait_time_ns_total`             | The total time in nanoseconds an appender waits for space allocation.                                                                             | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `bufferpool-wait-time-total`                | `client-id`                     | `kafka.producer.bufferpool_wait_time_total`                | *Deprecated* The total time an appender waits for space allocation.                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `compression-rate-avg`                      | `client-id`                     | `kafka.producer.compression_rate_avg`                      | The average compression rate of record batches, defined as the average ratio of the compressed batch size over the uncompressed size.             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-close-rate`                     | `client-id`                     | `kafka.producer.connection_close_rate`                     | The number of connections closed per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-close-total`                    | `client-id`                     | `kafka.producer.connection_close_total`                    | The total number of connections closed.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `connection-count`                          | `client-id`                     | `kafka.producer.connection_count`                          | The current number of active connections.                                                                                                         | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-creation-rate`                  | `client-id`                     | `kafka.producer.connection_creation_rate`                  | The number of new connections established per second.                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-creation-total`                 | `client-id`                     | `kafka.producer.connection_creation_total`                 | The total number of new connections established.                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `failed-authentication-rate`                | `client-id`                     | `kafka.producer.failed_authentication_rate`                | The number of connections with failed authentication per second.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `failed-authentication-total`               | `client-id`                     | `kafka.producer.failed_authentication_total`               | The total number of connections with failed authentication.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `failed-reauthentication-rate`              | `client-id`                     | `kafka.producer.failed_reauthentication_rate`              | The number of failed re-authentication of connections per second.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `failed-reauthentication-total`             | `client-id`                     | `kafka.producer.failed_reauthentication_total`             | The total number of failed re-authentication of connections.                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `flush-time-ns-total`                       | `client-id`                     | `kafka.producer.flush_time_ns_total`                       | Total time producer has spent in flush in nanoseconds.                                                                                            | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `io-ratio`                                  | `client-id`                     | `kafka.producer.io_ratio`                                  | *Deprecated* The fraction of time the I/O thread spent doing I/O.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-time-ns-avg`                            | `client-id`                     | `kafka.producer.io_time_ns_avg`                            | The average length of time for I/O per select call in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-time-ns-total`                          | `client-id`                     | `kafka.producer.io_time_ns_total`                          | The total time the I/O thread spent doing I/O.                                                                                                    | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `io-wait-ratio`                             | `client-id`                     | `kafka.producer.io_wait_ratio`                             | *Deprecated* The fraction of time the I/O thread spent waiting.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-wait-time-ns-avg`                       | `client-id`                     | `kafka.producer.io_wait_time_ns_avg`                       | The average length of time the I/O thread spent waiting for a socket ready for reads or writes in nanoseconds.                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-wait-time-ns-total`                     | `client-id`                     | `kafka.producer.io_wait_time_ns_total`                     | The total time the I/O thread spent waiting.                                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `io-waittime-total`                         | `client-id`                     | `kafka.producer.io_waittime_total`                         | *Deprecated* The total time the I/O thread spent waiting.                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `iotime-total`                              | `client-id`                     | `kafka.producer.iotime_total`                              | *Deprecated* The total time the I/O thread spent doing I/O.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `metadata-age`                              | `client-id`                     | `kafka.producer.metadata_age`                              | The age in seconds of the current producer metadata being used.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `metadata-wait-time-ns-total`               | `client-id`                     | `kafka.producer.metadata_wait_time_ns_total`               | Total time producer has spent waiting on topic metadata in nanoseconds.                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `network-io-rate`                           | `client-id`                     | `kafka.producer.network_io_rate`                           | The number of network operations (reads or writes) on all connections per second.                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `network-io-total`                          | `client-id`                     | `kafka.producer.network_io_total`                          | The total number of network operations (reads or writes) on all connections.                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `produce-throttle-time-avg`                 | `client-id`                     | `kafka.producer.produce_throttle_time_avg`                 | The average time in ms a request was throttled by a broker.                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `produce-throttle-time-max`                 | `client-id`                     | `kafka.producer.produce_throttle_time_max`                 | The maximum time in ms a request was throttled by a broker.                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `reauthentication-latency-avg`              | `client-id`                     | `kafka.producer.reauthentication_latency_avg`              | The average latency observed due to re-authentication.                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `reauthentication-latency-max`              | `client-id`                     | `kafka.producer.reauthentication_latency_max`              | The max latency observed due to re-authentication.                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-queue-time-avg`                     | `client-id`                     | `kafka.producer.record_queue_time_avg`                     | The average time in ms record batches spent in the send buffer.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-queue-time-max`                     | `client-id`                     | `kafka.producer.record_queue_time_max`                     | The maximum time in ms record batches spent in the send buffer.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-size-avg`                           | `client-id`                     | `kafka.producer.record_size_avg`                           | The average record size.                                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-size-max`                           | `client-id`                     | `kafka.producer.record_size_max`                           | The maximum record size.                                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `records-per-request-avg`                   | `client-id`                     | `kafka.producer.records_per_request_avg`                   | The average number of records per request.                                                                                                        | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `requests-in-flight`                        | `client-id`                     | `kafka.producer.requests_in_flight`                        | The current number of in-flight requests awaiting a response.                                                                                     | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `select-rate`                               | `client-id`                     | `kafka.producer.select_rate`                               | The number of times the I/O layer checked for new I/O to perform per second.                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `select-total`                              | `client-id`                     | `kafka.producer.select_total`                              | The total number of times the I/O layer checked for new I/O to perform.                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `successful-authentication-no-reauth-total` | `client-id`                     | `kafka.producer.successful_authentication_no_reauth_total` | The total number of connections with successful authentication where the client does not support re-authentication.                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `successful-authentication-rate`            | `client-id`                     | `kafka.producer.successful_authentication_rate`            | The number of connections with successful authentication per second.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `successful-authentication-total`           | `client-id`                     | `kafka.producer.successful_authentication_total`           | The total number of connections with successful authentication.                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `successful-reauthentication-rate`          | `client-id`                     | `kafka.producer.successful_reauthentication_rate`          | The number of successful re-authentication of connections per second.                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `successful-reauthentication-total`         | `client-id`                     | `kafka.producer.successful_reauthentication_total`         | The total number of successful re-authentication of connections.                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-abort-time-ns-total`                   | `client-id`                     | `kafka.producer.txn_abort_time_ns_total`                   | Total time producer has spent in abortTransaction in nanoseconds.                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-begin-time-ns-total`                   | `client-id`                     | `kafka.producer.txn_begin_time_ns_total`                   | Total time producer has spent in beginTransaction in nanoseconds.                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-commit-time-ns-total`                  | `client-id`                     | `kafka.producer.txn_commit_time_ns_total`                  | Total time producer has spent in commitTransaction in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-init-time-ns-total`                    | `client-id`                     | `kafka.producer.txn_init_time_ns_total`                    | Total time producer has spent in initTransactions in nanoseconds.                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-send-offsets-time-ns-total`            | `client-id`                     | `kafka.producer.txn_send_offsets_time_ns_total`            | Total time producer has spent in sendOffsetsToTransaction in nanoseconds.                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `waiting-threads`                           | `client-id`                     | `kafka.producer.waiting_threads`                           | The number of user threads blocked waiting for buffer memory to enqueue their records.                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `incoming-byte-rate`                        | `client-id`,`node-id`           | `kafka.producer.incoming_byte_rate`                        | The number of bytes read off all sockets per second.                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `incoming-byte-total`                       | `client-id`,`node-id`           | `kafka.producer.incoming_byte_total`                       | The total number of bytes read off all sockets.                                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-node-metrics`          | `outgoing-byte-rate`                        | `client-id`,`node-id`           | `kafka.producer.outgoing_byte_rate`                        | The number of outgoing bytes sent to all servers per second.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `outgoing-byte-total`                       | `client-id`,`node-id`           | `kafka.producer.outgoing_byte_total`                       | The total number of outgoing bytes sent to all servers.                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-node-metrics`          | `request-latency-avg`                       | `client-id`,`node-id`           | `kafka.producer.request_latency_avg`                       | The average request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-latency-max`                       | `client-id`,`node-id`           | `kafka.producer.request_latency_max`                       | The maximum request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-rate`                              | `client-id`,`node-id`           | `kafka.producer.request_rate`                              | The number of requests sent per second.                                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-size-avg`                          | `client-id`,`node-id`           | `kafka.producer.request_size_avg`                          | The average size of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-size-max`                          | `client-id`,`node-id`           | `kafka.producer.request_size_max`                          | The maximum size of any request sent.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-total`                             | `client-id`,`node-id`           | `kafka.producer.request_total`                             | The total number of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-node-metrics`          | `response-rate`                             | `client-id`,`node-id`           | `kafka.producer.response_rate`                             | The number of responses received per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `response-total`                            | `client-id`,`node-id`           | `kafka.producer.response_total`                            | The total number of responses received.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `byte-rate`                                 | `client-id`,`topic`             | `kafka.producer.byte_rate`                                 | The average number of bytes sent per second for a topic.                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `byte-total`                                | `client-id`,`topic`             | `kafka.producer.byte_total`                                | The total number of bytes sent for a topic.                                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `compression-rate`                          | `client-id`,`topic`             | `kafka.producer.compression_rate`                          | The average compression rate of record batches for a topic, defined as the average ratio of the compressed batch size over the uncompressed size. | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-error-rate`                         | `client-id`,`topic`             | `kafka.producer.record_error_rate`                         | The average per-second number of record sends that resulted in errors.                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-error-total`                        | `client-id`,`topic`             | `kafka.producer.record_error_total`                        | The total number of record sends that resulted in errors.                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `record-retry-rate`                         | `client-id`,`topic`             | `kafka.producer.record_retry_rate`                         | The average per-second number of retried record sends.                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-retry-total`                        | `client-id`,`topic`             | `kafka.producer.record_retry_total`                        | The total number of retried record sends.                                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `record-send-rate`                          | `client-id`,`topic`             | `kafka.producer.record_send_rate`                          | The average number of records sent per second.                                                                                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-send-total`                         | `client-id`,`topic`             | `kafka.producer.record_send_total`                         | The total number of records sent.                                                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n",
      "name": "kafka-clients-2.6",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-2.6",
      "target_versions": {
        "library": [
          "org.apache.kafka:kafka-clients:2.6.0"
        ]
      }
    },
    {
      "library_link": "https://kafka.apache.org/documentation/streams/",
      "name": "kafka-streams-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-streams-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-streams-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-streams:[0.11.0.0,)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-1.0",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-1.0",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.0.0,1.3.8)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-flow-1.3",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-flow-1.3"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-flow-1.3",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.3.0,1.3.8)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Ktor version 1.x\n\nThis package contains libraries to help instrument Ktor.\nCurrently, only server instrumentation is supported.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-ktor-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-ktor-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-ktor-1.0:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\nInitialize instrumentation by installing the `KtorServerTelemetry` feature.\nYou must set the `OpenTelemetry` to use with the feature.\n\n```kotlin\nOpenTelemetry openTelemetry = ...\n\nembeddedServer(Netty, 8080) {\n  install(KtorServerTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n",
      "name": "ktor-1.0",
      "scope": {
        "name": "io.opentelemetry.ktor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-1.0",
      "target_versions": {
        "library": [
          "io.ktor:ktor-server-core:[1.0.0,1.+)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Ktor version 2.x\n\nThis package contains libraries to help instrument Ktor.\nServer and client instrumentations are supported.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-ktor-2.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-ktor-2.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-ktor-2.0:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\n## Initializing server instrumentation\n\nInitialize instrumentation by installing the `KtorServerTelemetry` feature.\nYou must set the `OpenTelemetry` to use with the feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nembeddedServer(Netty, 8080) {\n  install(KtorServerTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n\n## Initializing client instrumentation\n\nInitialize instrumentation by installing the `KtorClientTelemetry` feature. You must set the\n`OpenTelemetry` to use with\nthe feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nval client = HttpClient {\n  install(KtorClientTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n",
      "name": "ktor-2.0",
      "scope": {
        "name": "io.opentelemetry.ktor-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-2.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[2.0.0,3.0.0)",
          "io.ktor:ktor-server-core:[2.0.0,3.0.0)"
        ],
        "library": [
          "io.ktor:ktor-client-core:[2.0.0,2.+)",
          "io.ktor:ktor-server-core:[2.0.0,2.+)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Ktor version 3.0 and higher\n\nThis package contains libraries to help instrument Ktor.\nServer and client instrumentations are supported.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-ktor-3.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-ktor-3.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-ktor-3.0:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\n## Initializing server instrumentation\n\nInitialize instrumentation by installing the `KtorServerTelemetry` feature. Make sure that no other\nlogging plugin is installed before this.\nYou must set the `OpenTelemetry` to use with the feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nembeddedServer(Netty, 8080) {\n  install(KtorServerTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n\n## Initializing client instrumentation\n\nInitialize instrumentation by installing the `KtorClientTelemetry` feature. You must set the\n`OpenTelemetry` to use with\nthe feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nval client = HttpClient {\n  install(KtorClientTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n",
      "name": "ktor-3.0",
      "scope": {
        "name": "io.opentelemetry.ktor-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-3.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[3.0.0,)",
          "io.ktor:ktor-server-core:[3.0.0,)"
        ],
        "library": [
          "io.ktor:ktor-client-core:3.0.0",
          "io.ktor:ktor-server-core:3.0.0"
        ]
      }
    },
    {
      "name": "kubernetes-client-7.0",
      "scope": {
        "name": "io.opentelemetry.kubernetes-client-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kubernetes-client-7.0",
      "target_versions": {
        "javaagent": [
          "io.kubernetes:client-java-api:[7.0.0,)"
        ]
      }
    },
    {
      "name": "lettuce-4.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-4.0",
      "target_versions": {
        "javaagent": [
          "biz.paluch.redis:lettuce:[4.0.Final,)"
        ]
      }
    },
    {
      "name": "lettuce-5.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.0",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.0.0.RELEASE,5.1.0.RELEASE)"
        ]
      }
    },
    {
      "name": "lettuce-5.1",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.1"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.1",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.1.0.RELEASE,)"
        ],
        "library": [
          "io.lettuce:lettuce-core:5.1.0.RELEASE"
        ]
      }
    },
    {
      "name": "liberty-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-20.0"
    },
    {
      "name": "liberty-dispatcher-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-dispatcher-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-dispatcher-20.0"
    },
    {
      "name": "log4j-appender-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "markdown_content": "# Appender Instrumentation for Log4j2 version 2.17 and higher\n\nThis module provides a Log4j2 [appender](https://logging.apache.org/log4j/2.x/manual/appenders.html)\nwhich forwards Log4j2 log events to the\n[OpenTelemetry Log SDK](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk/logs).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-log4j-appender-2.17).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-log4j-appender-2.17</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-log4j-appender-2.17:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe following demonstrates how you might configure the appender in your `log4j2.xml` configuration:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n  <Appenders>\n    <Console name=\"Console\" target=\"SYSTEM_OUT\">\n      <PatternLayout\n          pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} trace_id: %X{trace_id} span_id: %X{span_id} trace_flags: %X{trace_flags} - %msg%n\"/>\n    </Console>\n    <OpenTelemetry name=\"OpenTelemetryAppender\"/>\n  </Appenders>\n  <Loggers>\n    <Root level=\"All\">\n      <AppenderRef ref=\"OpenTelemetryAppender\"/>\n      <AppenderRef ref=\"Console\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n```\n\nIn this example Log4j2 log events will be sent to both the console appender and\nthe `OpenTelemetryAppender`.\n\nIn order to function, `OpenTelemetryAppender` needs access to an `OpenTelemetry` instance. This must\nbe set programmatically during application startup as follows:\n\n```java\nimport io.opentelemetry.instrumentation.log4j.appender.v2_17.OpenTelemetryAppender;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\n\npublic class Application {\n\n  public static void main(String[] args) {\n    OpenTelemetrySdk openTelemetrySdk = // Configure OpenTelemetrySdk\n\n    // Find OpenTelemetryAppender in log4j configuration and install openTelemetrySdk\n    OpenTelemetryAppender.install(openTelemetrySdk);\n\n    // ... proceed with application\n  }\n}\n```\n\n#### Settings for the Log4j Appender\n\nSetting can be configured as XML attributes, for example:\n\n```xml\n<Appenders>\n  <OpenTelemetry name=\"OpenTelemetryAppender\"\n      captureMapMessageAttributes=\"true\"\n      captureMarkerAttribute=\"true\"\n      captureContextDataAttributes=\"*\"\n  />\n</Appenders>\n```\n\nThe available settings are:\n\n| XML Attribute                      | Type    | Default | Description                                                                                                                                                                                                |\n|------------------------------------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `captureExperimentalAttributes`    | Boolean | `false` | Enable the capture of experimental log attributes `thread.name` and `thread.id`.                                                                                                                           |\n| `captureCodeAttributes`            | Boolean | `false` | Enable the capture of [source code attributes]. Note that capturing source code attributes at logging sites might add a performance overhead.                                                              |\n| `captureMapMessageAttributes`      | Boolean | `false` | Enable the capture of `MapMessage` attributes.                                                                                                                                                             |\n| `captureMarkerAttribute`           | Boolean | `false` | Enable the capture of Log4j markers as attributes.                                                                                                                                                         |\n| `captureContextDataAttributes`     | String  |         | Comma separated list of context data attributes to capture. Use the wildcard character `*` to capture all attributes.                                                                                      |\n| `numLogsCapturedBeforeOtelInstall` | Integer | 1000    | Log telemetry is emitted after the initialization of the OpenTelemetry Log4j appender with an OpenTelemetry object. This setting allows you to modify the size of the cache used to replay the first logs. |\n\n[source code attributes]: https://github.com/open-telemetry/semantic-conventions/blob/main/docs/general/attributes.md#source-code-attributes\n",
      "name": "log4j-appender-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.0,)"
        ],
        "library": [
          "org.apache.logging.log4j:log4j-core:2.17.0"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.17.0,)"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.7",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.7,2.17.0)"
        ]
      }
    },
    {
      "name": "log4j-mdc-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-mdc-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-mdc-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "markdown_content": "# Appender Instrumentation for Logback version 1.0 and higher\n\nThis module provides a Logback [appender](https://logback.qos.ch/manual/appenders.html) which\nforwards Logback log events to the\n[OpenTelemetry Log SDK](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk/logs).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-logback-appender-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-logback-appender-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe following demonstrates how you might configure the appender in your `logback.xml` configuration:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\n  <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>\n        %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n      </pattern>\n    </encoder>\n  </appender>\n  <appender name=\"OpenTelemetry\"\n            class=\"io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender\">\n  </appender>\n\n  <root level=\"INFO\">\n    <appender-ref ref=\"console\"/>\n    <appender-ref ref=\"OpenTelemetry\"/>\n  </root>\n\n</configuration>\n```\n\nIn this example Logback log events will be sent to both the console appender and\nthe `OpenTelemetryAppender`.\n\nIn order to function, `OpenTelemetryAppender` needs access to an `OpenTelemetry` instance. This must\nbe set programmatically during application startup as follows:\n\n```java\nimport io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\n\npublic class Application {\n\n  public static void main(String[] args) {\n    OpenTelemetrySdk openTelemetrySdk = // Configure OpenTelemetrySdk\n\n    // Find OpenTelemetryAppender in logback configuration and install openTelemetrySdk\n    OpenTelemetryAppender.install(openTelemetrySdk);\n\n    // ... proceed with application\n  }\n}\n```\n\n#### Settings for the Logback Appender\n\nSettings can be configured in `logback.xml`, for example:\n\n```xml\n<appender name=\"OpenTelemetry\" class=\"io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender\">\n  <captureExperimentalAttributes>true</captureExperimentalAttributes>\n  <captureMdcAttributes>*</captureMdcAttributes>\n</appender>\n```\n\nThe available settings are:\n\n| XML Element                        | Type    | Default | Description                                                                                                                                                                                                                                       |\n|------------------------------------|---------|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `captureExperimentalAttributes`    | Boolean | `false` | Enable the capture of experimental log attributes `thread.name` and `thread.id`.                                                                                                                                                                  |\n| `captureCodeAttributes`            | Boolean | `false` | Enable the capture of [source code attributes]. Note that capturing source code attributes at logging sites might add a performance overhead.                                                                                                     |\n| `captureMarkerAttribute`           | Boolean | `false` | Enable the capture of Logback markers as attributes.                                                                                                                                                                                              |\n| `captureKeyValuePairAttributes`    | Boolean | `false` | Enable the capture of Logback key value pairs as attributes.                                                                                                                                                                                      |\n| `captureLoggerContext`             | Boolean | `false` | Enable the capture of Logback logger context properties as attributes.                                                                                                                                                                            |\n| `captureArguments`                 | Boolean | `false` | Enable the capture of Logback logger arguments.                                                                                                                                                                                                   |\n| `captureLogstashAttributes`        | Boolean | `false` | Enable the capture of Logstash attributes, supported are those added to logs via `Markers.append()`, `Markers.appendEntries()`, `Markers.appendArray()` and `Markers.appendRaw()` methods.                                                        |\n| `captureMdcAttributes`             | String  |         | Comma separated list of MDC attributes to capture. Use the wildcard character `*` to capture all attributes.                                                                                                                                      |\n| `numLogsCapturedBeforeOtelInstall` | Integer | 1000    | Log telemetry is emitted after the initialization of the OpenTelemetry Logback appender with an OpenTelemetry object. This setting allows you to modify the size of the cache used to replay the first logs. thread.id attribute is not captured. |\n\n\n[source code attributes]: https://github.com/open-telemetry/semantic-conventions/blob/main/docs/general/attributes.md#source-code-attributes\n",
      "name": "logback-appender-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-appender-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-appender-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[0.9.16,)"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.3.0",
          "net.logstash.logback:logstash-logback-encoder:3.0",
          "org.slf4j:slf4j-api:2.0.0"
        ]
      }
    },
    {
      "markdown_content": "# MDC Instrumentation for Logback version 1.0 and higher\n\nThis module integrates instrumentation with Logback by injecting the trace ID and span ID from a\nmounted span using a custom Logback appender.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-logback-mdc-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-logback-mdc-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\ndependencies {\n  runtimeOnly(\"io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0:OPENTELEMETRY_VERSION\")\n}\n```\n\n### Usage\n\nThe following demonstrates how you might configure the appender in your `logback.xml` configuration:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>%d{HH:mm:ss.SSS} trace_id=%X{trace_id} span_id=%X{span_id} trace_flags=%X{trace_flags} %msg%n</pattern>\n    </encoder>\n  </appender>\n\n  <!-- Just wrap your logging appender, for example ConsoleAppender, with OpenTelemetryAppender -->\n  <appender name=\"OTEL\" class=\"io.opentelemetry.instrumentation.logback.mdc.v1_0.OpenTelemetryAppender\">\n    <appender-ref ref=\"CONSOLE\"/>\n  </appender>\n\n  <!-- Use the wrapped \"OTEL\" appender instead of the original \"CONSOLE\" one -->\n  <root level=\"INFO\">\n    <appender-ref ref=\"OTEL\"/>\n  </root>\n\n</configuration>\n```\n\n> It's important to note you can also use other encoders in the `ConsoleAppender` like [logstash-logback-encoder](https://github.com/logfellow/logstash-logback-encoder).\n> This can be helpful when the `Span` is invalid and the `trace_id`, `span_id`, and `trace_flags` are all `null` and are hidden entirely from the logs.\n\nLogging events will automatically have context information from the span context injected. The\nfollowing attributes are available for use:\n\n- `trace_id`\n- `span_id`\n- `trace_flags`\n\nThese keys can be customized in your `logback.xml` configuration, for example:\n\n```xml\n<appender name=\"OTEL\" class=\"io.opentelemetry.instrumentation.logback.mdc.v1_0.OpenTelemetryAppender\">\n  <traceIdKey>example_trace_id</traceIdKey>\n  <spanIdKey>example_span_id</spanIdKey>\n  <traceFlagsKey>example_trace_flags</traceFlagsKey>\n</appender>\n```\n\nIf you set `<addBaggage>true</addBaggage>` in your `logback.xml` configuration,\nkey/value pairs in [baggage](https://opentelemetry.io/docs/concepts/signals/baggage/) will also be added to the MDC.\n\n- `baggage.<entry_name>`\n",
      "name": "logback-mdc-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-mdc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-mdc-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[1.0.0,1.2.3]"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.0.0",
          "org.slf4j:slf4j-api:1.6.4"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "markdown_content": "# Micrometer Instrumentation for Micrometer version 1.5 and higher\n\nThis module provides a [Micrometer registry](https://docs.micrometer.io/micrometer/reference/concepts/registry.html) which\nsends Micrometer metrics to the\n[OpenTelemetry Metrics SDK](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk/metrics).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-micrometer-1.5).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-micrometer-1.5</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-micrometer-1.5:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides an implementation of `MeterRegistry` to bridge Micrometer API to OpenTelemetry Metrics.\n\n```java\nMeterRegistry meterRegistry = OpenTelemetryMeterRegistry.builder(openTelemetry).build();\n```\n",
      "name": "micrometer-1.5",
      "scope": {
        "name": "io.opentelemetry.micrometer-1.5"
      },
      "semconv": [],
      "source_path": "instrumentation/micrometer/micrometer-1.5",
      "target_versions": {
        "javaagent": [
          "io.micrometer:micrometer-core:[1.5.0,)"
        ],
        "library": [
          "io.micrometer:micrometer-core:1.5.0"
        ]
      }
    },
    {
      "markdown_content": "# MongoDB library instrumentation\n\nThis package contains the library to help instrument MongoDB Client.\n\n## Quickstart\n\n### Dependencies\n\nReplace OPENTELEMETRY_VERSION with the [latest release](https://central.sonatype.com/search?q=g%3Aio.opentelemetry.instrumentation+a%3Aopentelemetry-mongo-3.1).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-mongo-3.1</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```gradle\nimplementation(\"io.opentelemetry.instrumentation:instrumentation:opentelemetry-mongo-3.1:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\nThe instrumentation is initialized by passing a `MongoTelemetry::newCommandListener()` to the `MongoClientSettings` builder. You must set the `OpenTelemetry` to use with the feature.\n\n```java\nOpenTelemetry openTelemetry = ...;\n\nMongoTelemetry mongoTelemetry = MongoTelemetry.builder(openTelemetry).build();\n\nMongoClientSettings settings = MongoClientSettings.builder()\n    .applyConnectionString(ConnectionString(\"mongodb://localhost:27017\"))\n    .addCommandListener(mongoTelemetry.newCommandListener())\n    .build();\n\n// With Reactive Streams\nMongoClient client = MongoClients.create(settings);\n```\n",
      "name": "mongo-3.1",
      "scope": {
        "name": "io.opentelemetry.mongo-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.1",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.1,)"
        ],
        "library": [
          "org.mongodb:mongo-java-driver:3.1.0"
        ]
      }
    },
    {
      "name": "mongo-3.7",
      "scope": {
        "name": "io.opentelemetry.mongo-3.7"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.7",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.7, 4.0)",
          "org.mongodb:mongodb-driver-core:[3.7, 4.0)"
        ]
      }
    },
    {
      "name": "mongo-4.0",
      "scope": {
        "name": "io.opentelemetry.mongo-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-4.0",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-core:[4.0,)"
        ]
      }
    },
    {
      "name": "mongo-async-3.3",
      "scope": {
        "name": "io.opentelemetry.mongo-async-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-async-3.3",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-async:[3.3,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "mybatis-3.2",
      "scope": {
        "name": "io.opentelemetry.mybatis-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/mybatis-3.2",
      "target_versions": {
        "javaagent": [
          "org.mybatis:mybatis:[3.2.0,)"
        ]
      }
    },
    {
      "name": "netty-3.8",
      "scope": {
        "name": "io.opentelemetry.netty-3.8"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-3.8",
      "target_versions": {
        "javaagent": [
          "io.netty:netty:[3.8.0.Final,4)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.0",
      "scope": {
        "name": "io.opentelemetry.netty-4.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.0",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.0.0.Final,4.1.0.Final)",
          "io.netty:netty-codec-http:[4.0.0.Final,4.1.0.Final)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.1",
      "scope": {
        "name": "io.opentelemetry.netty-4.1"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.1",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.1.0.Final,5.0.0)",
          "io.netty:netty-codec-http:[4.1.0.Final,5.0.0)"
        ],
        "library": [
          "io.netty:netty-codec-http:4.1.0.Final"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "okhttp-2.2",
      "scope": {
        "name": "io.opentelemetry.okhttp-2.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-2.2",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp:okhttp:[2.2,3)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "markdown_content": "# Library Instrumentation for OkHttp version 3.0 and higher\n\nProvides OpenTelemetry instrumentation for [okhttp3](https://square.github.io/okhttp/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-okhttp-3.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-okhttp-3.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-okhttp-3.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides an OkHttp `Call.Factory` implementation that wraps\nan instance of the `OkHttpClient` to provide OpenTelemetry-based spans and context\npropagation.\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.okhttp.v3_0.OkHttpTelemetry;\nimport okhttp3.Call;\nimport okhttp3.OkHttpClient;\n\npublic class OkHttpConfiguration {\n\n  //Use this Call.Factory implementation for making standard http client calls.\n  public Call.Factory createTracedClient(OpenTelemetry openTelemetry) {\n    return OkHttpTelemetry.builder(openTelemetry).build().newCallFactory(createClient());\n  }\n\n  //your configuration of the OkHttpClient goes here:\n  private OkHttpClient createClient() {\n    return new OkHttpClient.Builder().build();\n  }\n}\n```\n",
      "name": "okhttp-3.0",
      "scope": {
        "name": "io.opentelemetry.okhttp-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-3.0",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp3:okhttp:[3.0,)"
        ],
        "library": [
          "com.squareup.okhttp3:okhttp:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables including the full content of user and assistant messages in emitted log events. Note that full content can have data privacy and size concerns, and care should be taken when enabling this.\n",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables Gen AI client spans and metrics for OpenAI Java SDK 1.1+.",
      "library_link": "https://github.com/openai/openai-java",
      "markdown_content": "# Library Instrumentation for OpenAI Java SDK version 1.1.0 and higher\n\nProvides OpenTelemetry instrumentation for [openai-java](https://github.com/openai/openai-java/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-openai-java-1.1).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-openai-java-1.1</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-openai-java-1.1:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a wrapper for `OpenAIClient` that provide OpenTelemetry-based\nspans, metrics and logs.\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.openai.v1_1.OpenAITelemetry;\nimport com.openai.client.OpenAIClient;\n\npublic class OpenAIClientConfiguration {\n\n  //Use this client to capture telemetry.\n  public OpenAIClient createOtelClient(OpenTelemetry openTelemetry) {\n    return OpenAITelemetry.builder(openTelemetry).build().wrap(createClient());\n  }\n\n  //your configuration of the OpenAIClient goes here:\n  private OpenAIClient createClient() {\n    return ...;\n  }\n}\n```\n",
      "name": "openai-java-1.1",
      "scope": {
        "name": "io.opentelemetry.openai-java-1.1"
      },
      "semconv": [
        "Gen Ai"
      ],
      "source_path": "instrumentation/openai/openai-java-1.1",
      "target_versions": {
        "javaagent": [
          "com.openai:openai-java:[1.1.0,3)"
        ],
        "library": [
          "com.openai:openai-java:1.1.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "GenAI operation duration.",
              "name": "gen_ai.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.token.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Measures number of input and output tokens used.",
              "name": "gen_ai.client.token.usage",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "token"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.encoding_formats",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.frequency_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.max_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.presence_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.seed",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.stop_sequences",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.temperature",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.top_p",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.response.finish_reasons",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.response.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.usage.output_tokens",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-1.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-1.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[1.0,3.0)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-3.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-3.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[3.0,)"
        ]
      }
    },
    {
      "description": "The Oracle Universal Connection Pool (UCP) instrumentation generates connection pool metrics.",
      "library_link": "https://docs.oracle.com/database/121/JJUCP/",
      "markdown_content": "# Library Instrumentation for Oracle UCP version 11.2 and higher\n\nProvides OpenTelemetry instrumentation for [Oracle UCP](https://docs.oracle.com/database/121/JJUCP/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-oracle-ucp-11.2).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-oracle-ucp-11.2</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-oracle-ucp-11.2:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `UniversalConnectionPool` instances for collecting\nOpenTelemetry-based metrics.\n\n```java\nOracleUcpTelemetry oracleUcpTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, UniversalConnectionPool universalConnectionPool) {\n  oracleUcpTelemetry = OracleUcpTelemetry.create(openTelemetry);\n  oracleUcpTelemetry.registerMetrics(universalConnectionPool);\n}\n\nvoid destroy(UniversalConnectionPool universalConnectionPool) {\n  oracleUcpTelemetry.unregisterMetrics(universalConnectionPool);\n}\n```\n",
      "name": "oracle-ucp-11.2",
      "scope": {
        "name": "io.opentelemetry.oracle-ucp-11.2"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/oracle-ucp-11.2",
      "target_versions": {
        "javaagent": [
          "com.oracle.database.jdbc:ucp:[,)"
        ],
        "library": [
          "com.oracle.database.jdbc:ojdbc8:12.2.0.1",
          "com.oracle.database.jdbc:ucp:11.2.0.4"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the OSHI process runtime metrics.",
          "name": "otel.instrumentation.oshi.experimental-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "When the OSHI library is detected on the classpath, this instrumentation will use the system class loader to load classes from the oshi-core jar that are then used to generate system metrics.",
      "library_link": "https://github.com/oshi/oshi/",
      "name": "oshi",
      "scope": {
        "name": "io.opentelemetry.oshi"
      },
      "semconv": [
        "System"
      ],
      "source_path": "instrumentation/oshi",
      "target_versions": {
        "javaagent": [
          "com.github.oshi:oshi-core:[5.3.1,)"
        ],
        "library": [
          "com.github.oshi:oshi-core:5.3.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java CPU time",
              "name": "runtime.java.cpu_time",
              "type": "LONG_GAUGE",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java memory",
              "name": "runtime.java.memory",
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "otel.instrumentation.oshi.experimental-metrics.enabled=true"
        }
      ]
    },
    {
      "name": "payara",
      "scope": {
        "name": "io.opentelemetry.payara"
      },
      "semconv": [],
      "source_path": "instrumentation/payara"
    },
    {
      "name": "pekko-actor-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-actor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/pekko/pekko-actor-1.0",
      "target_versions": {
        "javaagent": [
          "org.apache.pekko:pekko-actor_2.12:[1.0,)",
          "org.apache.pekko:pekko-actor_2.13:[1.0,)",
          "org.apache.pekko:pekko-actor_3:[1.0,)"
        ]
      }
    },
    {
      "name": "pekko-http-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-http-1.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/pekko/pekko-http-1.0",
      "target_versions": {
        "javaagent": [
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.12:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.13:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_3:[1.7,)",
          "org.apache.pekko:pekko-http_2.12:[1.0,)",
          "org.apache.pekko:pekko-http_2.13:[1.0,)",
          "org.apache.pekko:pekko-http_3:[1.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-mvc-2.4",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.4",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_2.11:[2.4.0,2.6)"
        ]
      }
    },
    {
      "name": "play-mvc-2.6",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.6",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_$scalaVersion:[2.6.0,)",
          "com.typesafe.play:play_2.12:[2.6.0,)",
          "com.typesafe.play:play_2.13:[2.6.0,)"
        ]
      }
    },
    {
      "name": "play-ws-1.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-1.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[1.0.0,2.0.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[1.0.0,2.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[2.0.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.0.0,2.1.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.0.6,2.1.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.1",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.1",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.1.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.1.0,]"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "powerjob-4.0",
      "scope": {
        "name": "io.opentelemetry.powerjob-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/powerjob-4.0",
      "target_versions": {
        "javaagent": [
          "tech.powerjob:powerjob-worker:[4.0.0,)"
        ]
      }
    },
    {
      "name": "pulsar-2.8",
      "scope": {
        "name": "io.opentelemetry.pulsar-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/pulsar/pulsar-2.8",
      "target_versions": {
        "javaagent": [
          "org.apache.pulsar:pulsar-client:[2.8.0,)"
        ]
      }
    },
    {
      "name": "quarkus-resteasy-reactive",
      "scope": {
        "name": "io.opentelemetry.quarkus-resteasy-reactive"
      },
      "semconv": [],
      "source_path": "instrumentation/quarkus-resteasy-reactive",
      "target_versions": {
        "javaagent": [
          "io.quarkus:quarkus-resteasy-reactive:(,3.9.0)"
        ]
      }
    },
    {
      "name": "quartz-2.0",
      "scope": {
        "name": "io.opentelemetry.quartz-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/quartz-2.0",
      "target_versions": {
        "javaagent": [
          "org.quartz-scheduler:quartz:[2.0.0,)"
        ],
        "library": [
          "org.quartz-scheduler:quartz:2.0.0"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for R2dbc version 1.0 and higher\n\nProvides OpenTelemetry instrumentation for [R2dbc](https://r2dbc.io/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-r2dbc-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-r2dbc-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-r2dbc-1.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a R2dbc `ProxyConnectionFactory` that gets wrapped around the original\n`ConnectionFactory`.\n\n```java\nConnectionFactory wrapWithProxyFactory(OpenTelemetry openTelemetry, ConnectionFactory originalFactory, ConnectionFactoryOptions factoryOptions) {\n  return R2dbcTelemetryBuilder\n    .create(openTelemetry)\n    .wrapConnectionFactory(originalFactory, factoryOptions);\n}\n```\n\nIf you use R2dbc in a Spring Boot application you can wrap the `ConnectionFactory` using a custom `BeanPostProcessor` implementation:\n\n```java\n@Configuration\nclass R2dbcConfiguration {\n\n  @Bean\n  public R2dbcInstrumentingPostProcessor r2dbcInstrumentingPostProcessor(\n      OpenTelemetry openTelemetry) {\n    return new R2dbcInstrumentingPostProcessor(openTelemetry);\n  }\n}\n\nclass R2dbcInstrumentingPostProcessor implements BeanPostProcessor {\n\n  private final OpenTelemetry openTelemetry;\n\n  R2dbcInstrumentingPostProcessor(OpenTelemetry openTelemetry) {\n    this.openTelemetry = openTelemetry;\n  }\n\n  @Override\n  public Object postProcessAfterInitialization(Object bean, String beanName) {\n    if (!(bean instanceof ConnectionFactory)) {\n      return bean;\n    }\n    ConnectionFactory connectionFactory = (ConnectionFactory) bean;\n    return R2dbcTelemetry.create(openTelemetry)\n        .wrapConnectionFactory(connectionFactory, getConnectionFactoryOptions(connectionFactory));\n  }\n\n  private static ConnectionFactoryOptions getConnectionFactoryOptions(ConnectionFactory connectionFactory) {\n    OptionsCapableConnectionFactory optionsCapableConnectionFactory =\n        OptionsCapableConnectionFactory.unwrapFrom(connectionFactory);\n    if (optionsCapableConnectionFactory != null) {\n      return optionsCapableConnectionFactory.getOptions();\n    } else {\n      // in practice should never happen\n      // fall back to empty options; or reconstruct them from the R2dbcProperties\n      return ConnectionFactoryOptions.builder().build();\n    }\n  }\n}\n```\n",
      "name": "r2dbc-1.0",
      "scope": {
        "name": "io.opentelemetry.r2dbc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/r2dbc-1.0",
      "target_versions": {
        "javaagent": [
          "io.r2dbc:r2dbc-spi:[1.0.0.RELEASE,)"
        ],
        "library": [
          "io.r2dbc:r2dbc-spi:1.0.0.RELEASE"
        ]
      }
    },
    {
      "name": "rabbitmq-2.7",
      "scope": {
        "name": "io.opentelemetry.rabbitmq-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/rabbitmq-2.7",
      "target_versions": {
        "javaagent": [
          "com.rabbitmq:amqp-client:[2.7.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.4",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.4",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.4.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.7",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.7"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.7",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.7.0,)"
        ],
        "library": [
          "io.ratpack:ratpack-core:1.7.0"
        ]
      }
    },
    {
      "name": "reactor-3.1",
      "scope": {
        "name": "io.opentelemetry.reactor-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.1",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.1.0.RELEASE,)"
        ]
      }
    },
    {
      "name": "reactor-3.4",
      "scope": {
        "name": "io.opentelemetry.reactor-3.4"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.4",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.4.0,)"
        ]
      }
    },
    {
      "name": "reactor-kafka-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-kafka-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-kafka-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.kafka:reactor-kafka:[1.0.0,)"
        ]
      }
    },
    {
      "name": "reactor-netty-0.9",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-0.9"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-0.9",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty:[0.8.2.RELEASE,1.0.0)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans.",
          "name": "otel.instrumentation.reactor-netty.connection-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "reactor-netty-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty-http:[1.0.0,)",
          "io.projectreactor.netty:reactor-netty:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "rediscala-1.8",
      "scope": {
        "name": "io.opentelemetry.rediscala-1.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rediscala-1.8",
      "target_versions": {
        "javaagent": [
          "com.github.Ma27:rediscala_2.11:[1.8.1,)",
          "com.github.Ma27:rediscala_2.12:[1.8.1,)",
          "com.github.Ma27:rediscala_2.13:[1.9.0,)",
          "com.github.etaty:rediscala_2.11:[1.5.0,)",
          "com.github.etaty:rediscala_2.12:[1.8.0,)",
          "com.github.etaty:rediscala_2.13:[1.9.0,)",
          "io.github.rediscala:rediscala_2.13:[1.10.0,)"
        ]
      }
    },
    {
      "name": "redisson-3.0",
      "scope": {
        "name": "io.opentelemetry.redisson-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.0",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.0.0,3.17.0)"
        ]
      }
    },
    {
      "name": "redisson-3.17",
      "scope": {
        "name": "io.opentelemetry.redisson-3.17"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.17",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.17.0,)"
        ]
      }
    },
    {
      "markdown_content": "# OpenTelemetry Resource Providers\n\nThis package includes some standard `ResourceProvider`s for filling in attributes related to\ncommon environments. Currently, the resources provide the following semantic conventions:\n\n## Populated attributes\n\n### Container\n\nProvider: `io.opentelemetry.instrumentation.resources.ContainerResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/container.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `container.id`\n\n### Host\n\nProvider: `io.opentelemetry.instrumentation.resources.HostResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/host.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `host.name`\n- `host.arch`\n\nProvider: `io.opentelemetry.instrumentation.resources.HostIdResourceProvider`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/host.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `host.id`\n\n### Operating System\n\nProvider: `io.opentelemetry.instrumentation.resources.OsResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/os.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `os.type`\n- `os.description`\n\n### Process\n\nImplementation: `io.opentelemetry.instrumentation.resources.ProcessResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/process.md#process>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `process.pid`\n- `process.executable.path` (note, we assume the `java` binary is located in the `bin` subfolder of `JAVA_HOME`)\n- `process.command_line` (note this includes all system properties and arguments when running)\n\n### Java Runtime\n\nImplementation: `io.opentelemetry.instrumentation.resources.ProcessRuntimeResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/process.md#process-runtimes>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `process.runtime.name`\n- `process.runtime.version`\n- `process.runtime.description`\n\n## Platforms\n\nThis package currently does not run on Android. It has been verified on OpenJDK and should work on\nother server JVM distributions but if you find any issues please let us know.\n\n[declarative config]: https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/configuration#declarative-configuration\n",
      "name": "resources",
      "scope": {
        "name": "io.opentelemetry.resources"
      },
      "semconv": [],
      "source_path": "instrumentation/resources"
    },
    {
      "name": "restlet-1.1",
      "scope": {
        "name": "io.opentelemetry.restlet-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-1.1",
      "target_versions": {
        "javaagent": [
          "org.restlet:org.restlet:[1.1.0, 1.2-M1)"
        ],
        "library": [
          "com.noelios.restlet:com.noelios.restlet:1.1.5",
          "org.restlet:org.restlet:[1.1.5,1.+)"
        ]
      }
    },
    {
      "name": "restlet-2.0",
      "scope": {
        "name": "io.opentelemetry.restlet-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-2.0",
      "target_versions": {
        "javaagent": [
          "org.restlet.jse:org.restlet:[2.0.0,)"
        ],
        "library": [
          "org.restlet.jse:org.restlet:2.0.2"
        ]
      }
    },
    {
      "name": "rmi",
      "scope": {
        "name": "io.opentelemetry.rmi"
      },
      "semconv": [],
      "source_path": "instrumentation/rmi",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Apache RocketMQ remoting-based client 4.0.0+\n\nProvides OpenTelemetry instrumentation for [Apache RocketMQ](https://rocketmq.apache.org/) remoting-based client.\n\n## Quickstart\n\n### Add the following dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-rocketmq-client-4.8).\n\nFor Maven, add the following to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-rocketmq-client-4.8</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add the following to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-rocketmq-client-4.8:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides the implementation of `SendMessageHook` and `ConsumeMessageHook` to provide OpenTelemetry-based spans and context propagation.\n\n```java\nRocketMqTelemetry rocketMqTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, DefaultMQProducerImpl producer, DefaultMQPushConsumerImpl pushConsumer) {\n  rocketMqTelemetry = RocketMqTelemetry.create(openTelemetry);\n  // For producer.\n  producer.registerSendMessageHook(rocketMqTelemetry.newTracingSendMessageHook());\n  // For push consumer.\n  pushConsumer.registerConsumeMessageHook(rocketMqTelemetry.newTracingConsumeMessageHook());\n}\n```\n",
      "name": "rocketmq-client-4.8",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-4.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-4.8",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client:[4.0.0,)"
        ],
        "library": [
          "org.apache.rocketmq:rocketmq-client:4.8.0"
        ]
      }
    },
    {
      "name": "rocketmq-client-5.0",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client-java:[5.0.0,)"
        ]
      }
    },
    {
      "markdown_content": "The main entry point is the `RuntimeMetrics` class in the package `io.opentelemetry.instrumentation.runtimemetrics.java17`:\n\n```java\n// Initialize JfrTelemetry\nRuntimeMetrics runtimeMetrics = RuntimeMetrics.create(openTelemetry);\n\n// Close JfrTelemetry to stop listening for JFR events\nruntimeMetrics.close();\n```\n\n`RuntimeMetrics` uses two underlying implementations to gather the full set of metric data, JFR and JMX.\nThe metrics gathered by the two implementations are mutually exclusive and the union of them produces\nthe full set of available metrics.\nThe JMX component is reused from the `io.opentelemetry.instrumentation.runtimemetrics.java8` package.\nThe JFR component uses JFR streaming and is only available in JAVA 17.\nIt works by subscribing to certain JFR events, and using relevant bits of information\nfrom the events to produce telemetry data like metrics. The code is divided into \"handlers\", which\nlisten for specific events and produce relevant telemetry. The handlers are organized into\nfeatures (i.e `JfrFeature`), which represent a category of telemetry and can be toggled on and\noff. `RuntimeMetrics` evaluates which features are enabled, and only listens for the events required\nby the handlers associated with those features.\n\nEnable or disable a feature as follows:\n\n```\nRuntimeMetrics runtimeMetrics = RuntimeMetrics.builder(openTelemetry)\n  .enableFeature(JfrFeature.BUFFER_METRICS)\n  .disableFeature(JfrFeature.LOCK_METRICS)\n  .build();\n```\n\nThe following table describes the set of `JfrFeatures` available, whether each is enabled by\ndefault, and the telemetry each produces:\n\n<!-- DO NOT MANUALLY EDIT. Regenerate table following changes to instrumentation using ./gradlew generateDocs -->\n<!-- generateDocsStart -->\n\n| JfrFeature                | Default Enabled | Metrics                                                                                                           |\n|---------------------------|-----------------|-------------------------------------------------------------------------------------------------------------------|\n| BUFFER_METRICS            | `false`         | `jvm.buffer.count`, `jvm.buffer.memory.limit`, `jvm.buffer.memory.used`                                           |\n| CLASS_LOAD_METRICS        | `false`         | `jvm.class.count`, `jvm.class.loaded`, `jvm.class.unloaded`                                                       |\n| CONTEXT_SWITCH_METRICS    | `true`          | `jvm.cpu.context_switch`                                                                                          |\n| CPU_COUNT_METRICS         | `true`          | `jvm.cpu.limit`                                                                                                   |\n| CPU_UTILIZATION_METRICS   | `false`         | `jvm.cpu.recent_utilization`, `jvm.system.cpu.utilization`                                                        |\n| GC_DURATION_METRICS       | `false`         | `jvm.gc.duration`                                                                                                 |\n| LOCK_METRICS              | `true`          | `jvm.cpu.longlock`                                                                                                |\n| MEMORY_ALLOCATION_METRICS | `true`          | `jvm.memory.allocation`                                                                                           |\n| MEMORY_POOL_METRICS       | `false`         | `jvm.memory.committed`, `jvm.memory.init`, `jvm.memory.limit`, `jvm.memory.used`, `jvm.memory.used_after_last_gc` |\n| NETWORK_IO_METRICS        | `true`          | `jvm.network.io`, `jvm.network.time`                                                                              |\n| THREAD_METRICS            | `false`         | `jvm.thread.count`                                                                                                |\n",
      "minimum_java_version": 17,
      "name": "runtime-telemetry-java17",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java17"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java17"
    },
    {
      "markdown_content": "# JVM Runtime Metrics\n\nThis module provides JVM runtime metrics as documented in the [semantic conventions](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/runtime/jvm-metrics.md).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-runtime-telemetry-java8).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-runtime-telemetry-java8</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nruntimeOnly(\"io.opentelemetry.instrumentation:opentelemetry-runtime-telemetry-java8:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nRegister observers for the desired runtime metrics:\n\n```java\nOpenTelemetry openTelemetry = // OpenTelemetry instance configured elsewhere\n\nClasses.registerObservers(openTelemetry);\nCpu.registerObservers(openTelemetry);\nMemoryPools.registerObservers(openTelemetry);\nThreads.registerObservers(openTelemetry);\nGarbageCollector.registerObservers(openTelemetry);\n```\n\n## Garbage Collector Dependent Metrics\n\nThe attributes reported on the memory metrics (`jvm.memory.*`) and gc metrics (`jvm.gc.*`) are dependent on the garbage collector used by the application, since each garbage collector organizes memory pools differently and has different strategies for reclaiming memory during garbage collection.\n\nThe following lists attributes reported for a variety of garbage collectors. Notice that attributes are not necessarily constant across `*.used`, `*.committed`, and `*.limit` since not all memory pools report a limit.\n\n- CMS Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Code Cache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Code Cache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Code Cache,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of minor GC,jvm.gc.name=ParNew}, {jvm.gc.action=end of major GC,jvm.gc.name=MarkSweepCompact}\n- G1 Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=G1 Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=G1 Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=G1 Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of minor GC,jvm.gc.name=G1 Young Generation}, {jvm.gc.action=end of major GC,jvm.gc.name=G1 Old Generation}\n- Parallel Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of major GC,jvm.gc.name=PS MarkSweep}, {jvm.gc.action=end of minor GC,jvm.gc.name=PS Scavenge}\n- Serial Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of minor GC,jvm.gc.name=Copy}, {jvm.gc.action=end of major GC,jvm.gc.name=MarkSweepCompact}\n- Shenandoah Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of GC cycle,jvm.gc.name=Shenandoah Cycles}, {jvm.gc.action=end of GC pause,jvm.gc.name=Shenandoah Pauses}\n- Z Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of GC cycle,jvm.gc.name=ZGC Cycles}, {jvm.gc.action=end of GC pause,jvm.gc.name=ZGC Pauses}\n",
      "name": "runtime-telemetry-java8",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java8"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java8"
    },
    {
      "name": "rxjava-1.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-1.0",
      "target_versions": {
        "library": [
          "io.reactivex:rxjava:1.0.7"
        ]
      }
    },
    {
      "name": "rxjava-2.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-2.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava2:rxjava:[2.0.6,)"
        ],
        "library": [
          "io.reactivex.rxjava2:rxjava:2.1.3"
        ]
      }
    },
    {
      "name": "rxjava-3.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.0.0,3.1.0]"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:[3.0.12,3.1.0)"
        ]
      }
    },
    {
      "name": "rxjava-3.1.1",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.1.1",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.1.1,)"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:3.1.1"
        ]
      }
    },
    {
      "name": "scala-fork-join-2.8",
      "scope": {
        "name": "io.opentelemetry.scala-fork-join-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/scala-fork-join-2.8",
      "target_versions": {
        "javaagent": [
          "org.scala-lang:scala-library:[2.8.0,2.12.0)"
        ]
      }
    },
    {
      "name": "servlet-2.2",
      "scope": {
        "name": "io.opentelemetry.servlet-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-2.2",
      "target_versions": {
        "javaagent": [
          "javax.servlet:servlet-api:[2.2, 3.0)"
        ]
      }
    },
    {
      "name": "servlet-3.0",
      "scope": {
        "name": "io.opentelemetry.servlet-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-3.0",
      "target_versions": {
        "javaagent": [
          "javax.servlet:javax.servlet-api:[3.0,)"
        ]
      }
    },
    {
      "name": "servlet-5.0",
      "scope": {
        "name": "io.opentelemetry.servlet-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-5.0",
      "target_versions": {
        "javaagent": [
          "jakarta.servlet:jakarta.servlet-api:[5.0.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it extracts the HTTP route and attaches it to HTTP server spans and HTTP server metrics.\n",
      "library_link": "https://sparkjava.com/",
      "name": "spark-2.3",
      "scope": {
        "name": "io.opentelemetry.spark-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/spark-2.3",
      "target_versions": {
        "javaagent": [
          "com.sparkjava:spark-core:[2.3,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental attribute `job.system` to spans.",
          "name": "otel.instrumentation.spring-batch.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, a new root span will be created for each chunk processing. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.experimental.chunk.new-trace",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, spans will be created for each item processed. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.item.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables INTERNAL spans for jobs run by the Spring Batch framework.",
      "disabled_by_default": true,
      "library_link": "https://spring.io/projects/spring-batch",
      "name": "spring-batch-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-batch-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-batch-3.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.batch:spring-batch-core:[3.0.0.RELEASE,5)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-batch.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation configures the OpenTelemetry Micrometer bridge to receive metrics from Spring Boot Actuator. It does not produce telemetry on its own.\n",
      "disabled_by_default": true,
      "library_link": "https://spring.io/projects/spring-boot",
      "name": "spring-boot-actuator-autoconfigure-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-boot-actuator-autoconfigure-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-actuator-autoconfigure-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.boot:spring-boot-actuator-autoconfigure:[2.0.0.RELEASE,)"
        ]
      }
    },
    {
      "description": "This instrumentation automatically detects the `service.name` and `service.version` for Spring Boot applications and sets them as resource attributes.\nIt uses the following strategies (first successful wins):\n  - Check for the SPRING_APPLICATION_NAME environment variable\n  - Check for spring.application.name system property\n  - Check for application.properties file on the classpath\n  - Check for application.properties in the current working dir\n  - Check for application.yml on the classpath\n  - Check for application.yml in the current working dir\n  - Check for --spring.application.name program argument (not jvm arg) via ProcessHandle\n  - Check for --spring.application.name program argument via sun.java.command system property\n",
      "library_link": "https://spring.io/projects/spring-boot",
      "name": "spring-boot-resources",
      "scope": {
        "name": "io.opentelemetry.spring-boot-resources"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-resources"
    },
    {
      "description": "This instrumentation enhances tracing for Spring Cloud AWS. It augments the existing AWS SDK instrumentation by providing higher-level tracing for SQS operations, capturing details specific to Spring Cloud AWS SQS usage and linking them to the underlying AWS SDK traces.\n",
      "library_link": "https://spring.io/projects/spring-cloud-aws",
      "minimum_java_version": 17,
      "name": "spring-cloud-aws-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-aws-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-aws-3.0",
      "target_versions": {
        "javaagent": [
          "io.awspring.cloud:spring-cloud-aws-sqs:[3.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `spring-cloud-gateway.route` attributes (e.g., `spring-cloud-gateway.route.id`, `spring-cloud-gateway.route.uri`, etc.) on spans.\n",
          "name": "otel.instrumentation.spring-cloud-gateway.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enhances tracing for Spring Cloud Gateway. It does not generate new telemetry on its own, but rather enriches existing traces produced by other instrumentations like Netty and Spring WebFlux with Spring Cloud Gateway-specific attributes.\n",
      "library_link": "https://github.com/spring-cloud/spring-cloud-gateway",
      "name": "spring-cloud-gateway-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-gateway-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-gateway/spring-cloud-gateway-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.cloud:spring-cloud-starter-gateway:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "description": "This instrumentation ensures proper context propagation for asynchronous operations within Spring Core. It modifies how tasks are submitted and executed to ensure that spans created by other instrumentations are correctly linked across thread boundaries, rather than generating any new telemetry itself.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/package-summary.html",
      "minimum_java_version": 17,
      "name": "spring-core-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-core-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-core-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-core:[2.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation enhances tracing for Spring Data operations. It works in conjunction with other instrumentations, such as JDBC, to provide additional context and details for database interactions initiated through Spring Data.\n",
      "library_link": "https://spring.io/projects/spring-data",
      "name": "spring-data-1.8",
      "scope": {
        "name": "io.opentelemetry.spring-data-1.8"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-data/spring-data-1.8",
      "target_versions": {
        "javaagent": [
          "org.springframework.data:spring-data-commons:[1.8.0.RELEASE,]",
          "org.springframework:spring-aop:[1.2,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": "*",
          "description": "An array of Spring channel name patterns that will be intercepted.",
          "name": "otel.instrumentation.spring-integration.global-channel-interceptor-patterns",
          "type": "list"
        },
        {
          "default": false,
          "description": "Create producer spans when messages are sent to an output channel. Enable when you're using a messaging library that doesn't have its own instrumentation for generating producer spans. Note that the detection of output channels only works for Spring Cloud Stream `DirectWithAttributesChannel`.\n",
          "name": "otel.instrumentation.spring-integration.producer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables producer and consumer messaging spans for Spring Integration.",
      "library_link": "https://spring.io/projects/spring-integration",
      "name": "spring-integration-4.1",
      "scope": {
        "name": "io.opentelemetry.spring-integration-4.1"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-integration-4.1",
      "target_versions": {
        "javaagent": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,)"
        ],
        "library": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,5.+)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "otel.instrumentation.spring-integration.producer.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of consumer messaging spans for Spring JMS.",
      "library_link": "https://docs.spring.io/spring-framework/reference/integration/jms.html",
      "name": "spring-jms-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-2.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[2.0,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of consumer messaging spans for Spring JMS.",
      "library_link": "https://docs.spring.io/spring-framework/reference/integration/jms.html",
      "minimum_java_version": 17,
      "name": "spring-jms-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-6.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `kafka.record.queue_time_ms`",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables consumer messaging spans for Spring Kafka listeners.",
      "library_link": "https://spring.io/projects/spring-kafka",
      "name": "spring-kafka-2.7",
      "scope": {
        "name": "io.opentelemetry.spring-kafka-2.7"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-kafka-2.7",
      "target_versions": {
        "javaagent": [
          "org.springframework.kafka:spring-kafka:[2.7.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "kafka.record.queue_time_ms",
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "otel.instrumentation.kafka.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `messaging.pulsar.message.type` on PRODUCER spans.\n",
          "name": "otel.instrumentation.pulsar.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables consumer messaging spans for Spring Pulsar listeners.",
      "library_link": "https://spring.io/projects/spring-pulsar",
      "minimum_java_version": 17,
      "name": "spring-pulsar-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-pulsar-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-pulsar-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.pulsar:spring-pulsar:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables consumer messaging spans for Spring RabbitMQ listeners.",
      "library_link": "https://spring.io/projects/spring-amqp",
      "name": "spring-rabbit-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-rabbit-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-rabbit-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.amqp:spring-rabbit:(,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables RPC client and RPC server spans for Spring RMI applications.",
      "library_link": "https://docs.spring.io/spring-framework/docs/4.0.x/javadoc-api/org/springframework/remoting/rmi/package-summary.html",
      "name": "spring-rmi-4.0",
      "scope": {
        "name": "io.opentelemetry.spring-rmi-4.0"
      },
      "semconv": [
        "Aws"
      ],
      "source_path": "instrumentation/spring/spring-rmi-4.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[4.0.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental span attribute `job.system` with the value `spring_scheduling`.",
          "name": "otel.instrumentation.spring-scheduling.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Spring Scheduling tasks.",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/package-summary.html",
      "name": "spring-scheduling-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-scheduling-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-scheduling-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[3.1.0.RELEASE,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-scheduling.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing the enduser.id attribute.",
          "name": "otel.instrumentation.common.enduser.id.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.role attribute.",
          "name": "otel.instrumentation.common.enduser.role.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.scope attribute.",
          "name": "otel.instrumentation.common.enduser.scope.enabled",
          "type": "boolean"
        },
        {
          "default": "ROLE_",
          "description": "Prefix of granted authorities identifying roles to capture in the `enduser.role` semantic attribute.",
          "name": "otel.instrumentation.spring-security.enduser.role.granted-authority-prefix",
          "type": "string"
        },
        {
          "default": "SCOPE_",
          "description": "Prefix of granted authorities identifying scopes to capture in the `enduser.scopes` semantic attribute.",
          "name": "otel.instrumentation.spring-security.scope.role.granted-authority-prefix",
          "type": "string"
        }
      ],
      "description": "This instrumentation does not emit any telemetry on its own. Instead, it captures enduser attributes, and is only enabled when at least one of the `enduser` configurations is enabled.\nNOTE: The `enduser` attributes have been deprecated and will be removed in 3.0+ of the java agent.\n",
      "library_link": "https://spring.io/projects/spring-security",
      "markdown_content": "# OpenTelemetry Instrumentation: Spring Security Config\n\nProvides a Servlet `Filter` and a WebFlux `WebFilter` to capture `enduser.*` semantic attributes\nfrom Spring Security `Authentication` objects.\n\nAlso provides `Customizer` implementations to insert those filters into the filter chains created by\n`HttpSecurity` and `ServerHttpSecurity`, respectively.\n\n## Usage in Spring WebMVC Applications\n\nWhen not using [automatic instrumentation](../javaagent/), you can enable enduser attribute capturing\nfor a `SecurityFilterChain` by appling an `EnduserAttributesHttpSecurityCustomizer`\nto the `HttpSecurity` which constructs the `SecurityFilterChain`.\n\n```java\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.EnduserAttributesCapturer;\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.servlet.EnduserAttributesHttpSecurityCustomizer;\n\n@Configuration\n@EnableWebSecurity\nclass MyWebSecurityConfig {\n\n  @Bean\n  public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    // First, apply application related configuration to http\n\n    // Then, apply enduser.* attribute capturing\n    EnduserAttributesCapturer capturer = new EnduserAttributesCapturer();\n    // Set properties of capturer.  Defaults shown.\n    capturer.setEnduserIdEnabled(false);\n    capturer.setEnduserRoleEnabled(false);\n    capturer.setEnduserScopeEnabled(false);\n    capturer.setRoleGrantedAuthorityPrefix(\"ROLE_\");\n    capturer.setScopeGrantedAuthorityPrefix(\"SCOPE_\");\n\n    new EnduserAttributesHttpSecurityCustomizer(capturer)\n        .customize(http);\n\n    return http.build();\n  }\n}\n```\n\n## Usage in Spring WebFlux Applications\n\nWhen not using [automatic instrumentation](../javaagent/), you can enable enduser attribute capturing\nfor a `SecurityWebFilterChain` by appling an `EnduserAttributesServerHttpSecurityCustomizer`\nto the `ServerHttpSecurity` which constructs the `SecurityWebFilterChain`.\n\n```java\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.EnduserAttributesCapturer;\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.webflux.EnduserAttributesServerHttpSecurityCustomizer;\n\n@Configuration\n@EnableWebFluxSecurity\nclass MyWebFluxSecurityConfig {\n\n  @Bean\n  public SecurityWebFilterChain filterChain(ServerHttpSecurity http) throws Exception {\n    // First, apply application related configuration to http\n\n    // Then, apply enduser.* attribute capturing\n    EnduserAttributesCapturer capturer = new EnduserAttributesCapturer();\n    // Set properties of capturer.  Defaults shown.\n    capturer.setEnduserIdEnabled(false);\n    capturer.setEnduserRoleEnabled(false);\n    capturer.setEnduserScopeEnabled(false);\n    capturer.setRoleGrantedAuthorityPrefix(\"ROLE_\");\n    capturer.setScopeGrantedAuthorityPrefix(\"SCOPE_\");\n\n    new EnduserAttributesServerHttpSecurityCustomizer(capturer)\n        .customize(http);\n\n    return http.build();\n  }\n}\n```\n",
      "minimum_java_version": 17,
      "name": "spring-security-config-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-security-config-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-security-config-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.security:spring-security-config:[6.0.0,]"
        ],
        "library": [
          "io.projectreactor:reactor-core:3.5.0",
          "jakarta.servlet:jakarta.servlet-api:6.0.0",
          "org.springframework.security:spring-security-config:6.0.0",
          "org.springframework.security:spring-security-web:6.0.0",
          "org.springframework:spring-web:6.0.0"
        ]
      }
    },
    {
      "description": "This instrumentation provides a library integration that enables capturing HTTP client spans and metrics for Spring's RestTemplate. The agent integration enriches HTTP server spans and metrics with route information.\n",
      "library_link": "https://github.com/spring-projects/spring-framework",
      "markdown_content": "# Library Instrumentation for Spring Web version 3.1 and higher\n\nProvides OpenTelemetry instrumentation for Spring's RestTemplate.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `SPRING_VERSION` with the version of spring you're using.\n`Minimum version: 3.1`\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-spring-web-3.1).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <!-- opentelemetry -->\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-web-3.1</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- provides opentelemetry-sdk -->\n  <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-logging</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- required to instrument spring-web -->\n  <!-- this artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-web</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-web-3.1:OPENTELEMETRY_VERSION\")\nimplementation(\"io.opentelemetry:opentelemetry-exporter-logging:OPENTELEMETRY_VERSION\")\n\n//this artifact should already be present in your application\nimplementation(\"org.springframework:spring-web:SPRING_VERSION\")\n```\n\n### Features\n\n#### Telemetry-producing `ClientHttpRequestInterceptor` implementation\n\n`SpringWebTelemetry` allows creating a\ncustom [ClientHttpRequestInterceptor](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/ClientHttpRequestInterceptor.html)\nthat produces telemetry for HTTP requests sent using a `RestTemplate`. Example:\n\n##### Usage\n\n```java\n\nimport io.opentelemetry.instrumentation.spring.web.SpringWebTelemetry;\nimport io.opentelemetry.api.OpenTelemetry;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.ClientHttpRequestInterceptor;\nimport org.springframework.web.client.RestTemplate;\n\n@Configuration\npublic class RestTemplateConfig {\n\n  @Bean\n  public RestTemplate restTemplate(OpenTelemetry openTelemetry) {\n\n    RestTemplate restTemplate = new RestTemplate();\n    SpringWebTelemetry telemetry = SpringWebTelemetry.create(openTelemetry);\n    restTemplate.getInterceptors().add(telemetry.newInterceptor());\n\n    return restTemplate;\n  }\n}\n```\n\n### Starter Guide\n\nCheck out [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/) to learn more about\nusing the OpenTelemetry API to instrument your code.\n",
      "name": "spring-web-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-web-3.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-web/spring-web-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enriches HTTP server spans and metrics with route information.",
      "library_link": "https://github.com/spring-projects/spring-framework",
      "minimum_java_version": 17,
      "name": "spring-web-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-web-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-web/spring-web-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[6.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and metrics for Spring WebFlux 5.0. It also optionally enables experimental controller (INTERNAL) spans.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/package-summary.html",
      "name": "spring-webflux-5.0",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.0"
      },
      "semconv": [
        "Code",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.ipc:reactor-netty:[0.7.0.RELEASE,)",
          "io.projectreactor.netty:reactor-netty:[0.8.0.RELEASE,)",
          "org.springframework:spring-webflux:[5.0.0.RELEASE,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.controller-telemetry.enabled"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for the Spring WebFlux WebClient and Webflux server versions 5.3+ that enables HTTP client and server spans and metrics.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/package-summary.html",
      "markdown_content": "# Library Instrumentation for Spring Webflux\n\nProvides OpenTelemetry instrumentation for Spring's `WebClient` and Webflux server.\n\nFor this instrumentation, the minimum supported version of Spring Webflux is 5.3.0.\n\n## Add dependencies to your project\n\nFor Maven, add to your `pom.xml`:\n\n```xml\n\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-webflux-5.3</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- This artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webflux</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-webflux-5.3:OPENTELEMETRY_VERSION\")\n\n// this artifact should already be present in your application\nimplementation(\"org.springframework:spring-webflux:SPRING_VERSION\")\n```\n\n## Features\n\n`SpringWebfluxTelemetry` can emit a client span for each request sent using `WebClient` by\nimplementing\nthe [ExchangeFilterFunction](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/reactive/function/client/ExchangeFilterFunction.html)\ninterface.\n\n`SpringWebfluxTelemetry` can also emit a server span for each request received, by implementing\na `WebFilter` and using the OpenTelemetry Reactor instrumentation to ensure context is\npassed around correctly.\n\n### Web client instrumentation\n\nThe `WebClient` instrumentation will emit the `error.type` attribute with value `cancelled` whenever\nan outgoing HTTP request is cancelled.\n\n### Setup\n\nHere is how to set up client and server instrumentation respectively:\n\n```java\nimport io.opentelemetry.instrumentation.spring.webflux.v5_3.SpringWebfluxClientTelemetry;\nimport io.opentelemetry.instrumentation.spring.webflux.v5_3.SpringWebfluxServerTelemetry;\n\n@Configuration\npublic class WebClientConfig {\n  private final SpringWebfluxClientTelemetry webfluxClientTelemetry;\n  private final SpringWebfluxServerTelemetry webfluxServerTelemetry;\n\n  public WebClientConfig(OpenTelemetry openTelemetry) {\n    this.webfluxClientTelemetry = SpringWebfluxClientTelemetry.builder(openTelemetry).build();\n  }\n\n  // Adds instrumentation to WebClients\n  @Bean\n  public WebClient.Builder webClient() {\n    WebClient webClient = WebClient.create();\n    return webClient.mutate().filters(webfluxClientTelemetry::addFilter);\n  }\n\n  // Adds instrumentation to Webflux server\n  @Bean\n  public WebFilter webFilter() {\n    return webfluxServerTelemetry.createWebFilterAndRegisterReactorHook();\n  }\n}\n```\n\n## Starter Guide\n\nCheck\nout [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/)\nto learn more about using the OpenTelemetry API to instrument your code.\n",
      "name": "spring-webflux-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.3",
      "target_versions": {
        "library": [
          "org.springframework:spring-webflux:5.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 3.1+.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html",
      "name": "spring-webmvc-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for Spring WebMVC controllers, that enables the creation of HTTP server spans and metrics for requests processed by the Spring servlet container.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html",
      "markdown_content": "# Library Instrumentation for Spring Web MVC version 5.3 and higher\n\nProvides OpenTelemetry instrumentation for Spring WebMVC controllers.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `SPRING_VERSION` with the version of spring you're using.\n\n- `Minimum version: 5.3`\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-spring-webmvc-5.3).\n\nFor Maven add the following to your `pom.xml`:\n\n```xml\n<dependencies>\n  <!-- OpenTelemetry instrumentation -->\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-webmvc-5.3</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n   <!-- OpenTelemetry exporter -->\n   <!-- replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..) -->\n   <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-logging</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- required to instrument Spring WebMVC -->\n  <!-- this artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n\n</dependencies>\n```\n\nFor Gradle add the following to your dependencies:\n\n```groovy\n\n// OpenTelemetry instrumentation\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-5.3:OPENTELEMETRY_VERSION\")\n\n// OpenTelemetry exporter\n// replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..)\nimplementation(\"io.opentelemetry:opentelemetry-exporter-logging:OPENTELEMETRY_VERSION\")\n\n// required to instrument Spring WebMVC\n// this artifact should already be present in your application\nimplementation(\"org.springframework:spring-webmvc:SPRING_VERSION\")\n```\n\n### Features\n\n#### `SpringWebMvcTelemetry`\n\n`SpringWebMvcTelemetry` enables creating OpenTelemetry server spans around HTTP requests processed\nby the Spring servlet container.\n\n##### Usage in Spring Boot\n\nSpring Boot allows servlet `Filter`s to be registered as beans:\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.spring.webmvc.v5_3.SpringWebMvcTelemetry;\nimport javax.servlet.Filter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SpringWebMvcTelemetryConfiguration {\n\n   @Bean\n   public Filter telemetryFilter(OpenTelemetry openTelemetry) {\n      return SpringWebMvcTelemetry.create(openTelemetry).createServletFilter();\n   }\n}\n```\n\n### Starter Guide\n\nCheck\nout [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/)\nto learn more about using the OpenTelemetry API to instrument your code.\n",
      "name": "spring-webmvc-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-5.3",
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 6.0+.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html",
      "markdown_content": "# Library Instrumentation for Spring Web MVC version 6.0.0 and higher\n\nProvides OpenTelemetry instrumentation for Spring WebMVC controllers.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `SPRING_VERSION` with the version of spring you're using.\n\n- `Minimum version: 6.0.0`\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-spring-webmvc-6.0).\n\nFor Maven add the following to your `pom.xml`:\n\n```xml\n<dependencies>\n  <!-- OpenTelemetry instrumentation -->\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-webmvc-6.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n   <!-- OpenTelemetry exporter -->\n   <!-- replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..) -->\n   <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-logging</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- required to instrument Spring WebMVC -->\n  <!-- this artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n\n</dependencies>\n```\n\nFor Gradle add the following to your dependencies:\n\n```groovy\n\n// OpenTelemetry instrumentation\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-6.0:OPENTELEMETRY_VERSION\")\n\n// OpenTelemetry exporter\n// replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..)\nimplementation(\"io.opentelemetry:opentelemetry-exporter-logging:OPENTELEMETRY_VERSION\")\n\n// required to instrument Spring WebMVC\n// this artifact should already be present in your application\nimplementation(\"org.springframework:spring-webmvc:SPRING_VERSION\")\n```\n\n### Features\n\n#### `SpringWebMvcTelemetry`\n\n`SpringWebMvcTelemetry` enables creating OpenTelemetry server spans around HTTP requests processed\nby the Spring servlet container.\n\n##### Usage in Spring Boot\n\nSpring Boot allows servlet `Filter`s to be registered as beans:\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.spring.webmvc.v6_0.SpringWebMvcTelemetry;\nimport jakarta.servlet.Filter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SpringWebMvcTelemetryConfiguration {\n\n   @Bean\n   public Filter telemetryFilter(OpenTelemetry openTelemetry) {\n      return SpringWebMvcTelemetry.create(openTelemetry).createServletFilter();\n   }\n}\n```\n\n### Starter Guide\n\nCheck\nout [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/)\nto learn more about using the OpenTelemetry API to instrument your code.\n",
      "minimum_java_version": 17,
      "name": "spring-webmvc-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-6.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "disabled_by_default": true,
      "library_link": "https://spring.io/projects/spring-ws",
      "name": "spring-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-ws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-ws-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.ws:spring-ws-core:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "name": "spymemcached-2.12",
      "scope": {
        "name": "io.opentelemetry.spymemcached-2.12"
      },
      "semconv": [],
      "source_path": "instrumentation/spymemcached-2.12",
      "target_versions": {
        "javaagent": [
          "net.spy:spymemcached:[2.12.0,)"
        ]
      }
    },
    {
      "name": "struts-2.3",
      "scope": {
        "name": "io.opentelemetry.struts-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[2.1.0,7)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "struts-7.0",
      "scope": {
        "name": "io.opentelemetry.struts-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[7.0.0,)"
        ]
      }
    },
    {
      "name": "tapestry-5.4",
      "scope": {
        "name": "io.opentelemetry.tapestry-5.4"
      },
      "semconv": [],
      "source_path": "instrumentation/tapestry-5.4",
      "target_versions": {
        "javaagent": [
          "org.apache.tapestry:tapestry-core:[5.4.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "tomcat-10.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-10.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[10,)"
        ]
      }
    },
    {
      "name": "tomcat-7.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[7.0.4, 10)"
        ]
      }
    },
    {
      "name": "tomcat-jdbc",
      "scope": {
        "name": "io.opentelemetry.tomcat-jdbc"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/tomcat/tomcat-jdbc",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jdbc:[8.5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "twilio-6.6",
      "scope": {
        "name": "io.opentelemetry.twilio-6.6"
      },
      "semconv": [],
      "source_path": "instrumentation/twilio-6.6",
      "target_versions": {
        "javaagent": [
          "com.twilio.sdk:twilio:(,8.0.0)"
        ]
      }
    },
    {
      "name": "undertow-1.4",
      "scope": {
        "name": "io.opentelemetry.undertow-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/undertow-1.4",
      "target_versions": {
        "javaagent": [
          "io.undertow:undertow-core:[1.4.0.Final,)"
        ]
      }
    },
    {
      "name": "vaadin-14.2",
      "scope": {
        "name": "io.opentelemetry.vaadin-14.2"
      },
      "semconv": [],
      "source_path": "instrumentation/vaadin-14.2",
      "target_versions": {
        "javaagent": [
          "com.vaadin:flow-server:[2.2.0,3)",
          "com.vaadin:flow-server:[3.1.0,)"
        ]
      }
    },
    {
      "name": "vertx-http-client-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[3.0.0,4.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-http-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-4.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-http-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-5.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-kafka-client-3.6",
      "scope": {
        "name": "io.opentelemetry.vertx-kafka-client-3.6"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-kafka-client-3.6",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-kafka-client:[3.5.1,)"
        ]
      }
    },
    {
      "name": "vertx-redis-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-redis-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-redis-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-redis-client:[4.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.redis.database_index",
                  "type": "LONG"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "vertx-rx-java-3.5",
      "scope": {
        "name": "io.opentelemetry.vertx-rx-java-3.5"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-rx-java-3.5",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-rx-java2:[3.5.0,)"
        ]
      }
    },
    {
      "name": "vertx-sql-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.sql.table",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.user",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-sql-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.sql.table",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.user",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "vertx-web-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-web-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-web-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-web:[3.0.0,)"
        ]
      }
    },
    {
      "description": "Instrumentation for the vibur-dbcp library, which provides connection pool metrics.",
      "library_link": "https://www.vibur.org/",
      "markdown_content": "# Library Instrumentation for Vibur DBCP version 11.0 and higher\n\nProvides OpenTelemetry instrumentation for [Vibur DBCP](https://www.vibur.org/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://search.maven.org/search?q=g:io.opentelemetry.instrumentation%20AND%20a:opentelemetry-vibur-dbcp-11.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-vibur-dbcp-11.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-vibur-dbcp-11.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `ViburDBCPDataSource` instances for collecting\nOpenTelemetry-based metrics.\n\n```java\nViburTelemetry viburTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, ViburDBCPDataSource viburDataSource) {\n  viburTelemetry = ViburTelemetry.create(openTelemetry);\n  viburTelemetry.registerMetrics(viburDataSource);\n}\n\nvoid destroy(ViburDBCPDataSource viburDataSource) {\n  viburTelemetry.unregisterMetrics(viburDataSource);\n}\n```\n",
      "name": "vibur-dbcp-11.0",
      "scope": {
        "name": "io.opentelemetry.vibur-dbcp-11.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vibur-dbcp-11.0",
      "target_versions": {
        "javaagent": [
          "org.vibur:vibur-dbcp:[11.0,)"
        ],
        "library": [
          "org.vibur:vibur-dbcp:11.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "wicket-8.0",
      "scope": {
        "name": "io.opentelemetry.wicket-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/wicket-8.0",
      "target_versions": {
        "javaagent": [
          "org.apache.wicket:wicket:[8.0.0,]"
        ]
      }
    },
    {
      "name": "xxl-job-1.9.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-1.9.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-1.9.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[1.9.2, 2.1.2)"
        ]
      }
    },
    {
      "name": "xxl-job-2.1.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.1.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.1.2,2.3.0)"
        ]
      }
    },
    {
      "name": "xxl-job-2.3.0",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.3.0",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.3.0,)"
        ]
      }
    },
    {
      "name": "zio-2.0",
      "scope": {
        "name": "io.opentelemetry.zio-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/zio/zio-2.0",
      "target_versions": {
        "javaagent": [
          "dev.zio:zio_2.12:[2.0.0,)",
          "dev.zio:zio_2.13:[2.0.0,)",
          "dev.zio:zio_3:[2.0.0,)"
        ]
      }
    }
  ],
  "2.20": [
    {
      "configurations": [
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.size` and `http.server.response.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP server spans and HTTP server metrics for the ActiveJ HTTP server.",
      "display_name": "ActiveJ",
      "library_link": "https://activej.io/",
      "minimum_java_version": 17,
      "name": "activej-http-6.0",
      "scope": {
        "name": "io.opentelemetry.activej-http-6.0"
      },
      "semantic_conventions": [
        "HTTP_SERVER_METRICS",
        "HTTP_SERVER_SPANS"
      ],
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/activej-http-6.0",
      "target_versions": {
        "javaagent": [
          "io.activej:activej-http:[6.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides context propagation for Akka actors, it does not emit any telemetry on its own.",
      "display_name": "Akka Actors",
      "features": [
        "CONTEXT_PROPAGATION"
      ],
      "library_link": "https://doc.akka.io/libraries/akka-core/current/typed/index.html",
      "name": "akka-actor-2.3",
      "scope": {
        "name": "io.opentelemetry.akka-actor-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-2.3",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.3,)",
          "com.typesafe.akka:akka-actor_2.12:[2.3,)",
          "com.typesafe.akka:akka-actor_2.13:[2.3,)"
        ]
      }
    },
    {
      "description": "This instrumentation provides context propagation for the Akka Fork-Join Pool, it does not emit any telemetry on its own.",
      "display_name": "Akka Actors",
      "features": [
        "CONTEXT_PROPAGATION"
      ],
      "library_link": "https://doc.akka.io/libraries/akka-core/current/typed/index.html",
      "name": "akka-actor-fork-join-2.5",
      "scope": {
        "name": "io.opentelemetry.akka-actor-fork-join-2.5"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-fork-join-2.5",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.5,)",
          "com.typesafe.akka:akka-actor_2.12:[2.5,2.6)",
          "com.typesafe.akka:akka-actor_2.13:[2.5.23,2.6)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.size` and `http.server.response.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and metrics for the Akka HTTP client, and HTTP server spans and metrics for the Akka HTTP server.\n",
      "display_name": "Akka HTTP",
      "features": [
        "CONTEXT_PROPAGATION",
        "HTTP_ROUTE"
      ],
      "library_link": "https://doc.akka.io/docs/akka-http/current/index.html",
      "name": "akka-http-10.0",
      "scope": {
        "name": "io.opentelemetry.akka-http-10.0"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS",
        "HTTP_SERVER_METRICS",
        "HTTP_SERVER_SPANS"
      ],
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/akka/akka-http-10.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-http_2.11:[10,)",
          "com.typesafe.akka:akka-http_2.12:[10,)",
          "com.typesafe.akka:akka-http_2.13:[10,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Opt-in to emit stable semantic conventions instead of the old experimental semantic conventions. Accepts a comma-separated list of semantic convention groups (e.g., `database`, `http`, `messaging`). Use `<group>/dup` to emit both old and new conventions simultaneously. Stable semantic conventions will become the default in version 3.0 of the agent.\n",
          "name": "otel.semconv-stability.opt-in",
          "type": "list"
        }
      ],
      "description": "The Alibaba Druid instrumentation generates database connection pool metrics for druid data sources.\n",
      "library_link": "https://github.com/alibaba/druid",
      "markdown_content": "# Library Instrumentation for Alibaba Druid version 1.0 and higher\n\nProvides OpenTelemetry instrumentation for [Alibaba Druid](https://github.com/alibaba/druid),\nenabling database connection pool metrics for druid data sources.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-alibaba-druid-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-alibaba-druid-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-alibaba-druid-1.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\n```java\nimport com.alibaba.druid.pool.DruidDataSource;\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.alibabadruid.v1_0.DruidTelemetry;\n\n// ...\n\n// Get an OpenTelemetry instance\nOpenTelemetry openTelemetry = ...;\n\n// Create a DruidTelemetry instance\nDruidTelemetry druidTelemetry = DruidTelemetry.create(openTelemetry);\n\n// Create a DruidDataSource\nDruidDataSource dataSource = new DruidDataSource();\n// ... configure the dataSource\n\n// Register the dataSource for metrics\ndruidTelemetry.registerMetrics(dataSource, \"my-druid-pool\");\n\n// Unregister the dataSource when it's no longer needed\ndruidTelemetry.unregisterMetrics(dataSource);\n```\n",
      "name": "alibaba-druid-1.0",
      "scope": {
        "name": "io.opentelemetry.alibaba-druid-1.0"
      },
      "semantic_conventions": [
        "DATABASE_POOL_METRICS"
      ],
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/alibaba-druid-1.0",
      "target_versions": {
        "javaagent": [
          "com.alibaba:druid:(,)"
        ],
        "library": [
          "com.alibaba:druid:1.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Opt-in to emit stable semantic conventions instead of the old experimental semantic conventions. Accepts a comma-separated list of semantic convention groups (e.g., `database`, `http`, `messaging`). Use `<group>/dup` to emit both old and new conventions simultaneously. Stable semantic conventions will become the default in version 3.0 of the agent.\n",
          "name": "otel.semconv-stability.opt-in",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database connection pools metrics for Apache DBCP.\nThe instrumentation uses `MBeanRegistration` methods for lifecycle detection, therefore it only activates if the `BasicDataSource` is registered to an `MBeanServer`. If using Spring Boot, this happens automatically as all Spring beans that support JMX registration are automatically registered by default.\n",
      "display_name": "Apache DBCP",
      "library_link": "https://commons.apache.org/proper/commons-dbcp/",
      "markdown_content": "# Library Instrumentation for Apache DBCP version 2.0 and higher\n\nProvides OpenTelemetry instrumentation for [Apache DBCP](https://commons.apache.org/proper/commons-dbcp/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease](https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-apache-dbcp-2.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-apache-dbcp-2.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-apache-dbcp-2.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `BasicDataSourceMXBean` instances for collecting\nOpenTelemetry-based metrics. A non-null name of the data source must be explicitly provided.\n\n```java\nApacheDbcpTelemetry apacheDbcpTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, BasicDataSourceMXBean dataSource, String dataSourceName) {\n  apacheDbcpTelemetry = ApacheDbcpTelemetry.create(openTelemetry);\n  apacheDbcpTelemetry.registerMetrics(dataSource, dataSourceName);\n}\n\nvoid destroy(BasicDataSourceMXBean dataSource) {\n  apacheDbcpTelemetry.unregisterMetrics(dataSource);\n}\n```\n",
      "name": "apache-dbcp-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-dbcp-2.0"
      },
      "semantic_conventions": [
        "DATABASE_POOL_METRICS"
      ],
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/apache-dbcp-2.0",
      "target_versions": {
        "javaagent": [
          "org.apache.commons:commons-dbcp2:[2,)"
        ],
        "library": [
          "org.apache.commons:commons-dbcp2:2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        }
      ],
      "description": "The Apache Dubbo instrumentation provides RPC client spans and metrics, and RPC server spans and metrics for Apache Dubbo RPC calls.\n",
      "display_name": "Apache Dubbo",
      "library_link": "https://github.com/apache/dubbo/",
      "name": "apache-dubbo-2.7",
      "scope": {
        "name": "io.opentelemetry.apache-dubbo-2.7"
      },
      "semantic_conventions": [
        "RPC_CLIENT_METRICS",
        "RPC_CLIENT_SPANS",
        "RPC_SERVER_METRICS",
        "RPC_SERVER_SPANS"
      ],
      "semconv": [
        "Aws",
        "Database Client",
        "Rpc"
      ],
      "source_path": "instrumentation/apache-dubbo-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.dubbo:dubbo:[2.7,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an outbound RPC invocation.",
              "name": "rpc.client.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The duration of an inbound RPC invocation.",
              "name": "rpc.server.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for the Apache HttpAsyncClient.",
      "display_name": "Apache HttpAsyncClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpasyncclient-4.1",
      "scope": {
        "name": "io.opentelemetry.apache-httpasyncclient-4.1"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpasyncclient-4.1",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents:httpasyncclient:[4.1,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for versions 2 and 3 of the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-2.0"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-2.0",
      "target_versions": {
        "javaagent": [
          "commons-httpclient:commons-httpclient:[2.0,4.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 4 of the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-4.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.0"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-client:(,3.0.0)",
          "org.apache.httpcomponents:httpclient:[4.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables HTTP client spans and HTTP client metrics for the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "markdown_content": "# Library Instrumentation for Apache HttpClient version 4.3 and higher\n\nProvides OpenTelemetry instrumentation for the [Apache HttpClient](https://hc.apache.org/httpcomponents-client-ga/), enabling HTTP client spans and metrics.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-apache-httpclient-4.3).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-apache-httpclient-4.3</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-apache-httpclient-4.3:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.apachehttpclient.v4_3.ApacheHttpClientTelemetry;\nimport org.apache.http.impl.client.CloseableHttpClient;\n\n// ...\n\n// Get an OpenTelemetry instance\nOpenTelemetry openTelemetry = ...;\n\n// Create an ApacheHttpClientTelemetry instance\nApacheHttpClientTelemetry telemetry = ApacheHttpClientTelemetry.create(openTelemetry);\n\n// Get a traced HttpClient\nCloseableHttpClient httpClient = telemetry.newHttpClient();\n\n// ... use the httpClient to make requests\n```\n",
      "name": "apache-httpclient-4.3",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.3"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.3",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents:httpclient:[4.3,4.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 5 of the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-5.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.0"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents.client5:httpclient5:[5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables HTTP client spans and HTTP client metrics for the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "markdown_content": "# Library Instrumentation for Apache Http client version 5.2\n\nProvides OpenTelemetry instrumentation for [Apache Http Client 5.2](https://hc.apache.org/httpcomponents-client-5.2.x/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-apache-httpclient-5.2).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-apache-httpclient-5.2</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-apache-httpclient-5.2:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides the class `ApacheHttpClientTelemetry` that has a builder\nmethod and allows the creation of an instance of the `HttpClientBuilder` to provide\nOpenTelemetry-based spans and context propagation:\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.apachehttpclient.v5_2.ApacheHttpClientTelemetry;\nimport org.apache.hc.client5.http.classic.HttpClient;\nimport org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n\npublic class ApacheHttpClientConfiguration {\n\n  private OpenTelemetry openTelemetry;\n\n  public ApacheHttpClientConfiguration(OpenTelemetry openTelemetry) {\n    this.openTelemetry = openTelemetry;\n  }\n\n  // creates a new http client builder for constructing http clients with opentelemetry instrumentation\n  public HttpClientBuilder createBuilder() {\n    return ApacheHttpClientTelemetry.builder(openTelemetry).build().newHttpClientBuilder();\n  }\n\n  // creates a new http client with opentelemetry instrumentation\n  public HttpClient newHttpClient() {\n    return ApacheHttpClientTelemetry.builder(openTelemetry).build().newHttpClient();\n  }\n}\n```\n",
      "name": "apache-httpclient-5.2",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.2"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.2",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents.client5:httpclient5:5.2.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `apache-shenyu.meta.` prefixed span attributes `app-name`, `service-name`, `context-path`, `param-types`, `id`, `method-name`, `rpc-type`, `path` and `rpc-ext`.\n",
          "name": "otel.instrumentation.apache-shenyu.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation does not emit telemetry on its own. Instead, it augments existing HTTP server spans and HTTP server metrics with the HTTP route and Shenyu specific attributes.\n",
      "library_link": "https://shenyu.apache.org/",
      "name": "apache-shenyu-2.4",
      "scope": {
        "name": "io.opentelemetry.apache-shenyu-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/apache-shenyu-2.4",
      "target_versions": {
        "javaagent": [
          "org.apache.shenyu:shenyu-web:[2.4.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation enables HTTP client spans and metrics for the Armeria HTTP client, and HTTP server spans and metrics for the Armeria HTTP server.\n",
      "library_link": "https://armeria.dev/",
      "markdown_content": "# Library Instrumentation for Armeria version 1.3 and higher\n\nProvides OpenTelemetry instrumentation for [Armeria](https://armeria.dev/), enabling HTTP client spans and metrics,\nand HTTP server spans and metrics.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-armeria-1.3).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-armeria-1.3</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-armeria-1.3:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\n#### Server\n\n```java\nimport com.linecorp.armeria.server.Server;\nimport com.linecorp.armeria.server.ServerBuilder;\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.armeria.v1_3.ArmeriaServerTelemetry;\n\n// ...\n\n// Get an OpenTelemetry instance\nOpenTelemetry openTelemetry = ...;\n\n// Create an ArmeriaServerTelemetry instance\nArmeriaServerTelemetry telemetry = ArmeriaServerTelemetry.create(openTelemetry);\n\n// Add the decorator to your server builder\nServer server = Server.builder()\n    .decorator(telemetry.newDecorator())\n    // ... other server configuration\n    .build();\n```\n\n#### Client\n\n```java\nimport com.linecorp.armeria.client.ClientBuilder;\nimport com.linecorp.armeria.client.WebClient;\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.armeria.v1_3.ArmeriaClientTelemetry;\n\n// ...\n\n// Get an OpenTelemetry instance\nOpenTelemetry openTelemetry = ...;\n\n// Create an ArmeriaClientTelemetry instance\nArmeriaClientTelemetry telemetry = ArmeriaClientTelemetry.create(openTelemetry);\n\n// Add the decorator to your client builder\nWebClient client = new ClientBuilder(\"http://my-service.com\")\n    .decorator(telemetry.newDecorator())\n    // ... other client configuration\n    .build(WebClient.class);\n```\n",
      "name": "armeria-1.3",
      "scope": {
        "name": "io.opentelemetry.armeria-1.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/armeria/armeria-1.3",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria:[1.3.0,)"
        ],
        "library": [
          "com.linecorp.armeria:armeria:1.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables RPC client spans and metrics for the Armeria gRPC client, and RPC server spans and metrics for the Armeria gRPC server.\n",
      "library_link": "https://armeria.dev/",
      "name": "armeria-grpc-1.14",
      "scope": {
        "name": "io.opentelemetry.armeria-grpc-1.14"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Rpc"
      ],
      "source_path": "instrumentation/armeria/armeria-grpc-1.14",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria-grpc:[1.14.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 1 of the AsyncHttpClient (AHC) HTTP client.",
      "library_link": "https://github.com/AsyncHttpClient/async-http-client",
      "name": "async-http-client-1.9",
      "scope": {
        "name": "io.opentelemetry.async-http-client-1.9"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-1.9",
      "target_versions": {
        "javaagent": [
          "com.ning:async-http-client:[1.9.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 2 of the AsyncHttpClient (AHC) HTTP client.",
      "library_link": "https://github.com/AsyncHttpClient/async-http-client",
      "name": "async-http-client-2.0",
      "scope": {
        "name": "io.opentelemetry.async-http-client-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-2.0",
      "target_versions": {
        "javaagent": [
          "org.asynchttpclient:async-http-client:[2.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it hooks into the Avaje Jex Context to extract the HTTP route and attach it to existing HTTP server spans and HTTP server metrics.\n",
      "library_link": "https://avaje.io/jex/",
      "minimum_java_version": 21,
      "name": "avaje-jex-3.0",
      "scope": {
        "name": "io.opentelemetry.avaje-jex-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/avaje-jex-3.0",
      "target_versions": {
        "javaagent": [
          "io.avaje:avaje-jex:[3.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "Provides lightweight instrumentation of the Lambda core library, supporting all versions. It generates FaaS server spans with the `faas.invocation_id` attribute. Use this package if you only use `RequestStreamHandler` or know you don't use any event classes from `aws-lambda-java-events`. This also includes when you are using `aws-serverless-java-container` to run e.g., a Spring Boot application on Lambda.\nFor custom wrappers when using library instrumentation, you can configure the `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` environment variable to contain your lambda handler method (in the format `package.ClassName::methodName`) and use one of wrappers as your lambda `Handler`.\n",
      "library_link": "https://docs.aws.amazon.com/lambda/latest/dg/java-handler.html",
      "markdown_content": "# AWS Lambda Instrumentation\n\nThis package contains libraries to help instrument AWS lambda functions in your code.\n\n## Using wrappers\n\nTo use the instrumentation, configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` env property to your lambda handler method in following format `package.ClassName::methodName`\nand use one of wrappers as your lambda `Handler`.\n\nIn order to configure a span flush timeout (default is set to 10 seconds), please configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_FLUSH_TIMEOUT` env property. The value is in milliseconds.\n\nAvailable wrappers:\n\n- `io.opentelemetry.instrumentation.awslambdacore.v1_0.TracingRequestStreamWrapper` - for wrapping streaming handlers (implementing `RequestStreamHandler`), enabling HTTP context propagation for HTTP requests\n\nWhen using known Lambda event types as parameters, use [aws-lambda-events-2.2](../../aws-lambda-events-2.2/library).\n\n## Using handlers\n\nTo use the instrumentation, replace your function classes that implement `RequestHandler` (or `RequestStreamHandler`) with those\nthat extend `TracingRequestHandler` (or `TracingRequestStreamHandler`). You will need to change the method name to `doHandleRequest`\nand pass an initialized `OpenTelemetrySdk` to the base class.\n\n```java\npublic class MyRequestHandler extends TracingRequestHandler<String, String> {\n\n  private static final OpenTelemetrySdk SDK = OpenTelemetrySdk.builder()\n      .addSpanProcessor(spanProcessor)\n      .buildAndRegisterGlobal();\n\n  public MyRequestHandler() {\n    super(SDK);\n  }\n\n  // Note the method is named doHandleRequest instead of handleRequest.\n  @Override\n  protected String doHandleRequest(String input, Context context) {\n    if (input.equals(\"hello\")) {\n      return \"world\";\n    }\n    return \"goodbye\";\n  }\n}\n```\n\nA `SERVER` span will be created with the name you specify for the function when deploying it.\n\nIn addition, it is recommended to set up X-Ray trace propagation to be able to\nlink to tracing information provided by Lambda itself. To do so, add a dependency on\n`io.opentelemetry.contrib:opentelemetry-aws-xray-propagator`.\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.contrib/opentelemetry-aws-xray-propagator).\n\nGradle:\n\n```kotlin\ndependencies {\n  implementation(\"io.opentelemetry.contrib:opentelemetry-aws-xray-propagator:OPENTELEMETRY_VERSION\")\n}\n```\n\nMaven:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.contrib</groupId>\n    <artifactId>opentelemetry-aws-xray-propagator</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\n## Trace propagation\n\nContext propagation for this instrumentation can be done either with X-Ray propagation or regular HTTP propagation. If X-Ray is enabled for instrumented lambda, it will be preferred. If X-Ray is disabled, HTTP propagation will be tried (that is HTTP headers will be read to check for a valid trace context).\n\n### X-Ray propagation\n\nThis instrumentation supports propagating traces using the `X-Amzn-Trace-Id` format for both normal\nrequests and SQS requests. X-Ray propagation is always enabled, there is no need to configure it explicitly.\n\n### HTTP headers based propagation\n\nFor API Gateway (HTTP) requests instrumented by using one of following methods:\n\n- extending `TracingRequestStreamHandler` or `TracingRequestHandler`\n- wrapping with `TracingRequestStreamWrapper` or `TracingRequestApiGatewayWrapper`\n  traces can be propagated with supported HTTP headers (see <https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators>).\n\nIn order to enable requested propagation for a handler, configure it on the SDK you build.\n\n```java\n  static {\n    OpenTelemetrySdk.builder()\n      ...\n      .setPropagators(ContextPropagators.create(B3Propagator.injectingSingleHeader()))\n      .buildAndRegisterGlobal();\n  }\n```\n\nIf using the wrappers, set the `OTEL_PROPAGATORS` environment variable as described [here](https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#propagator).\n",
      "name": "aws-lambda-core-1.0",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-core-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/aws-lambda/aws-lambda-core-1.0",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This version of the library instrumentation is deprecated, please use the `aws-lambda-events-3.11` library instrumentation instead. This instrumentation builds on top of the `aws-lambda-core-1.0` instrumentation, expanding support to cover the Lambda library, including standard and custom event types.\n",
      "library_link": "https://docs.aws.amazon.com/lambda/latest/dg/java-handler.html",
      "markdown_content": "# AWS Lambda Instrumentation\n\nThis package contains libraries to help instrument AWS lambda functions in your code.\n\n## Using wrappers\n\nTo use the instrumentation, configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` env property to your lambda handler method in following format `package.ClassName::methodName`\nand use one of wrappers as your lambda `Handler`.\n\nIn order to configure a span flush timeout (default is set to 10 seconds), please configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_FLUSH_TIMEOUT` env property. The value is in milliseconds.\n\nAvailable wrappers:\n\n- `io.opentelemetry.instrumentation.awslambdaevents.v2_2.TracingRequestWrapper` - for wrapping regular handlers (implementing `RequestHandler`)\n- `io.opentelemetry.instrumentation.awslambdaevents.v2_2.TracingRequestApiGatewayWrapper` - for wrapping regular handlers (implementing `RequestHandler`) proxied through API Gateway, enabling HTTP context propagation\n- `io.opentelemetry.instrumentation.awslambdacore.v1_0.TracingRequestStreamWrapper` - for wrapping streaming handlers (implementing `RequestStreamHandler`), enabling HTTP context propagation for HTTP requests\n\nIf you are only using `TracingRequestStreamWrapper`, consider using [aws-lambda-core-1.0](../../aws-lambda-core-1.0/library) instead to reduce the size of\nyour compiled function.\n\n## Using handlers\n\nTo use the instrumentation, replace your function classes that implement `RequestHandler` (or `RequestStreamHandler`) with those\nthat extend `TracingRequestHandler` (or `TracingRequestStreamHandler`). You will need to change the method name to `doHandleRequest`\nand pass an initialized `OpenTelemetrySdk` to the base class.\n\n```java\npublic class MyRequestHandler extends TracingRequestHandler<String, String> {\n\n  private static final OpenTelemetrySdk SDK = OpenTelemetrySdk.builder()\n      .addSpanProcessor(spanProcessor)\n      .buildAndRegisterGlobal();\n\n  public MyRequestHandler() {\n    super(SDK);\n  }\n\n  // Note the method is named doHandleRequest instead of handleRequest.\n  @Override\n  protected String doHandleRequest(String input, Context context) {\n    if (input.equals(\"hello\")) {\n      return \"world\";\n    }\n    return \"goodbye\";\n  }\n}\n```\n\nA `SERVER` span will be created with the name you specify for the function when deploying it.\n\nIn addition, it is recommended to set up X-Ray trace propagation to be able to\nlink to tracing information provided by Lambda itself. To do so, add a dependency on\n`opentelemetry-extension-tracepropagators`. Make sure the version matches the version of the SDK\nyou use.\n\nGradle:\n\n```kotlin\ndependencies {\n  implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators:0.8.0\")\n}\n```\n\nMaven:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n    <version>0.8.0</version>\n  </dependency>\n</dependencies>\n```\n\n## SQS Handler\n\nThis package provides a special handler for SQS-triggered functions to include messaging data.\nIf using SQS, it is recommended to use them instead of `TracingRequestHandler`.\n\nIf your application processes one message at a time, each independently, it is recommended to extend\n`TracingSQSMessageHandler`. This will create a single span corresponding to a received batch of\nmessages along with one span for each of the messages as you process them.\n\n```java\npublic class MyMessageHandler extends TracingSQSMessageHandler {\n  @Override\n  protected void handleMessage(SQSMessage message, Context context) {\n    System.out.println(message.getBody());\n  }\n}\n```\n\nIf you handle a batch of messages together, for example by aggregating them into a single unit,\nextend `TracingSQSEventHandler` to process a batch at a time.\n\n```java\npublic class MyBatchHandler extends TracingSQSEventHandler {\n  @Override\n  protected void handleEvent(SQSEvent event, Context context) {\n    System.out.println(event.getRecords().size());\n  }\n}\n```\n\n## Trace propagation\n\nContext propagation for this instrumentation can be done either with X-Ray propagation or regular HTTP propagation. If X-Ray is enabled for instrumented lambda, it will be preferred. If X-Ray is disabled, HTTP propagation will be tried (that is HTTP headers will be read to check for a valid trace context).\n\n### X-Ray propagation\n\nThis instrumentation supports propagating traces using the `X-Amzn-Trace-Id` format for both normal\nrequests and SQS requests. X-Ray propagation is always enabled, there is no need to configure it explicitly.\n\n### HTTP headers based propagation\n\nFor API Gateway (HTTP) requests instrumented by using one of following methods:\n\n- extending `TracingRequestStreamHandler` or `TracingRequestHandler`\n- wrapping with `TracingRequestStreamWrapper` or `TracingRequestApiGatewayWrapper`\n  traces can be propagated with supported HTTP headers (see <https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators>).\n\nIn order to enable requested propagation for a handler, configure it on the SDK you build.\n\n```java\n  static {\n    OpenTelemetrySdk.builder()\n      ...\n      .setPropagators(ContextPropagators.create(B3Propagator.injectingSingleHeader()))\n      .buildAndRegisterGlobal();\n  }\n```\n\nIf using the wrappers, set the `OTEL_PROPAGATORS` environment variable as described [here](https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#propagator).\n",
      "name": "aws-lambda-events-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-events-2.2"
      },
      "semconv": [
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-lambda/aws-lambda-events-2.2",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0",
          "com.amazonaws:aws-lambda-java-events:2.2.1"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                },
                {
                  "name": "faas.trigger",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "This instrumentation builds on top of the `aws-lambda-core-1.0` instrumentation, expanding support to cover the Lambda library, including standard and custom event types.\n",
      "library_link": "https://docs.aws.amazon.com/lambda/latest/dg/java-handler.html",
      "markdown_content": "# AWS Lambda Instrumentation\n\nThis package contains libraries to help instrument AWS lambda functions in your code.\n\n## Using wrappers\n\nTo use the instrumentation, configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` env property to your lambda handler method in following format `package.ClassName::methodName`\nand use one of wrappers as your lambda `Handler`.\n\nIn order to configure a span flush timeout (default is set to 10 seconds), please configure `OTEL_INSTRUMENTATION_AWS_LAMBDA_FLUSH_TIMEOUT` env property. The value is in milliseconds.\n\nAvailable wrappers:\n\n- `io.opentelemetry.instrumentation.awslambdaevents.v3_11.TracingRequestWrapper` - for wrapping regular handlers (implementing `RequestHandler`)\n- `io.opentelemetry.instrumentation.awslambdaevents.v3_11.TracingRequestApiGatewayWrapper` - for wrapping regular handlers (implementing `RequestHandler`) proxied through API Gateway, enabling HTTP context propagation\n- `io.opentelemetry.instrumentation.awslambdacore.v1_0.TracingRequestStreamWrapper` - for wrapping streaming handlers (implementing `RequestStreamHandler`), enabling HTTP context propagation for HTTP requests\n\nIf you are only using `TracingRequestStreamWrapper`, consider using [aws-lambda-core-1.0](../../aws-lambda-core-1.0/library) instead to reduce the size of\nyour compiled function.\n\n## Using handlers\n\nTo use the instrumentation, replace your function classes that implement `RequestHandler` (or `RequestStreamHandler`) with those\nthat extend `TracingRequestHandler` (or `TracingRequestStreamHandler`). You will need to change the method name to `doHandleRequest`\nand pass an initialized `OpenTelemetrySdk` to the base class.\n\n```java\npublic class MyRequestHandler extends TracingRequestHandler<String, String> {\n\n  private static final OpenTelemetrySdk SDK = OpenTelemetrySdk.builder()\n      .addSpanProcessor(spanProcessor)\n      .buildAndRegisterGlobal();\n\n  public MyRequestHandler() {\n    super(SDK);\n  }\n\n  // Note the method is named doHandleRequest instead of handleRequest.\n  @Override\n  protected String doHandleRequest(String input, Context context) {\n    if (input.equals(\"hello\")) {\n      return \"world\";\n    }\n    return \"goodbye\";\n  }\n}\n```\n\nA `SERVER` span will be created with the name you specify for the function when deploying it.\n\nIn addition, it is recommended to set up X-Ray trace propagation to be able to\nlink to tracing information provided by Lambda itself. To do so, add a dependency on\n`opentelemetry-extension-tracepropagators`. Make sure the version matches the version of the SDK\nyou use.\n\nGradle:\n\n```kotlin\ndependencies {\n  implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators:0.8.0\")\n}\n```\n\nMaven:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n    <version>0.8.0</version>\n  </dependency>\n</dependencies>\n```\n\n## SQS Handler\n\nThis package provides a special handler for SQS-triggered functions to include messaging data.\nIf using SQS, it is recommended to use them instead of `TracingRequestHandler`.\n\nIf your application processes one message at a time, each independently, it is recommended to extend\n`TracingSQSMessageHandler`. This will create a single span corresponding to a received batch of\nmessages along with one span for each of the messages as you process them.\n\n```java\npublic class MyMessageHandler extends TracingSQSMessageHandler {\n  @Override\n  protected boolean handleMessage(SQSMessage message, Context context) {\n    System.out.println(message.getBody());\n    return true;\n  }\n}\n```\n\nIf you handle a batch of messages together, for example by aggregating them into a single unit,\nextend `TracingSQSEventHandler` to process a batch at a time.\n\n```java\npublic class MyBatchHandler extends TracingSQSEventHandler {\n  @Override\n  protected SQSBatchResponse handleEvent(SQSEvent event, Context context) {\n    System.out.println(event.getRecords().size());\n    return null;\n  }\n}\n```\n\n## Trace propagation\n\nContext propagation for this instrumentation can be done either with X-Ray propagation or regular HTTP propagation. If X-Ray is enabled for instrumented lambda, it will be preferred. If X-Ray is disabled, HTTP propagation will be tried (that is HTTP headers will be read to check for a valid trace context).\n\n### X-Ray propagation\n\nThis instrumentation supports propagating traces using the `X-Amzn-Trace-Id` format for both normal\nrequests and SQS requests. X-Ray propagation is always enabled, there is no need to configure it explicitly.\n\n### HTTP headers based propagation\n\nFor API Gateway (HTTP) requests instrumented by using one of following methods:\n\n- extending `TracingRequestStreamHandler` or `TracingRequestHandler`\n- wrapping with `TracingRequestStreamWrapper` or `TracingRequestApiGatewayWrapper`\n  traces can be propagated with supported HTTP headers (see <https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators>).\n\nIn order to enable requested propagation for a handler, configure it on the SDK you build.\n\n```java\n  static {\n    OpenTelemetrySdk.builder()\n      ...\n      .setPropagators(ContextPropagators.create(B3Propagator.injectingSingleHeader()))\n      .buildAndRegisterGlobal();\n  }\n```\n\nIf using the wrappers, set the `OTEL_PROPAGATORS` environment variable as described [here](https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md#propagator).\n",
      "name": "aws-lambda-events-3.11",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-events-3.11"
      },
      "semconv": [
        "Cloud",
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-lambda/aws-lambda-events-3.11",
      "target_versions": {
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0",
          "com.amazonaws:aws-lambda-java-events:3.11.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "cloud.account.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cloud.resource_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                },
                {
                  "name": "faas.trigger",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the experimental span attributes `aws.agent`, `aws.bucket.name`, `aws.queue.url`, `aws.queue.name`, `aws.stream.name`, `aws.table.name`, `aws.lambda.function.arn` and `aws.lambda.function.name` for AWS SDK instrumentation.\n",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation covers the AWS SDK 1.11+ client library, enabling messaging and client spans and metrics for calls to AWS services including DynamoDB, EC2, Kinesis, Lambda, RDS, S3, secrets manager, SNS/SQS and step functions.\n",
      "library_link": "https://aws.amazon.com/sdk-for-java/",
      "name": "aws-sdk-1.11",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-1.11"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-1.11",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-java-sdk-core:[1.10.33,)",
          "com.amazonaws:aws-java-sdk-sqs:[1.10.33,)"
        ],
        "library": [
          "com.amazonaws:aws-java-sdk-core:1.11.0",
          "com.amazonaws:aws-java-sdk-sqs:[1.11.106,1.12.583)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.table_names",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.table_names",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Determines whether errors returned by each individual HTTP request should be recorded as events for the SDK span.",
          "name": "otel.instrumentation.aws-sdk.experimental-record-individual-http-error",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental span attributes `aws.agent`, `aws.lambda.function.arn` and `aws.lambda.function.name` for AWS SDK instrumentation.\n",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether the configured TextMapPropagator should be used to inject into supported messaging attributes (for SQS).",
          "name": "otel.instrumentation.aws-sdk.experimental-use-propagator-for-messaging",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether Generative AI events include full content of user and assistant messages. Note that full content can have data privacy and size concerns and care should be taken when enabling this\n",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation covers the AWS SDK 2.2+ client library, enabling messaging and client spans and metrics for calls to AWS services including DynamoDB, EC2, Kinesis, Lambda, RDS, S3, SNS/SQS and Bedrock.\n",
      "library_link": "https://aws.amazon.com/sdk-for-java/",
      "markdown_content": "# AWS Java SDK v2 Instrumentation\n\nInstrumentation for [AWS Java SDK v2](https://github.com/aws/aws-sdk-java-v2).\n\n## Usage\n\nTo instrument all AWS SDK clients include the `opentelemetry-aws-sdk-2.2-autoconfigure` submodule in your classpath.\n\nTo register instrumentation only on a specific SDK client, register the interceptor when creating it.\n\n```java\nAwsSdkTelemetry telemetry = AwsSdkTelemetry.create(openTelemetry).build();\nDynamoDbClient client = DynamoDbClient.builder()\n  .overrideConfiguration(ClientOverrideConfiguration.builder()\n    .addExecutionInterceptor(telemetry.newExecutionInterceptor()))\n    .build())\n  .build();\n```\n\nFor SQS an additional step is needed\n```java\nSqsClientBuilder sqsClientBuilder = SqsClient.builder();\n...\nSqsClient sqsClient = telemetry.wrap(sqsClientBuilder.build());\n```\n```java\nSqsAsyncClientBuilder sqsAsyncClientBuilder = SqsAsyncClient.builder();\n...\nSqsAsyncClient sqsAsyncClient = telemetry.wrap(sqsAsyncClientBuilder.build());\n```\n\n## Trace propagation\n\nThe AWS SDK instrumentation always injects the trace header into the request\nusing the [AWS Trace Header](https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-tracingheader) format.\nThis format is the only format recognized by AWS managed services, and populating will allow\npropagating the trace through them.\n\nAdditionally, you can enable an experimental option to use the configured propagator to inject into\nmessage attributes (see [parent README](../../README.md)). This currently supports the following AWS APIs:\n\n- SQS.SendMessage\n- SQS.SendMessageBatch\n- SNS.Publish\n  (SNS.PublishBatch is not supported at the moment because it is not available in the minimum SDK\n  version targeted by the instrumentation)\n\nNote that injection will only happen if, after injection, a maximum of 10 attributes is used to not\nrun over API limitations set by AWS.\n\nIf this does not fulfill your use case, perhaps because you are\nusing the same SDK with a different non-AWS managed service, let us know so we can provide\nconfiguration for this behavior.\n\n## Development\n\n### Testing\n\nSome tests use recorded API responses to run through instrumentation. By default, recordings\nare used, but if needing to add new tests/recordings or update existing ones, run the tests with\nthe `RECORD_WITH_REAL_API` environment variable set. AWS credentials will need to be correctly\nconfigured to work.\n",
      "name": "aws-sdk-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-2.2"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Gen Ai",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-2.2",
      "target_versions": {
        "javaagent": [
          "software.amazon.awssdk:aws-core:[2.2.0,)",
          "software.amazon.awssdk:bedrock-runtime:[2.25.63,)",
          "software.amazon.awssdk:lambda:[2.17.0,)",
          "software.amazon.awssdk:sns:[2.2.0,)",
          "software.amazon.awssdk:sqs:[2.2.0,)"
        ],
        "library": [
          "software.amazon.awssdk:aws-core:2.2.0",
          "software.amazon.awssdk:aws-json-protocol:2.2.0",
          "software.amazon.awssdk:lambda:2.2.0",
          "software.amazon.awssdk:sns:2.2.0",
          "software.amazon.awssdk:sqs:2.2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "GenAI operation duration.",
              "name": "gen_ai.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.token.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Measures number of input and output tokens used.",
              "name": "gen_ai.client.token.usage",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "token"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.global_secondary_indexes",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.limit",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.read_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.write_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.select",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.secretsmanager.secret.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.max_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.stop_sequences",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.temperature",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.top_p",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.response.finish_reasons",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.usage.output_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.global_secondary_indexes",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.limit",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.read_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.write_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.select",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.secretsmanager.secret.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "library_link": "https://learn.microsoft.com/en-us/java/api/overview/azure/core-readme?view=azure-java-stable",
      "name": "azure-core-1.14",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.14"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.14",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.14.0,1.19.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "library_link": "https://learn.microsoft.com/en-us/java/api/overview/azure/core-readme?view=azure-java-stable",
      "name": "azure-core-1.19",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.19"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.19",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.19.0,1.36.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "library_link": "https://learn.microsoft.com/en-us/java/api/overview/azure/core-readme?view=azure-java-stable",
      "name": "azure-core-1.36",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.36"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.36",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.36.0,)"
        ]
      }
    },
    {
      "description": "The c3p0 instrumentation provides connection pool metrics for c3p0 data sources.",
      "library_link": "https://github.com/swaldman/c3p0",
      "markdown_content": "# Library Instrumentation for C3P0 version 0.9 and higher\n\nProvides OpenTelemetry instrumentation for [C3P0](https://www.mchange.com/projects/c3p0/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-c3p0-0.9).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-c3p0-0.9</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-c3p0-0.9:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `PooledDataSource` instances for\ncollecting OpenTelemetry-based metrics.\n\n```java\nC3p0Telemetry c3p0Telemetry;\n\nvoid configure(OpenTelemetry openTelemetry, PooledDataSource dataSource) {\n  c3p0Telemetry = C3p0Telemetry.create(openTelemetry);\n  c3p0Telemetry.registerMetrics(dataSource);\n}\n\nvoid destroy(PooledDataSource dataSource) {\n  c3p0Telemetry.unregisterMetrics(dataSource);\n}\n```\n",
      "name": "c3p0-0.9",
      "scope": {
        "name": "io.opentelemetry.c3p0-0.9"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/c3p0-0.9",
      "target_versions": {
        "javaagent": [
          "com.mchange:c3p0:(,)"
        ],
        "library": [
          "com.mchange:c3p0:0.9.2"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental `camel.uri`, `camel.kafka.partitionKey`, `camel.kafka.key` and `camel.kafka.offset` span attributes.\n",
          "name": "otel.instrumentation.camel.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Apache Camel 2.x applications by generating spans for each route execution. For Camel versions 3.5 and newer, users should instead use the native 'camel-opentelemetry' component provided directly by the Camel project.\n",
      "library_link": "https://camel.apache.org/",
      "name": "camel-2.20",
      "scope": {
        "name": "io.opentelemetry.camel-2.20"
      },
      "semconv": [
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/camel-2.20",
      "target_versions": {
        "javaagent": [
          "org.apache.camel:camel-core:[2.19,3)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "camel.uri",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "camel.uri",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            },
            {
              "attributes": [
                {
                  "name": "camel.uri",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "otel.instrumentation.camel.experimental-span-attributes=true"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "library_link": "https://github.com/apache/cassandra-java-driver",
      "name": "cassandra-3.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-3.0"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-3.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.cassandra:cassandra-driver-core:[3.0,4.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.cassandra.table",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "library_link": "https://github.com/apache/cassandra-java-driver",
      "name": "cassandra-4.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.0"
      },
      "semconv": [
        "Cassandra",
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-4.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.0,4.4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.cassandra.consistency_level",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.dc",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.id",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.idempotence",
                  "type": "BOOLEAN"
                },
                {
                  "name": "db.cassandra.page_size",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.speculative_execution_count",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.table",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "cassandra.consistency.level",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.dc",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.page.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "cassandra.query.idempotent",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "cassandra.speculative_execution.count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "library_link": "https://github.com/apache/cassandra-java-driver",
      "markdown_content": "# Library Instrumentation for Cassandra version 4.4 and higher\n\nProvides OpenTelemetry instrumentation for the [DataStax Java Driver for Apache Cassandra](https://docs.datastax.com/en/developer/java-driver/latest/),\nenabling database client spans and metrics.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-cassandra-4.4).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-cassandra-4.4</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-cassandra-4.4:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\n```java\nimport com.datastax.oss.driver.api.core.CqlSession;\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.cassandra.v4_4.CassandraTelemetry;\n\n// ...\n\n// Get an OpenTelemetry instance\nOpenTelemetry openTelemetry = ...;\n\n// Create a CassandraTelemetry instance\nCassandraTelemetry telemetry = CassandraTelemetry.create(openTelemetry);\n\n// Create a CqlSession\nCqlSession session = CqlSession.builder().build();\n\n// Wrap the session\nCqlSession tracedSession = telemetry.wrap(session);\n\n// ... use the tracedSession to make requests\n```\n",
      "name": "cassandra-4.4",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.4"
      },
      "semconv": [
        "Cassandra",
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-4.4",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.4,]"
        ],
        "library": [
          "com.datastax.oss:java-driver-core:4.4.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.cassandra.consistency_level",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.dc",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.coordinator.id",
                  "type": "STRING"
                },
                {
                  "name": "db.cassandra.idempotence",
                  "type": "BOOLEAN"
                },
                {
                  "name": "db.cassandra.page_size",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.speculative_execution_count",
                  "type": "LONG"
                },
                {
                  "name": "db.cassandra.table",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "cassandra.consistency.level",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.dc",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.page.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "cassandra.query.idempotent",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "cassandra.speculative_execution.count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and metrics for the V1 ClickHouse client.",
      "library_link": "https://github.com/ClickHouse/clickhouse-java",
      "name": "clickhouse-client-v1-0.5",
      "scope": {
        "name": "io.opentelemetry.clickhouse-client-v1-0.5"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/clickhouse/clickhouse-client-v1-0.5",
      "target_versions": {
        "javaagent": [
          "com.clickhouse.client:clickhouse-client:[0.5.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and metrics for the V2 ClickHouse client.",
      "library_link": "https://github.com/ClickHouse/clickhouse-java",
      "name": "clickhouse-client-v2-0.8",
      "scope": {
        "name": "io.opentelemetry.clickhouse-client-v2-0.8"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/clickhouse/clickhouse-client-v2-0.8",
      "target_versions": {
        "javaagent": [
          "com.clickhouse:client-v2:[0.6.4,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "This instrumentation enables database client spans and database client metrics for Couchbase 2.0 operations. It automatically traces key-value operations (get, upsert, replace, remove), view queries, N1QL queries, and cluster management operations.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-2.0",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/couchbase/couchbase-2.0",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2,3)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental span attributes `couchbase.operation_id` and `couchbase.local.address`. Different operation types receive different experimental attributes.\n",
          "name": "otel.instrumentation.couchbase.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Couchbase 2.6 operations. It automatically traces key-value operations (get, upsert, replace, remove), view queries, N1QL queries, and cluster management operations.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-2.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.6"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/couchbase/couchbase-2.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2.6.0,3)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "couchbase.local.address",
                  "type": "STRING"
                },
                {
                  "name": "couchbase.operation_id",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.couchbase.experimental-span-attributes=true"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project for versions 3+. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-3.1",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1,3.1.6)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project for versions 3+. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-3.1.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1.6,3.2.0)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project for versions 3+. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-3.2",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.2",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.2.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the dropwizard metrics instrumentation.",
          "name": "otel.instrumentation.dropwizard-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "The dropwizard-metrics instrumentation for the dropwizard/codahale metrics library produces OpenTelemetry compliant versions of the metrics generated by the Dropwizard MetricRegistry.\nThe Dropwizard metrics API does not have a concept of metric labels/tags/attributes, thus the data produced by this integration might be of very low quality, depending on how the API is used in the instrumented application.\n",
      "disabled_by_default": true,
      "library_link": "https://metrics.dropwizard.io/4.2.0/",
      "name": "dropwizard-metrics-4.0",
      "scope": {
        "name": "io.opentelemetry.dropwizard-metrics-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-metrics-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard.metrics:metrics-core:[4.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the creation of spans for Dropwizard views.",
      "library_link": "https://www.dropwizard.io/en/latest/manual/views.html",
      "name": "dropwizard-views-0.7",
      "scope": {
        "name": "io.opentelemetry.dropwizard-views-0.7"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-views-0.7",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-views:(,3.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.view-telemetry.enabled=true"
        }
      ]
    },
    {
      "description": "This instrumentation extends the elasticsearch-rest-7.0 instrumentation by adding additional `db.elasticsearch.path_parts.id` and `db.elasticsearch.path_parts.index` attributes to Elasticsearch database client spans. Versions 8.10 and later of the client have native support for OpenTelemetry.\n",
      "library_link": "https://www.elastic.co/docs/reference/elasticsearch/clients/java",
      "name": "elasticsearch-api-client-7.16",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-api-client-7.16"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-api-client-7.16",
      "target_versions": {
        "javaagent": [
          "co.elastic.clients:elasticsearch-java:[7.16,7.17.20)",
          "co.elastic.clients:elasticsearch-java:[8.0.0,8.10)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.elasticsearch.path_parts.id",
                  "type": "STRING"
                },
                {
                  "name": "db.elasticsearch.path_parts.index",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.elasticsearch.path_parts.id",
                  "type": "STRING"
                },
                {
                  "name": "db.elasticsearch.path_parts.index",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch REST clients.",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-rest",
      "name": "elasticsearch-rest-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[5.0,6.4)",
          "org.elasticsearch.client:rest:[5.0,6.4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch REST clients.",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-rest",
      "name": "elasticsearch-rest-6.4",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-6.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-6.4",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[6.4,7.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch REST clients.",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-rest",
      "markdown_content": "# Library Instrumentation for Elasticsearch REST Client version 7.0 and higher\n\nProvides OpenTelemetry instrumentation for the [Elasticsearch REST Client](https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html),\nenabling database client spans and metrics.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-elasticsearch-rest-7.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-elasticsearch-rest-7.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-elasticsearch-rest-7.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.elasticsearch.rest.v7_0.ElasticsearchRest7Telemetry;\nimport org.apache.http.HttpHost;\nimport org.elasticsearch.client.RestClient;\n\n// ...\n\n// Get an OpenTelemetry instance\nOpenTelemetry openTelemetry = ...;\n\n// Create an ElasticsearchRest7Telemetry instance\nElasticsearchRest7Telemetry telemetry = ElasticsearchRest7Telemetry.create(openTelemetry);\n\n// Create a RestClient\nRestClient restClient = RestClient.builder(new HttpHost(\"localhost\", 9200, \"http\")).build();\n\n// Wrap the client\nRestClient tracedClient = telemetry.wrap(restClient);\n\n// ... use the tracedClient to make requests\n```\n",
      "name": "elasticsearch-rest-7.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-7.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-7.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[7.0,)"
        ],
        "library": [
          "org.elasticsearch.client:elasticsearch-rest-client:7.0.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of the experimental span attributes `elasticsearch.action`, `elasticsearch.id`, `elasticsearch.request`, `elasticsearch.request.indices`, `elasticsearch.request.write.routing`, `elasticsearch.request.write.type`, `elasticsearch.response.status`, `elasticsearch.shard.replication.failed`, `elasticsearch.shard.replication.successful`, `elasticsearch.shard.replication.total`, `elasticsearch.type`, and `elasticsearch.version`.\n",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-api/",
      "name": "elasticsearch-transport-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.0.0,5.3.0)",
          "org.elasticsearch:elasticsearch:[5.0.0,5.3.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of `elasticsearch.action`, `elasticsearch.id`, `elasticsearch.request`, `elasticsearch.request.indices`, `elasticsearch.request.search.types`, `elasticsearch.request.write.type`, `elasticsearch.request.write.version`, `elasticsearch.response.status`, `elasticsearch.shard.broadcast.failed`, `elasticsearch.shard.broadcast.successful`, `elasticsearch.shard.broadcast.total`, `elasticsearch.shard.replication.failed`, `elasticsearch.shard.replication.successful`, `elasticsearch.shard.replication.total`, `elasticsearch.type`, and `elasticsearch.version` experimental span attributes.\n",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-api/",
      "name": "elasticsearch-transport-5.3",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.3"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.3",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.3.0,6.0.0)",
          "org.elasticsearch:elasticsearch:[5.3.0,6.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.search.types",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of `elasticsearch.action`, `elasticsearch.id`, `elasticsearch.request`, `elasticsearch.request.indices`, `elasticsearch.request.write.type`, `elasticsearch.request.write.version`, `elasticsearch.response.status`, `elasticsearch.shard.replication.failed`, `elasticsearch.shard.replication.successful`, `elasticsearch.shard.replication.total`, `elasticsearch.type`, and `elasticsearch.version` experimental span attributes.\n",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-api/",
      "name": "elasticsearch-transport-6.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-6.0"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-6.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[6.0.0,)",
          "org.elasticsearch:elasticsearch:[6.0.0,8.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "List of Executor subclasses to be instrumented.",
          "name": "otel.instrumentation.executors.include",
          "type": "list"
        },
        {
          "default": false,
          "description": "Whether to instrument all classes that implement the Executor interface.",
          "name": "otel.instrumentation.executors.include-all",
          "type": "boolean"
        }
      ],
      "description": "The executor instrumentation ensures that context is automatically propagated when using common Java executors (e.g., ThreadPoolExecutor, ScheduledThreadPoolExecutor, ForkJoinPool). When a task is submitted, the current context is captured and bound to the task. Then, when the task eventually runs, even if it\u2019s on a different thread, the instrumentation reactivates that context, enabling consistent correlation across concurrent and asynchronous workflows.\n",
      "library_link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html",
      "name": "executors",
      "scope": {
        "name": "io.opentelemetry.executors"
      },
      "semconv": [],
      "source_path": "instrumentation/executors",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "description": "This standalone instrumentation enables metrics for Failsafe circuit breakers.",
      "library_link": "https://failsafe.dev",
      "name": "failsafe-3.0",
      "scope": {
        "name": "io.opentelemetry.failsafe-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/failsafe-3.0",
      "target_versions": {
        "library": [
          "dev.failsafe:failsafe:3.0.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "failsafe.circuit_breaker.name",
                  "type": "STRING"
                },
                {
                  "name": "failsafe.circuit_breaker.outcome",
                  "type": "STRING"
                }
              ],
              "description": "Count of circuit breaker executions.",
              "name": "failsafe.circuit_breaker.execution.count",
              "type": "LONG_SUM",
              "unit": "execution"
            },
            {
              "attributes": [
                {
                  "name": "failsafe.circuit_breaker.name",
                  "type": "STRING"
                },
                {
                  "name": "failsafe.circuit_breaker.state",
                  "type": "STRING"
                }
              ],
              "description": "Count of circuit breaker state changes.",
              "name": "failsafe.circuit_breaker.state_change.count",
              "type": "LONG_SUM",
              "unit": "execution"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation for Finagle HTTP clients and servers ensures that telemetry is correctly generated by the underlying Netty instrumentation. It augments existing telemetry by bridging the gap between Finagle's abstractions and Netty's pipeline, primarily for context propagation.\n",
      "library_link": "https://github.com/twitter/finagle",
      "name": "finagle-http-23.11",
      "scope": {
        "name": "io.opentelemetry.finagle-http-23.11"
      },
      "semconv": [],
      "source_path": "instrumentation/finagle-http-23.11",
      "target_versions": {
        "javaagent": [
          "com.twitter:finagle-http_2.12:[23.11.0,]",
          "com.twitter:finagle-http_2.13:[23.11.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation for the Finatra web framework augments the telemetry generated by the underlying Netty instrumentation. It provides more specific, high-level context, such as route information, to the spans generated by Netty.",
      "library_link": "https://github.com/twitter/finatra",
      "name": "finatra-2.9",
      "scope": {
        "name": "io.opentelemetry.finatra-2.9"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/finatra-2.9",
      "target_versions": {
        "javaagent": [
          "com.twitter:finatra-http_2.11:[2.9.0,]",
          "com.twitter:finatra-http_2.12:[2.9.0,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Apache Geode cache operations.",
      "library_link": "https://geode.apache.org/",
      "name": "geode-1.4",
      "scope": {
        "name": "io.opentelemetry.geode-1.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/geode-1.4",
      "target_versions": {
        "javaagent": [
          "org.apache.geode:geode-core:[1.4.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for Google HTTP Client requests.",
      "library_link": "https://github.com/googleapis/google-http-java-client",
      "name": "google-http-client-1.19",
      "scope": {
        "name": "io.opentelemetry.google-http-client-1.19"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/google-http-client-1.19",
      "target_versions": {
        "javaagent": [
          "com.google.http-client:google-http-client:[1.19.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enriches existing HTTP server spans with HTTP route information, and optionally enables experimental controller (INTERNAL) spans for Grails applications.\n",
      "library_link": "https://grails.apache.org/",
      "name": "grails-3.0",
      "scope": {
        "name": "io.opentelemetry.grails-3.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/grails-3.0",
      "target_versions": {
        "javaagent": [
          "org.grails:grails-web-url-mappings:[3.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.controller-telemetry.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Whether GraphQL operation name is added to the span name. WARNING: The GraphQL operation name is provided by the client and can have high cardinality. Use only when the server is not exposed to malicious clients.\n",
          "name": "otel.instrumentation.graphql.add-operation-name-to-span-name.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables sanitization of sensitive information from queries so they aren't added as span attributes.",
          "name": "otel.instrumentation.graphql.query-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for GraphQL Java operations.",
      "library_link": "https://www.graphql-java.com/",
      "markdown_content": "# Library Instrumentation for GraphQL Java version 12.0 to 20.0\n\nProvides OpenTelemetry instrumentation for [GraphQL Java](https://www.graphql-java.com/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-graphql-java-12.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-graphql-java-12.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-graphql-java-12.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a GraphQL Java `Instrumentation` implementation that can be\nadded to an instance of the `GraphQL` to provide OpenTelemetry-based spans.\n\n```java\nvoid configure(OpenTelemetry openTelemetry, GraphQL.Builder builder) {\n  GraphQLTelemetry telemetry = GraphQLTelemetry.builder(openTelemetry).build();\n  builder.instrumentation(telemetry.newInstrumentation());\n}\n```\n",
      "name": "graphql-java-12.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-12.0"
      },
      "semconv": [
        "Graphql"
      ],
      "source_path": "instrumentation/graphql-java/graphql-java-12.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[12,20)"
        ],
        "library": [
          "com.graphql-java:graphql-java:[12.0,19.+)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "graphql.document",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Whether GraphQL operation name is added to the span name. WARNING: The GraphQL operation name is provided by the client and can have high cardinality. Use only when the server is not exposed to malicious clients.\n",
          "name": "otel.instrumentation.graphql.add-operation-name-to-span-name.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables span generation for data fetchers.",
          "name": "otel.instrumentation.graphql.data-fetcher.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables sanitization of sensitive information from queries so they aren't added as span attributes.",
          "name": "otel.instrumentation.graphql.query-sanitizer.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Whether to create spans for trivial data fetchers. A trivial data fetcher is one that simply maps data from an object to a field.",
          "name": "otel.instrumentation.graphql.trivial-data-fetcher.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for GraphQL Java operations.",
      "library_link": "https://www.graphql-java.com/",
      "markdown_content": "# Library Instrumentation for GraphQL Java version 20.0 and higher\n\nProvides OpenTelemetry instrumentation for [GraphQL Java](https://www.graphql-java.com/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-graphql-java-12.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-graphql-java-20.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-graphql-java-20.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a GraphQL Java `Instrumentation` implementation that can be\nadded to an instance of the `GraphQL` to provide OpenTelemetry-based spans.\n\n```java\nvoid configure(OpenTelemetry openTelemetry, GraphQL.Builder builder) {\n  GraphQLTelemetry telemetry = GraphQLTelemetry.builder(openTelemetry).build();\n  builder.instrumentation(telemetry.newInstrumentation());\n}\n```\n",
      "minimum_java_version": 11,
      "name": "graphql-java-20.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-20.0"
      },
      "semconv": [
        "Graphql"
      ],
      "source_path": "instrumentation/graphql-java/graphql-java-20.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[20,)"
        ],
        "library": [
          "com.graphql-java:graphql-java:20.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "graphql.document",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "graphql.document",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.field.name",
                  "type": "STRING"
                },
                {
                  "name": "graphql.field.path",
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.graphql.data-fetcher.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.body.size` and `http.server.response.body.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP server spans and HTTP server metrics for Grizzly applications.",
      "library_link": "https://javaee.github.io/grizzly/httpserverframework.html",
      "name": "grizzly-2.3",
      "scope": {
        "name": "io.opentelemetry.grizzly-2.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/grizzly-2.3",
      "target_versions": {
        "javaagent": [
          "org.glassfish.grizzly:grizzly-http:[2.3,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of request metadata keys. gRPC client instrumentation will capture metadata values corresponding to configured keys as span attributes.\n",
          "name": "otel.instrumentation.grpc.capture-metadata.client.request",
          "type": "list"
        },
        {
          "default": "",
          "description": "A comma-separated list of request metadata keys. gRPC server instrumentation will capture metadata values corresponding to configured keys as span attributes.\n",
          "name": "otel.instrumentation.grpc.capture-metadata.server.request",
          "type": "list"
        },
        {
          "default": true,
          "description": "Determines whether to emit a span event for each individual message received and sent.",
          "name": "otel.instrumentation.grpc.emit-message-events",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes `grpc.received.message_count`, `grpc.sent.message_count` and `grpc.canceled`.\n",
          "name": "otel.instrumentation.grpc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables RPC client spans and metrics, and RPC server spans and metrics for gRPC version 1.6 and above.",
      "library_link": "https://github.com/grpc/grpc-java",
      "markdown_content": "# Library Instrumentation for gRPC 1.6.0+\n\nProvides OpenTelemetry instrumentation for [gRPC](https://grpc.io/).\n\n## Quickstart\n\n### Add the following dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-grpc-1.6).\n\nFor Maven, add the following to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-grpc-1.6</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add the following to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-grpc-1.6:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides the implementation of `ClientInterceptor` and `ServerInterceptor` to provide OpenTelemetry-based spans and context propagation.\n\n```java\n// For client-side, attach the interceptor to your channel builder.\nvoid configureClientInterceptor(OpenTelemetry openTelemetry, NettyChannelBuilder nettyChannelBuilder) {\n  GrpcTelemetry grpcTelemetry = GrpcTelemetry.create(openTelemetry);\n  nettyChannelBuilder.intercept(grpcTelemetry.newClientInterceptor());\n}\n\n// For server-side, attatch the interceptor to your service.\nServerServiceDefinition configureServerInterceptor(OpenTelemetry openTelemetry, ServerServiceDefinition serviceDefinition) {\n  GrpcTelemetry grpcTelemetry = GrpcTelemetry.create(openTelemetry);\n  return ServerInterceptors.intercept(serviceDefinition, grpcTelemetry.newServerInterceptor());\n}\n```\n",
      "name": "grpc-1.6",
      "scope": {
        "name": "io.opentelemetry.grpc-1.6"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Network",
        "Rpc"
      ],
      "source_path": "instrumentation/grpc-1.6",
      "target_versions": {
        "javaagent": [
          "io.grpc:grpc-core:[1.6.0,)"
        ],
        "library": [
          "io.grpc:grpc-core:1.6.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an outbound RPC invocation.",
              "name": "rpc.client.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an inbound RPC invocation.",
              "name": "rpc.server.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an outbound RPC invocation.",
              "name": "rpc.client.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an inbound RPC invocation.",
              "name": "rpc.server.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "grpc.received.message_count",
                  "type": "LONG"
                },
                {
                  "name": "grpc.sent.message_count",
                  "type": "LONG"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "grpc.received.message_count",
                  "type": "LONG"
                },
                {
                  "name": "grpc.sent.message_count",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "otel.instrumentation.grpc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "name": "guava-10.0",
      "scope": {
        "name": "io.opentelemetry.guava-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/guava-10.0",
      "target_versions": {
        "javaagent": [
          "com.google.guava:guava:[10.0,]"
        ],
        "library": [
          "com.google.guava:guava:10.0"
        ]
      }
    },
    {
      "description": "This instrumentation enables RPC server spans for GWT RPC requests.",
      "library_link": "https://www.gwtproject.org/",
      "name": "gwt-2.0",
      "scope": {
        "name": "io.opentelemetry.gwt-2.0"
      },
      "semconv": [
        "Aws"
      ],
      "source_path": "instrumentation/gwt-2.0",
      "target_versions": {
        "javaagent": [
          "com.google.gwt:gwt-servlet:[2.0.0,)",
          "org.gwtproject:gwt-servlet:[2.10.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate operations, including session methods (e.g., `save`, `update`, `delete`), transaction commits, and query executions.\n",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "name": "hibernate-3.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-3.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[3.3.0.GA,4.0.0.Final)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate operations, including session methods (e.g., `save`, `update`, `delete`), transaction commits, and query executions.\n",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "name": "hibernate-4.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-4.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.0.0.Final,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate operations, including session methods (e.g., `save`, `update`, `delete`), transaction commits, and query executions.\n",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "minimum_java_version": 11,
      "name": "hibernate-6.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-6.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[6.0.0.Final,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate stored procedure calls.",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "name": "hibernate-procedure-call-4.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-procedure-call-4.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-procedure-call-4.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.3.0.Final,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation does not emit any telemetry on its own. Instead, it enables context propagation for Hibernate Reactive asynchronous operations.\n",
      "library_link": "https://hibernate.org/reactive/",
      "name": "hibernate-reactive-1.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-reactive-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-reactive-1.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate.reactive:hibernate-reactive-core:(,)"
        ]
      }
    },
    {
      "description": "This instrumentation provides database client metrics for HikariCP 3.0+ connection pools. It reports metrics like connection timeouts, creation time, wait time, and usage time, along with connection pool statistics such as the number of active, idle, and pending connections.\n",
      "library_link": "https://github.com/brettwooldridge/HikariCP",
      "markdown_content": "# Library Instrumentation for HikariCP version 3.0 and higher\n\nProvides OpenTelemetry instrumentation for [HikariCP](https://github.com/brettwooldridge/HikariCP).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-hikaricp-3.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-hikaricp-3.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-hikaricp-3.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a `MetricsTrackerFactory` implementation that can be added to\nan instance of the `HikariConfig` (or `HikariDataSource`) to provide OpenTelemetry-based metrics.\n\n```java\nvoid configure(OpenTelemetry openTelemetry, HikariConfig connectionPoolConfig) {\n  HikariTelemetry telemetry = HikariTelemetry.create(openTelemetry);\n  connectionPoolConfig.setMetricsTrackerFactory(telemetry.createMetricsTrackerFactory());\n}\n```\n",
      "name": "hikaricp-3.0",
      "scope": {
        "name": "io.opentelemetry.hikaricp-3.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/hikaricp-3.0",
      "target_versions": {
        "javaagent": [
          "com.zaxxer:HikariCP:[3.0.0,)"
        ],
        "library": [
          "com.zaxxer:HikariCP:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time it took to create a new connection.",
              "name": "db.client.connections.create_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of connection timeouts that have occurred trying to obtain a connection from the pool.",
              "name": "db.client.connections.timeouts",
              "type": "LONG_SUM",
              "unit": "timeouts"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time between borrowing a connection and returning it to the pool.",
              "name": "db.client.connections.use_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The time it took to obtain an open connection from the pool.",
              "name": "db.client.connections.wait_time",
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to create a new connection.",
              "name": "db.client.connection.create_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connection timeouts that have occurred trying to obtain a connection from the pool.",
              "name": "db.client.connection.timeouts",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "timeout"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time between borrowing a connection and returning it to the pool.",
              "name": "db.client.connection.use_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to obtain an open connection from the pool.",
              "name": "db.client.connection.wait_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables the generation of HTTP client spans and HTTP client metrics for requests made using `java.net.HttpURLConnection`.\n",
      "library_link": "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/HttpURLConnection.html",
      "name": "http-url-connection",
      "scope": {
        "name": "io.opentelemetry.http-url-connection"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/http-url-connection",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing the experimental `hystrix.command`, `hystrix.circuit_open` and `hystrix.group` span attributes.",
          "name": "otel.instrumentation.hystrix.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hystrix command executions and fallbacks.",
      "library_link": "https://github.com/Netflix/Hystrix",
      "name": "hystrix-1.4",
      "scope": {
        "name": "io.opentelemetry.hystrix-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/hystrix-1.4",
      "target_versions": {
        "javaagent": [
          "com.netflix.hystrix:hystrix-core:[1.4.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hystrix.circuit_open",
                  "type": "BOOLEAN"
                },
                {
                  "name": "hystrix.command",
                  "type": "STRING"
                },
                {
                  "name": "hystrix.group",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hystrix.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation enables the generation of database client spans and metrics for the InfluxDB Java client.",
      "library_link": "https://github.com/influxdata/influxdb-java",
      "name": "influxdb-2.4",
      "scope": {
        "name": "io.opentelemetry.influxdb-2.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/influxdb-2.4",
      "target_versions": {
        "javaagent": [
          "org.influxdb:influxdb-java:[2.4,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for requests made using the Java HTTP client.",
      "library_link": "https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/package-summary.html",
      "markdown_content": "# Library Instrumentation for Java HTTP Client\n\nProvides OpenTelemetry instrumentation for [Java HTTP Client](https://openjdk.org/groups/net/httpclient/intro.html).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-java-http-client).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-java-http-client</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-java-http-client:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library contains an `HttpClient` wrapper that provides OpenTelemetry-based spans\nand context propagation.\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.httpclient.JavaHttpClientTelemetry;\nimport java.net.http.HttpClient;\n\nimport java.util.concurrent.ExecutorService;\n\npublic class JavaHttpClientConfiguration {\n\n  //Use this HttpClient implementation for making standard http client calls.\n  public HttpClient createTracedClient(OpenTelemetry openTelemetry) {\n    return JavaHttpClientTelemetry.builder(openTelemetry).build().newHttpClient(createClient());\n  }\n\n  //your configuration of the Java HTTP Client goes here:\n  private HttpClient createClient() {\n    return HttpClient.newBuilder().build();\n  }\n}\n```\n",
      "minimum_java_version": 11,
      "name": "java-http-client",
      "scope": {
        "name": "io.opentelemetry.java-http-client"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/java-http-client",
      "target_versions": {
        "javaagent": [
          "Java 11+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.body.size` and `http.server.response.body.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP server spans and HTTP server metrics for the Java HTTP server.",
      "library_link": "https://docs.oracle.com/en/java/javase/21/docs/api/jdk.httpserver/module-summary.html",
      "markdown_content": "# Library Instrumentation for Java HTTP Server\n\nProvides OpenTelemetry instrumentation for [Java HTTP Server](https://docs.oracle.com/en/java/javase/21/docs/api/jdk.httpserver/module-summary.html).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-java-http-server).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-java-http-server</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-java-http-server:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library contains a `Filter` wrapper that provides OpenTelemetry-based spans\nand context propagation.\n\n```java\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\n\nimport com.sun.net.httpserver.HttpContext;\nimport com.sun.net.httpserver.HttpServer;\n\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\n\npublic class Application {\n\n  static void main(String args) throws IOException {\n\n    final HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);\n    final HttpContext context =\n        server.createContext(\n            \"/\",\n            ctx -> {\n              // http logic\n            });\n\n    OpenTelemetry openTelemetry = //...\n\n    JavaHttpServerTelemetry.create(openTelemetry).configure(context);\n  }\n}\n```\n",
      "name": "java-http-server",
      "scope": {
        "name": "io.opentelemetry.java-http-server"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/java-http-server",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enriches existing HTTP server spans with route information, it does not emit any telemetry on its own.",
      "library_link": "https://javalin.io/",
      "minimum_java_version": 11,
      "name": "javalin-5.0",
      "scope": {
        "name": "io.opentelemetry.javalin-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/javalin-5.0",
      "target_versions": {
        "javaagent": [
          "io.javalin:javalin:[5.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JAX-RS 1.x",
      "library_link": "https://javaee.github.io/javaee-spec/javadocs/javax/ws/rs/package-summary.html",
      "name": "jaxrs-1.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-1.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-1.0",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:jsr311-api:[0.5,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS annotated methods, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JAX-RS 2.x",
      "library_link": "https://javaee.github.io/javaee-spec/javadocs/javax/ws/rs/package-summary.html",
      "name": "jaxrs-2.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-annotations"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-annotations",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:javax.ws.rs-api:[,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using Apache CXF, and enriches existing HTTP server spans with route information.\n",
      "display_name": "Apache CXF JAX-RS 2.x",
      "library_link": "https://cxf.apache.org/",
      "name": "jaxrs-2.0-cxf-3.2",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-cxf-3.2"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-cxf-3.2",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxrs:[3.2,4)",
          "org.apache.tomee:openejb-cxf-rs:(8,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using Jersey, and enriches existing HTTP server spans with route information.\n",
      "display_name": "Eclipse Jersey JAX-RS 2.x",
      "library_link": "https://eclipse-ee4j.github.io/jersey/",
      "name": "jaxrs-2.0-jersey-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-jersey-2.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-jersey-2.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.containers:jersey-container-servlet:[2.0,3.0.0)",
          "org.glassfish.jersey.core:jersey-server:[2.0,3.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using RESTEasy, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JBoss RESTEasy JAX-RS 2.x",
      "library_link": "https://resteasy.dev/",
      "name": "jaxrs-2.0-resteasy-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-jaxrs:[3.0.0.Final,3.1.0.Final)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.5.0.Final,4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using RESTEasy, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JBoss RESTEasy JAX-RS 2.x",
      "library_link": "https://resteasy.dev/",
      "name": "jaxrs-2.0-resteasy-3.1",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[4.0.0.Final,6)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.1.0.Final,3.5.0.Final)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS annotated methods, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JAX-RS 3.x",
      "library_link": "https://jakarta.ee/specifications/restful-ws/3.0/",
      "name": "jaxrs-3.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-annotations"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-annotations",
      "target_versions": {
        "javaagent": [
          "jakarta.ws.rs:jakarta.ws.rs-api:[3.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using Jersey, and enriches existing HTTP server spans with route information.\n",
      "display_name": "Eclipse Jersey JAX-RS 3.x",
      "library_link": "https://eclipse-ee4j.github.io/jersey/",
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-jersey-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-jersey-3.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-jersey-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.core:jersey-server:[3.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using RESTEasy, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JBoss RESTEasy JAX-RS 3.x",
      "library_link": "https://resteasy.dev/",
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-resteasy-6.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-resteasy-6.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-resteasy-6.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[6.0.0.Final,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "name": "jaxws-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0",
      "target_versions": {
        "javaagent": [
          "javax.xml.ws:jaxws-api:[2.0,]"
        ]
      }
    },
    {
      "name": "jaxws-2.0-axis2-1.6",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0-axis2-1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0-axis2-1.6",
      "target_versions": {
        "javaagent": [
          "org.apache.axis2:axis2-jaxws:[1.6.0,)"
        ]
      }
    },
    {
      "name": "jaxws-cxf-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-cxf-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-cxf-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxws:[3.0.0,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "jaxws-jws-api-1.1",
      "scope": {
        "name": "io.opentelemetry.jaxws-jws-api-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-jws-api-1.1",
      "target_versions": {
        "javaagent": [
          "javax.jws:javax.jws-api:[1.1,]"
        ]
      }
    },
    {
      "name": "jaxws-metro-2.2",
      "scope": {
        "name": "io.opentelemetry.jaxws-metro-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-metro-2.2",
      "target_versions": {
        "javaagent": [
          "com.sun.xml.ws:jaxws-rt:[2.2.0.1,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-appender-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-appender-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-appender-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-mdc-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-mdc-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-mdc-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": false,
          "description": "Enables instrumentation of JDBC datasource connections.",
          "name": "otel.instrumentation.jdbc-datasource.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Sets whether the query parameters should be captured as span attributes named <code>db.query.parameter.&lt;key&gt;</code>. Enabling this option disables the statement sanitization.<p>WARNING: captured query parameters may contain sensitive information such as passwords, personally identifiable information or protected health info.\n",
          "name": "otel.instrumentation.jdbc.experimental.capture-query-parameters",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental instrumentation to create spans for COMMIT and ROLLBACK operations.",
          "name": "otel.instrumentation.jdbc.experimental.transaction.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables statement sanitization for database queries. Takes precedent to otel.instrumentation.common.db-statement-sanitizer.enabled.",
          "name": "otel.instrumentation.jdbc.statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "The JDBC instrumentation provides database client spans and metrics. Each call produces a span named after the SQL verb, enriched with standard DB client attributes (system, database, operation, sanitized statement, peer address) and error details if an exception occurs.\nThere is also a \"jdbc-datasource\" instrumentation that creates spans for datasource connections, but is disabled by default due to the volume of telemetry produced.\n",
      "library_link": "https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html",
      "markdown_content": "# Library Instrumentation for JDBC\n\nProvides OpenTelemetry instrumentation for\n[Java JDBC API](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-jdbc).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-jdbc</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThere are two possible ways to activate the OpenTelemetry JDBC instrumentation. The first way is more preferable for\nDI frameworks which uses connection pools, as it wraps a `DataSource` with a special OpenTelemetry wrapper. The second\none requires to change the connection URL and switch to use a special OpenTelemetry driver.\n\n#### Datasource way\n\nIf your application uses a DataSource, simply wrap your current DataSource object with `OpenTelemetryDataSource`.\n`OpenTelemetryDataSource` has a constructor method that accepts the `DataSource` to wrap. This is by far the simplest\nmethod especially if you use a dependency injection (DI) frameworks such as\n[Spring Framework](https://spring.io/projects/spring-framework), [Micronaut](https://micronaut.io),\n[Quarkus](https://quarkus.io), or [Guice](https://github.com/google/guice).\n\n```java\nimport org.apache.commons.dbcp2.BasicDataSource;\nimport org.springframework.context.annotation.Configuration;\nimport io.opentelemetry.instrumentation.jdbc.datasource.OpenTelemetryDataSource;\n\n@Configuration\npublic class DataSourceConfig {\n\n  @Bean\n  public DataSource dataSource() {\n    BasicDataSource dataSource = new BasicDataSource();\n    dataSource.setDriverClassName(\"org.postgresql.Driver\");\n    dataSource.setUrl(\"jdbc:postgresql://127.0.0.1:5432/example\");\n    dataSource.setUsername(\"postgres\");\n    dataSource.setPassword(\"root\");\n    return JdbcTelemetry.create(openTelemetry).wrap(dataSource);\n  }\n\n}\n```\n\n#### Driver way\n\n1. Activate tracing for JDBC connections by setting `jdbc:otel:` prefix to the JDBC URL, e.g. `jdbc:otel:h2:mem:test`.\n\n2. Set the driver class to `io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver`.\n\n3. Inject `OpenTelemetry` into `io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver` _before the initialization of the database connection pool_.\nYou can do this with the `void setOpenTelemetry(OpenTelemetry openTelemetry)` method of `io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver`.\nAnother way is to use `OpenTelemetryDriver.install(OpenTelemetry openTelemetry)`.\n",
      "name": "jdbc",
      "scope": {
        "name": "io.opentelemetry.jdbc"
      },
      "semconv": [],
      "source_path": "instrumentation/jdbc",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "name": "jedis-1.4",
      "scope": {
        "name": "io.opentelemetry.jedis-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-1.4",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[1.4.0,3.0.0)"
        ]
      }
    },
    {
      "name": "jedis-3.0",
      "scope": {
        "name": "io.opentelemetry.jedis-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-3.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[3.0.0,4)"
        ]
      }
    },
    {
      "name": "jedis-4.0",
      "scope": {
        "name": "io.opentelemetry.jedis-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-4.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[4.0.0-beta1,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jetty-11.0",
      "scope": {
        "name": "io.opentelemetry.jetty-11.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-11.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[11, 12)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "jetty-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-12.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[12,)"
        ]
      }
    },
    {
      "name": "jetty-8.0",
      "scope": {
        "name": "io.opentelemetry.jetty-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-8.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[8.0.0.v20110901,11)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Jetty HttpClient version 12.0 and higher\n\nProvides OpenTelemetry instrumentation for the [Jetty HttpClient](https://www.eclipse.org/jetty/documentation/jetty-12/programming-guide/index.html#pg-client-http),\nenabling database client spans and metrics.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-jetty-httpclient-12.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-jetty-httpclient-12.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-jetty-httpclient-12.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.jetty.httpclient.v12_0.JettyClientTelemetry;\nimport org.eclipse.jetty.client.HttpClient;\n\n// ...\n\n// Get an OpenTelemetry instance\nOpenTelemetry openTelemetry = ...;\n\n// Create a JettyClientTelemetry instance\nJettyClientTelemetry telemetry = JettyClientTelemetry.create(openTelemetry);\n\n// Get a traced HttpClient\nHttpClient httpClient = telemetry.getHttpClient();\n\n// ... use the httpClient to make requests\n```\n",
      "minimum_java_version": 17,
      "name": "jetty-httpclient-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-12.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[12,)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:12.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "markdown_content": "# Library Instrumentation for Jetty HttpClient version 9.2 and higher\n\nProvides OpenTelemetry instrumentation for the [Jetty HttpClient](https://github.com/jetty/jetty.project/tree/jetty-9.4.x), enabling http client spans\nand metrics.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release](https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-jetty-httpclient-9.2).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-jetty-httpclient-9.2</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-jetty-httpclient-9.2:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.jetty.httpclient.v9_2.JettyClientTelemetry;\nimport org.eclipse.jetty.client.HttpClient;\n\n// ...\n\n// Get an OpenTelemetry instance\nOpenTelemetry openTelemetry = ...;\n\n// Create a JettyClientTelemetry instance\nJettyClientTelemetry telemetry = JettyClientTelemetry.create(openTelemetry);\n\n// Get a traced HttpClient\nHttpClient httpClient = telemetry.getHttpClient();\n\n// ... use the httpClient to make requests\n```\n",
      "name": "jetty-httpclient-9.2",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-9.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-9.2",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[9.2,10)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:[9.2.0.v20140526,9.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jms-1.1",
      "scope": {
        "name": "io.opentelemetry.jms-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-1.1",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:(,3)",
          "javax.jms:javax.jms-api:(,)",
          "javax.jms:jms-api:(,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jms-3.0",
      "scope": {
        "name": "io.opentelemetry.jms-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-3.0",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:[3.0.0,)"
        ]
      }
    },
    {
      "name": "jodd-http-4.2",
      "scope": {
        "name": "io.opentelemetry.jodd-http-4.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jodd-http-4.2",
      "target_versions": {
        "javaagent": [
          "org.jodd:jodd-http:[4.2.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jsf-mojarra-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-1.2",
      "target_versions": {
        "javaagent": [
          "com.sun.faces:jsf-impl:[2.0,2.1)",
          "com.sun.faces:jsf-impl:[2.1,2.2)",
          "javax.faces:jsf-impl:[1.2,2)",
          "org.glassfish:jakarta.faces:[2.3.9,3)",
          "org.glassfish:javax.faces:[2.0.7,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-mojarra-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish:jakarta.faces:[3,)"
        ]
      }
    },
    {
      "name": "jsf-myfaces-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-1.2",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[1.2,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-myfaces-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[3,)"
        ]
      }
    },
    {
      "name": "jsp-2.3",
      "scope": {
        "name": "io.opentelemetry.jsp-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/jsp-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jasper:[7.0.19,10)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the capture of the experimental consumer attribute \"kafka.record.queue_time_ms\"",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enable context propagation for kafka message producers.",
          "name": "otel.instrumentation.kafka.producer-propagation.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables messaging spans and metrics for Apache Kafka 0.11 clients. It automatically traces message production and consumption, propagates context, and emits metrics for production and consumption.\n",
      "library_link": "https://kafka.apache.org/",
      "name": "kafka-clients-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-clients:[0.11.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation provides a library integration that enables messaging spans and metrics for Apache Kafka 2.6+ clients.\n",
      "library_link": "https://kafka.apache.org/",
      "markdown_content": "# Library instrumentation for Kafka Clients version 2.6 and higher\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-kafka-clients-2.6).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-kafka-clients-2.6</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-kafka-clients-2.6:OPENTELEMETRY_VERSION\")\n```\n\n### Usage (Tracing)\n\nThere are two options for capturing traces, either using interceptors or wrapping clients, both described below.\n\n#### Using interceptors\n\nThe Kafka clients API provides a way to \"intercept\" messages before they are sent to the brokers as well as messages received from the broker before being passed to the application.\nThe OpenTelemetry instrumented Kafka library provides two interceptors to be configured to add tracing information automatically.\nThe interceptor class has to be set in the properties bag used to create the Kafka client.\n\nUse the `TracingProducerInterceptor` for the producer in order to create a \"send\" span automatically, each time a message is sent.\n\n```java\nprops.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingProducerInterceptor.class.getName());\n```\n\nUse the `TracingConsumerInterceptor` for the consumer in order to create a \"receive\" span automatically, each time a message is received.\n\n```java\nprops.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingConsumerInterceptor.class.getName());\n```\n\n#### Wrapping clients\n\nThe other way is by wrapping the Kafka client with a tracing enabled Kafka client.\n\nAssuming you have a `Producer<K, V> producer` instance, you can wrap it in the following way.\n\n```java\nKafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());\nProducer<String, String> tracingProducer = telemetry.wrap(producer);\n```\n\nThen use the `tracingProducer` as usual for sending messages to the Kafka cluster.\n\nAssuming you have a `Consumer<K, V> consumer` instance, you can wrap it in the following way.\n\n```java\nKafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());\nConsumer<String, String> tracingConsumer = telemetry.wrap(this.consumer);\n```\n\nThen use the `tracingConsumer` as usual for receiving messages from the Kafka cluster.\n\n### Usage (Metrics)\n\nThe Kafka client exposes metrics via `org.apache.kafka.common.metrics.MetricsReporter` interface.\nOpenTelemetry provides an implementation that bridges the metrics into OpenTelemetry.\n\nTo use, merge the config properties\nfrom `KafkaTelemetry.create(OpenTelemetry).metricConfigProperties()`\nwith the configuration used when creating your producer or consumer.\n\nNote: Kafka reports several metrics at multiple attribute granularities. For\nexample, `records-consumed-total` is reported with attribute key `[client-id]`\nand `[client-id, topic]`. If you analyze the sum of records consumed, ignoring dimensions, backends\nare likely to double count. The implementation detects this scenario and only records the most\ngranular set of attributes available. In the case\nof `records-consumed-total`, it reports `[client-id, topic]` and ignores `[client-id]`.\n\nThe following table shows the full set of metrics exposed by the kafka client, and the corresponding\nOpenTelemetry metric each maps to (if available). Empty values in the Instrument Name, Instrument\nDescription, etc column indicates there is no registered mapping for the metric and data is NOT\ncollected.\n\n| Metric Group                     | Metric Name                                 | Attribute Keys                  | Instrument Name                                            | Instrument Description                                                                                                                            | Instrument Type             |\n|----------------------------------|---------------------------------------------|---------------------------------|------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|\n| `consumer-coordinator-metrics`   | `assigned-partitions`                       | `client-id`                     | `kafka.consumer.assigned_partitions`                       | The number of partitions currently assigned to this consumer.                                                                                     | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-latency-avg`                        | `client-id`                     | `kafka.consumer.commit_latency_avg`                        | The average time taken for a commit request.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-latency-max`                        | `client-id`                     | `kafka.consumer.commit_latency_max`                        | The max time taken for a commit request.                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-rate`                               | `client-id`                     | `kafka.consumer.commit_rate`                               | The number of commit calls per second.                                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `commit-total`                              | `client-id`                     | `kafka.consumer.commit_total`                              | The total number of commit calls.                                                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `failed-rebalance-rate-per-hour`            | `client-id`                     | `kafka.consumer.failed_rebalance_rate_per_hour`            | The number of failed rebalance events per hour.                                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `failed-rebalance-total`                    | `client-id`                     | `kafka.consumer.failed_rebalance_total`                    | The total number of failed rebalance events.                                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `heartbeat-rate`                            | `client-id`                     | `kafka.consumer.heartbeat_rate`                            | The number of heartbeats per second.                                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `heartbeat-response-time-max`               | `client-id`                     | `kafka.consumer.heartbeat_response_time_max`               | The max time taken to receive a response to a heartbeat request.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `heartbeat-total`                           | `client-id`                     | `kafka.consumer.heartbeat_total`                           | The total number of heartbeats.                                                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `join-rate`                                 | `client-id`                     | `kafka.consumer.join_rate`                                 | The number of group joins per second.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `join-time-avg`                             | `client-id`                     | `kafka.consumer.join_time_avg`                             | The average time taken for a group rejoin.                                                                                                        | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `join-time-max`                             | `client-id`                     | `kafka.consumer.join_time_max`                             | The max time taken for a group rejoin.                                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `join-total`                                | `client-id`                     | `kafka.consumer.join_total`                                | The total number of group joins.                                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `last-heartbeat-seconds-ago`                | `client-id`                     | `kafka.consumer.last_heartbeat_seconds_ago`                | The number of seconds since the last coordinator heartbeat was sent.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `last-rebalance-seconds-ago`                | `client-id`                     | `kafka.consumer.last_rebalance_seconds_ago`                | The number of seconds since the last successful rebalance event.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-assigned-latency-avg`            | `client-id`                     | `kafka.consumer.partition_assigned_latency_avg`            | The average time taken for a partition-assigned rebalance listener callback.                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-assigned-latency-max`            | `client-id`                     | `kafka.consumer.partition_assigned_latency_max`            | The max time taken for a partition-assigned rebalance listener callback.                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-lost-latency-avg`                | `client-id`                     | `kafka.consumer.partition_lost_latency_avg`                | The average time taken for a partition-lost rebalance listener callback.                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-lost-latency-max`                | `client-id`                     | `kafka.consumer.partition_lost_latency_max`                | The max time taken for a partition-lost rebalance listener callback.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-revoked-latency-avg`             | `client-id`                     | `kafka.consumer.partition_revoked_latency_avg`             | The average time taken for a partition-revoked rebalance listener callback.                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `partition-revoked-latency-max`             | `client-id`                     | `kafka.consumer.partition_revoked_latency_max`             | The max time taken for a partition-revoked rebalance listener callback.                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-latency-avg`                     | `client-id`                     | `kafka.consumer.rebalance_latency_avg`                     | The average time taken for a group to complete a successful rebalance, which may be composed of several failed re-trials until it succeeded.      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-latency-max`                     | `client-id`                     | `kafka.consumer.rebalance_latency_max`                     | The max time taken for a group to complete a successful rebalance, which may be composed of several failed re-trials until it succeeded.          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-latency-total`                   | `client-id`                     | `kafka.consumer.rebalance_latency_total`                   | The total number of milliseconds this consumer has spent in successful rebalances since creation.                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `rebalance-rate-per-hour`                   | `client-id`                     | `kafka.consumer.rebalance_rate_per_hour`                   | The number of successful rebalance events per hour, each event is composed of several failed re-trials until it succeeded.                        | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `rebalance-total`                           | `client-id`                     | `kafka.consumer.rebalance_total`                           | The total number of successful rebalance events, each event is composed of several failed re-trials until it succeeded.                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-coordinator-metrics`   | `sync-rate`                                 | `client-id`                     | `kafka.consumer.sync_rate`                                 | The number of group syncs per second.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `sync-time-avg`                             | `client-id`                     | `kafka.consumer.sync_time_avg`                             | The average time taken for a group sync.                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `sync-time-max`                             | `client-id`                     | `kafka.consumer.sync_time_max`                             | The max time taken for a group sync.                                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-coordinator-metrics`   | `sync-total`                                | `client-id`                     | `kafka.consumer.sync_total`                                | The total number of group syncs.                                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `bytes-consumed-rate`                       | `client-id`,`topic`             | `kafka.consumer.bytes_consumed_rate`                       | The average number of bytes consumed per second.                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `bytes-consumed-total`                      | `client-id`,`topic`             | `kafka.consumer.bytes_consumed_total`                      | The total number of bytes consumed.                                                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `fetch-latency-avg`                         | `client-id`                     | `kafka.consumer.fetch_latency_avg`                         | The average time taken for a fetch request.                                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-latency-max`                         | `client-id`                     | `kafka.consumer.fetch_latency_max`                         | The max time taken for any fetch request.                                                                                                         | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-rate`                                | `client-id`                     | `kafka.consumer.fetch_rate`                                | The number of fetch requests per second.                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-size-avg`                            | `client-id`,`topic`             | `kafka.consumer.fetch_size_avg`                            | The average number of bytes fetched per request.                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-size-max`                            | `client-id`,`topic`             | `kafka.consumer.fetch_size_max`                            | The maximum number of bytes fetched per request.                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-throttle-time-avg`                   | `client-id`                     | `kafka.consumer.fetch_throttle_time_avg`                   | The average throttle time in ms.                                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-throttle-time-max`                   | `client-id`                     | `kafka.consumer.fetch_throttle_time_max`                   | The maximum throttle time in ms.                                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `fetch-total`                               | `client-id`                     | `kafka.consumer.fetch_total`                               | The total number of fetch requests.                                                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `records-consumed-rate`                     | `client-id`,`topic`             | `kafka.consumer.records_consumed_rate`                     | The average number of records consumed per second.                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-consumed-total`                    | `client-id`,`topic`             | `kafka.consumer.records_consumed_total`                    | The total number of records consumed.                                                                                                             | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-fetch-manager-metrics` | `records-lag`                               | `client-id`,`topic`,`partition` | `kafka.consumer.records_lag`                               | The latest lag of the partition.                                                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lag-avg`                           | `client-id`,`topic`,`partition` | `kafka.consumer.records_lag_avg`                           | The average lag of the partition.                                                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lag-max`                           | `client-id`,`topic`,`partition` | `kafka.consumer.records_lag_max`                           | The maximum lag in terms of number of records for any partition in this window. NOTE: This is based on current offset and not committed offset.   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lead`                              | `client-id`,`topic`,`partition` | `kafka.consumer.records_lead`                              | The latest lead of the partition.                                                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lead-avg`                          | `client-id`,`topic`,`partition` | `kafka.consumer.records_lead_avg`                          | The average lead of the partition.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-lead-min`                          | `client-id`,`topic`,`partition` | `kafka.consumer.records_lead_min`                          | The minimum lead in terms of number of records for any partition in this window.                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-fetch-manager-metrics` | `records-per-request-avg`                   | `client-id`,`topic`             | `kafka.consumer.records_per_request_avg`                   | The average number of records in each request.                                                                                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `commit-sync-time-ns-total`                 | `client-id`                     | `kafka.consumer.commit_sync_time_ns_total`                 | The total time the consumer has spent in commitSync in nanoseconds.                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `committed-time-ns-total`                   | `client-id`                     | `kafka.consumer.committed_time_ns_total`                   | The total time the consumer has spent in committed in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `connection-close-rate`                     | `client-id`                     | `kafka.consumer.connection_close_rate`                     | The number of connections closed per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `connection-close-total`                    | `client-id`                     | `kafka.consumer.connection_close_total`                    | The total number of connections closed.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `connection-count`                          | `client-id`                     | `kafka.consumer.connection_count`                          | The current number of active connections.                                                                                                         | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `connection-creation-rate`                  | `client-id`                     | `kafka.consumer.connection_creation_rate`                  | The number of new connections established per second.                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `connection-creation-total`                 | `client-id`                     | `kafka.consumer.connection_creation_total`                 | The total number of new connections established.                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `failed-authentication-rate`                | `client-id`                     | `kafka.consumer.failed_authentication_rate`                | The number of connections with failed authentication per second.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `failed-authentication-total`               | `client-id`                     | `kafka.consumer.failed_authentication_total`               | The total number of connections with failed authentication.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `failed-reauthentication-rate`              | `client-id`                     | `kafka.consumer.failed_reauthentication_rate`              | The number of failed re-authentication of connections per second.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `failed-reauthentication-total`             | `client-id`                     | `kafka.consumer.failed_reauthentication_total`             | The total number of failed re-authentication of connections.                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `io-ratio`                                  | `client-id`                     | `kafka.consumer.io_ratio`                                  | *Deprecated* The fraction of time the I/O thread spent doing I/O.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-time-ns-avg`                            | `client-id`                     | `kafka.consumer.io_time_ns_avg`                            | The average length of time for I/O per select call in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-time-ns-total`                          | `client-id`                     | `kafka.consumer.io_time_ns_total`                          | The total time the I/O thread spent doing I/O.                                                                                                    | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `io-wait-ratio`                             | `client-id`                     | `kafka.consumer.io_wait_ratio`                             | *Deprecated* The fraction of time the I/O thread spent waiting.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-wait-time-ns-avg`                       | `client-id`                     | `kafka.consumer.io_wait_time_ns_avg`                       | The average length of time the I/O thread spent waiting for a socket ready for reads or writes in nanoseconds.                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `io-wait-time-ns-total`                     | `client-id`                     | `kafka.consumer.io_wait_time_ns_total`                     | The total time the I/O thread spent waiting.                                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `io-waittime-total`                         | `client-id`                     | `kafka.consumer.io_waittime_total`                         | *Deprecated* The total time the I/O thread spent waiting.                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `iotime-total`                              | `client-id`                     | `kafka.consumer.iotime_total`                              | *Deprecated* The total time the I/O thread spent doing I/O.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `last-poll-seconds-ago`                     | `client-id`                     | `kafka.consumer.last_poll_seconds_ago`                     | The number of seconds since the last poll() invocation.                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `network-io-rate`                           | `client-id`                     | `kafka.consumer.network_io_rate`                           | The number of network operations (reads or writes) on all connections per second.                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `network-io-total`                          | `client-id`                     | `kafka.consumer.network_io_total`                          | The total number of network operations (reads or writes) on all connections.                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `poll-idle-ratio-avg`                       | `client-id`                     | `kafka.consumer.poll_idle_ratio_avg`                       | The average fraction of time the consumer's poll() is idle as opposed to waiting for the user code to process records.                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `reauthentication-latency-avg`              | `client-id`                     | `kafka.consumer.reauthentication_latency_avg`              | The average latency observed due to re-authentication.                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `reauthentication-latency-max`              | `client-id`                     | `kafka.consumer.reauthentication_latency_max`              | The max latency observed due to re-authentication.                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `select-rate`                               | `client-id`                     | `kafka.consumer.select_rate`                               | The number of times the I/O layer checked for new I/O to perform per second.                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `select-total`                              | `client-id`                     | `kafka.consumer.select_total`                              | The total number of times the I/O layer checked for new I/O to perform.                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `successful-authentication-no-reauth-total` | `client-id`                     | `kafka.consumer.successful_authentication_no_reauth_total` | The total number of connections with successful authentication where the client does not support re-authentication.                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `successful-authentication-rate`            | `client-id`                     | `kafka.consumer.successful_authentication_rate`            | The number of connections with successful authentication per second.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `successful-authentication-total`           | `client-id`                     | `kafka.consumer.successful_authentication_total`           | The total number of connections with successful authentication.                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `successful-reauthentication-rate`          | `client-id`                     | `kafka.consumer.successful_reauthentication_rate`          | The number of successful re-authentication of connections per second.                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `successful-reauthentication-total`         | `client-id`                     | `kafka.consumer.successful_reauthentication_total`         | The total number of successful re-authentication of connections.                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-metrics`               | `time-between-poll-avg`                     | `client-id`                     | `kafka.consumer.time_between_poll_avg`                     | The average delay between invocations of poll() in milliseconds.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-metrics`               | `time-between-poll-max`                     | `client-id`                     | `kafka.consumer.time_between_poll_max`                     | The max delay between invocations of poll() in milliseconds.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `incoming-byte-rate`                        | `client-id`,`node-id`           | `kafka.consumer.incoming_byte_rate`                        | The number of bytes read off all sockets per second.                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `incoming-byte-total`                       | `client-id`,`node-id`           | `kafka.consumer.incoming_byte_total`                       | The total number of bytes read off all sockets.                                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-node-metrics`          | `outgoing-byte-rate`                        | `client-id`,`node-id`           | `kafka.consumer.outgoing_byte_rate`                        | The number of outgoing bytes sent to all servers per second.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `outgoing-byte-total`                       | `client-id`,`node-id`           | `kafka.consumer.outgoing_byte_total`                       | The total number of outgoing bytes sent to all servers.                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-node-metrics`          | `request-latency-avg`                       | `client-id`,`node-id`           | `kafka.consumer.request_latency_avg`                       | The average request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-latency-max`                       | `client-id`,`node-id`           | `kafka.consumer.request_latency_max`                       | The maximum request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-rate`                              | `client-id`,`node-id`           | `kafka.consumer.request_rate`                              | The number of requests sent per second.                                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-size-avg`                          | `client-id`,`node-id`           | `kafka.consumer.request_size_avg`                          | The average size of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-size-max`                          | `client-id`,`node-id`           | `kafka.consumer.request_size_max`                          | The maximum size of any request sent.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `request-total`                             | `client-id`,`node-id`           | `kafka.consumer.request_total`                             | The total number of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `consumer-node-metrics`          | `response-rate`                             | `client-id`,`node-id`           | `kafka.consumer.response_rate`                             | The number of responses received per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `consumer-node-metrics`          | `response-total`                            | `client-id`,`node-id`           | `kafka.consumer.response_total`                            | The total number of responses received.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `batch-size-avg`                            | `client-id`                     | `kafka.producer.batch_size_avg`                            | The average number of bytes sent per partition per-request.                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `batch-size-max`                            | `client-id`                     | `kafka.producer.batch_size_max`                            | The max number of bytes sent per partition per-request.                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `batch-split-rate`                          | `client-id`                     | `kafka.producer.batch_split_rate`                          | The average number of batch splits per second.                                                                                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `batch-split-total`                         | `client-id`                     | `kafka.producer.batch_split_total`                         | The total number of batch splits.                                                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `buffer-available-bytes`                    | `client-id`                     | `kafka.producer.buffer_available_bytes`                    | The total amount of buffer memory that is not being used (either unallocated or in the free list).                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `buffer-exhausted-rate`                     | `client-id`                     | `kafka.producer.buffer_exhausted_rate`                     | The average per-second number of record sends that are dropped due to buffer exhaustion.                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `buffer-exhausted-total`                    | `client-id`                     | `kafka.producer.buffer_exhausted_total`                    | The total number of record sends that are dropped due to buffer exhaustion.                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `buffer-total-bytes`                        | `client-id`                     | `kafka.producer.buffer_total_bytes`                        | The maximum amount of buffer memory the client can use (whether or not it is currently used).                                                     | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `bufferpool-wait-ratio`                     | `client-id`                     | `kafka.producer.bufferpool_wait_ratio`                     | The fraction of time an appender waits for space allocation.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `bufferpool-wait-time-ns-total`             | `client-id`                     | `kafka.producer.bufferpool_wait_time_ns_total`             | The total time in nanoseconds an appender waits for space allocation.                                                                             | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `bufferpool-wait-time-total`                | `client-id`                     | `kafka.producer.bufferpool_wait_time_total`                | *Deprecated* The total time an appender waits for space allocation.                                                                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `compression-rate-avg`                      | `client-id`                     | `kafka.producer.compression_rate_avg`                      | The average compression rate of record batches, defined as the average ratio of the compressed batch size over the uncompressed size.             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-close-rate`                     | `client-id`                     | `kafka.producer.connection_close_rate`                     | The number of connections closed per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-close-total`                    | `client-id`                     | `kafka.producer.connection_close_total`                    | The total number of connections closed.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `connection-count`                          | `client-id`                     | `kafka.producer.connection_count`                          | The current number of active connections.                                                                                                         | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-creation-rate`                  | `client-id`                     | `kafka.producer.connection_creation_rate`                  | The number of new connections established per second.                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `connection-creation-total`                 | `client-id`                     | `kafka.producer.connection_creation_total`                 | The total number of new connections established.                                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `failed-authentication-rate`                | `client-id`                     | `kafka.producer.failed_authentication_rate`                | The number of connections with failed authentication per second.                                                                                  | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `failed-authentication-total`               | `client-id`                     | `kafka.producer.failed_authentication_total`               | The total number of connections with failed authentication.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `failed-reauthentication-rate`              | `client-id`                     | `kafka.producer.failed_reauthentication_rate`              | The number of failed re-authentication of connections per second.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `failed-reauthentication-total`             | `client-id`                     | `kafka.producer.failed_reauthentication_total`             | The total number of failed re-authentication of connections.                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `flush-time-ns-total`                       | `client-id`                     | `kafka.producer.flush_time_ns_total`                       | Total time producer has spent in flush in nanoseconds.                                                                                            | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `io-ratio`                                  | `client-id`                     | `kafka.producer.io_ratio`                                  | *Deprecated* The fraction of time the I/O thread spent doing I/O.                                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-time-ns-avg`                            | `client-id`                     | `kafka.producer.io_time_ns_avg`                            | The average length of time for I/O per select call in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-time-ns-total`                          | `client-id`                     | `kafka.producer.io_time_ns_total`                          | The total time the I/O thread spent doing I/O.                                                                                                    | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `io-wait-ratio`                             | `client-id`                     | `kafka.producer.io_wait_ratio`                             | *Deprecated* The fraction of time the I/O thread spent waiting.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-wait-time-ns-avg`                       | `client-id`                     | `kafka.producer.io_wait_time_ns_avg`                       | The average length of time the I/O thread spent waiting for a socket ready for reads or writes in nanoseconds.                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `io-wait-time-ns-total`                     | `client-id`                     | `kafka.producer.io_wait_time_ns_total`                     | The total time the I/O thread spent waiting.                                                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `io-waittime-total`                         | `client-id`                     | `kafka.producer.io_waittime_total`                         | *Deprecated* The total time the I/O thread spent waiting.                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `iotime-total`                              | `client-id`                     | `kafka.producer.iotime_total`                              | *Deprecated* The total time the I/O thread spent doing I/O.                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `metadata-age`                              | `client-id`                     | `kafka.producer.metadata_age`                              | The age in seconds of the current producer metadata being used.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `metadata-wait-time-ns-total`               | `client-id`                     | `kafka.producer.metadata_wait_time_ns_total`               | Total time producer has spent waiting on topic metadata in nanoseconds.                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `network-io-rate`                           | `client-id`                     | `kafka.producer.network_io_rate`                           | The number of network operations (reads or writes) on all connections per second.                                                                 | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `network-io-total`                          | `client-id`                     | `kafka.producer.network_io_total`                          | The total number of network operations (reads or writes) on all connections.                                                                      | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `produce-throttle-time-avg`                 | `client-id`                     | `kafka.producer.produce_throttle_time_avg`                 | The average time in ms a request was throttled by a broker.                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `produce-throttle-time-max`                 | `client-id`                     | `kafka.producer.produce_throttle_time_max`                 | The maximum time in ms a request was throttled by a broker.                                                                                       | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `reauthentication-latency-avg`              | `client-id`                     | `kafka.producer.reauthentication_latency_avg`              | The average latency observed due to re-authentication.                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `reauthentication-latency-max`              | `client-id`                     | `kafka.producer.reauthentication_latency_max`              | The max latency observed due to re-authentication.                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-queue-time-avg`                     | `client-id`                     | `kafka.producer.record_queue_time_avg`                     | The average time in ms record batches spent in the send buffer.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-queue-time-max`                     | `client-id`                     | `kafka.producer.record_queue_time_max`                     | The maximum time in ms record batches spent in the send buffer.                                                                                   | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-size-avg`                           | `client-id`                     | `kafka.producer.record_size_avg`                           | The average record size.                                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `record-size-max`                           | `client-id`                     | `kafka.producer.record_size_max`                           | The maximum record size.                                                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `records-per-request-avg`                   | `client-id`                     | `kafka.producer.records_per_request_avg`                   | The average number of records per request.                                                                                                        | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `requests-in-flight`                        | `client-id`                     | `kafka.producer.requests_in_flight`                        | The current number of in-flight requests awaiting a response.                                                                                     | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `select-rate`                               | `client-id`                     | `kafka.producer.select_rate`                               | The number of times the I/O layer checked for new I/O to perform per second.                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `select-total`                              | `client-id`                     | `kafka.producer.select_total`                              | The total number of times the I/O layer checked for new I/O to perform.                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `successful-authentication-no-reauth-total` | `client-id`                     | `kafka.producer.successful_authentication_no_reauth_total` | The total number of connections with successful authentication where the client does not support re-authentication.                               | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `successful-authentication-rate`            | `client-id`                     | `kafka.producer.successful_authentication_rate`            | The number of connections with successful authentication per second.                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `successful-authentication-total`           | `client-id`                     | `kafka.producer.successful_authentication_total`           | The total number of connections with successful authentication.                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `successful-reauthentication-rate`          | `client-id`                     | `kafka.producer.successful_reauthentication_rate`          | The number of successful re-authentication of connections per second.                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-metrics`               | `successful-reauthentication-total`         | `client-id`                     | `kafka.producer.successful_reauthentication_total`         | The total number of successful re-authentication of connections.                                                                                  | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-abort-time-ns-total`                   | `client-id`                     | `kafka.producer.txn_abort_time_ns_total`                   | Total time producer has spent in abortTransaction in nanoseconds.                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-begin-time-ns-total`                   | `client-id`                     | `kafka.producer.txn_begin_time_ns_total`                   | Total time producer has spent in beginTransaction in nanoseconds.                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-commit-time-ns-total`                  | `client-id`                     | `kafka.producer.txn_commit_time_ns_total`                  | Total time producer has spent in commitTransaction in nanoseconds.                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-init-time-ns-total`                    | `client-id`                     | `kafka.producer.txn_init_time_ns_total`                    | Total time producer has spent in initTransactions in nanoseconds.                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `txn-send-offsets-time-ns-total`            | `client-id`                     | `kafka.producer.txn_send_offsets_time_ns_total`            | Total time producer has spent in sendOffsetsToTransaction in nanoseconds.                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-metrics`               | `waiting-threads`                           | `client-id`                     | `kafka.producer.waiting_threads`                           | The number of user threads blocked waiting for buffer memory to enqueue their records.                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `incoming-byte-rate`                        | `client-id`,`node-id`           | `kafka.producer.incoming_byte_rate`                        | The number of bytes read off all sockets per second.                                                                                              | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `incoming-byte-total`                       | `client-id`,`node-id`           | `kafka.producer.incoming_byte_total`                       | The total number of bytes read off all sockets.                                                                                                   | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-node-metrics`          | `outgoing-byte-rate`                        | `client-id`,`node-id`           | `kafka.producer.outgoing_byte_rate`                        | The number of outgoing bytes sent to all servers per second.                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `outgoing-byte-total`                       | `client-id`,`node-id`           | `kafka.producer.outgoing_byte_total`                       | The total number of outgoing bytes sent to all servers.                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-node-metrics`          | `request-latency-avg`                       | `client-id`,`node-id`           | `kafka.producer.request_latency_avg`                       | The average request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-latency-max`                       | `client-id`,`node-id`           | `kafka.producer.request_latency_max`                       | The maximum request latency in ms.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-rate`                              | `client-id`,`node-id`           | `kafka.producer.request_rate`                              | The number of requests sent per second.                                                                                                           | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-size-avg`                          | `client-id`,`node-id`           | `kafka.producer.request_size_avg`                          | The average size of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-size-max`                          | `client-id`,`node-id`           | `kafka.producer.request_size_max`                          | The maximum size of any request sent.                                                                                                             | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `request-total`                             | `client-id`,`node-id`           | `kafka.producer.request_total`                             | The total number of requests sent.                                                                                                                | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-node-metrics`          | `response-rate`                             | `client-id`,`node-id`           | `kafka.producer.response_rate`                             | The number of responses received per second.                                                                                                      | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-node-metrics`          | `response-total`                            | `client-id`,`node-id`           | `kafka.producer.response_total`                            | The total number of responses received.                                                                                                           | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `byte-rate`                                 | `client-id`,`topic`             | `kafka.producer.byte_rate`                                 | The average number of bytes sent per second for a topic.                                                                                          | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `byte-total`                                | `client-id`,`topic`             | `kafka.producer.byte_total`                                | The total number of bytes sent for a topic.                                                                                                       | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `compression-rate`                          | `client-id`,`topic`             | `kafka.producer.compression_rate`                          | The average compression rate of record batches for a topic, defined as the average ratio of the compressed batch size over the uncompressed size. | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-error-rate`                         | `client-id`,`topic`             | `kafka.producer.record_error_rate`                         | The average per-second number of record sends that resulted in errors.                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-error-total`                        | `client-id`,`topic`             | `kafka.producer.record_error_total`                        | The total number of record sends that resulted in errors.                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `record-retry-rate`                         | `client-id`,`topic`             | `kafka.producer.record_retry_rate`                         | The average per-second number of retried record sends.                                                                                            | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-retry-total`                        | `client-id`,`topic`             | `kafka.producer.record_retry_total`                        | The total number of retried record sends.                                                                                                         | `DOUBLE_OBSERVABLE_COUNTER` |\n| `producer-topic-metrics`         | `record-send-rate`                          | `client-id`,`topic`             | `kafka.producer.record_send_rate`                          | The average number of records sent per second.                                                                                                    | `DOUBLE_OBSERVABLE_GAUGE`   |\n| `producer-topic-metrics`         | `record-send-total`                         | `client-id`,`topic`             | `kafka.producer.record_send_total`                         | The total number of records sent.                                                                                                                 | `DOUBLE_OBSERVABLE_COUNTER` |\n",
      "name": "kafka-clients-2.6",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-2.6",
      "target_versions": {
        "library": [
          "org.apache.kafka:kafka-clients:2.6.0"
        ]
      }
    },
    {
      "library_link": "https://kafka.apache.org/documentation/streams/",
      "name": "kafka-streams-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-streams-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-streams-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-streams:[0.11.0.0,)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-1.0",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-1.0",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.0.0,1.3.8)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-flow-1.3",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-flow-1.3"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-flow-1.3",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.3.0,1.3.8)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Ktor version 1.x\n\nThis package contains libraries to help instrument Ktor.\nCurrently, only server instrumentation is supported.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-ktor-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-ktor-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-ktor-1.0:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\nInitialize instrumentation by installing the `KtorServerTelemetry` feature.\nYou must set the `OpenTelemetry` to use with the feature.\n\n```kotlin\nOpenTelemetry openTelemetry = ...\n\nembeddedServer(Netty, 8080) {\n  install(KtorServerTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n",
      "name": "ktor-1.0",
      "scope": {
        "name": "io.opentelemetry.ktor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-1.0",
      "target_versions": {
        "library": [
          "io.ktor:ktor-server-core:[1.0.0,1.+)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Ktor version 2.x\n\nThis package contains libraries to help instrument Ktor.\nServer and client instrumentations are supported.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-ktor-2.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-ktor-2.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-ktor-2.0:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\n## Initializing server instrumentation\n\nInitialize instrumentation by installing the `KtorServerTelemetry` feature.\nYou must set the `OpenTelemetry` to use with the feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nembeddedServer(Netty, 8080) {\n  install(KtorServerTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n\n## Initializing client instrumentation\n\nInitialize instrumentation by installing the `KtorClientTelemetry` feature. You must set the\n`OpenTelemetry` to use with\nthe feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nval client = HttpClient {\n  install(KtorClientTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n",
      "name": "ktor-2.0",
      "scope": {
        "name": "io.opentelemetry.ktor-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-2.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[2.0.0,3.0.0)",
          "io.ktor:ktor-server-core:[2.0.0,3.0.0)"
        ],
        "library": [
          "io.ktor:ktor-client-core:[2.0.0,2.+)",
          "io.ktor:ktor-server-core:[2.0.0,2.+)"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Ktor version 3.0 and higher\n\nThis package contains libraries to help instrument Ktor.\nServer and client instrumentations are supported.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-ktor-3.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-ktor-3.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-ktor-3.0:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\n## Initializing server instrumentation\n\nInitialize instrumentation by installing the `KtorServerTelemetry` feature. Make sure that no other\nlogging plugin is installed before this.\nYou must set the `OpenTelemetry` to use with the feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nembeddedServer(Netty, 8080) {\n  install(KtorServerTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n\n## Initializing client instrumentation\n\nInitialize instrumentation by installing the `KtorClientTelemetry` feature. You must set the\n`OpenTelemetry` to use with\nthe feature.\n\n```kotlin\nval openTelemetry: OpenTelemetry = ...\n\nval client = HttpClient {\n  install(KtorClientTelemetry) {\n    setOpenTelemetry(openTelemetry)\n  }\n}\n```\n",
      "name": "ktor-3.0",
      "scope": {
        "name": "io.opentelemetry.ktor-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-3.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[3.0.0,)",
          "io.ktor:ktor-server-core:[3.0.0,)"
        ],
        "library": [
          "io.ktor:ktor-client-core:3.0.0",
          "io.ktor:ktor-server-core:3.0.0"
        ]
      }
    },
    {
      "name": "kubernetes-client-7.0",
      "scope": {
        "name": "io.opentelemetry.kubernetes-client-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kubernetes-client-7.0",
      "target_versions": {
        "javaagent": [
          "io.kubernetes:client-java-api:[7.0.0,)"
        ]
      }
    },
    {
      "name": "lettuce-4.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-4.0",
      "target_versions": {
        "javaagent": [
          "biz.paluch.redis:lettuce:[4.0.Final,)"
        ]
      }
    },
    {
      "name": "lettuce-5.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.0",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.0.0.RELEASE,5.1.0.RELEASE)"
        ]
      }
    },
    {
      "name": "lettuce-5.1",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.1"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.1",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.1.0.RELEASE,)"
        ],
        "library": [
          "io.lettuce:lettuce-core:5.1.0.RELEASE"
        ]
      }
    },
    {
      "name": "liberty-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-20.0"
    },
    {
      "name": "liberty-dispatcher-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-dispatcher-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-dispatcher-20.0"
    },
    {
      "name": "log4j-appender-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "markdown_content": "# Appender Instrumentation for Log4j2 version 2.17 and higher\n\nThis module provides a Log4j2 [appender](https://logging.apache.org/log4j/2.x/manual/appenders.html)\nwhich forwards Log4j2 log events to the\n[OpenTelemetry Log SDK](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk/logs).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-log4j-appender-2.17).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-log4j-appender-2.17</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-log4j-appender-2.17:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe following demonstrates how you might configure the appender in your `log4j2.xml` configuration:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n  <Appenders>\n    <Console name=\"Console\" target=\"SYSTEM_OUT\">\n      <PatternLayout\n          pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} trace_id: %X{trace_id} span_id: %X{span_id} trace_flags: %X{trace_flags} - %msg%n\"/>\n    </Console>\n    <OpenTelemetry name=\"OpenTelemetryAppender\"/>\n  </Appenders>\n  <Loggers>\n    <Root level=\"All\">\n      <AppenderRef ref=\"OpenTelemetryAppender\"/>\n      <AppenderRef ref=\"Console\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n```\n\nIn this example Log4j2 log events will be sent to both the console appender and\nthe `OpenTelemetryAppender`.\n\nIn order to function, `OpenTelemetryAppender` needs access to an `OpenTelemetry` instance. This must\nbe set programmatically during application startup as follows:\n\n```java\nimport io.opentelemetry.instrumentation.log4j.appender.v2_17.OpenTelemetryAppender;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\n\npublic class Application {\n\n  public static void main(String[] args) {\n    OpenTelemetrySdk openTelemetrySdk = // Configure OpenTelemetrySdk\n\n    // Find OpenTelemetryAppender in log4j configuration and install openTelemetrySdk\n    OpenTelemetryAppender.install(openTelemetrySdk);\n\n    // ... proceed with application\n  }\n}\n```\n\n#### Settings for the Log4j Appender\n\nSetting can be configured as XML attributes, for example:\n\n```xml\n<Appenders>\n  <OpenTelemetry name=\"OpenTelemetryAppender\"\n      captureMapMessageAttributes=\"true\"\n      captureMarkerAttribute=\"true\"\n      captureContextDataAttributes=\"*\"\n  />\n</Appenders>\n```\n\nThe available settings are:\n\n| XML Attribute                      | Type    | Default | Description                                                                                                                                                                                                |\n|------------------------------------|---------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `captureExperimentalAttributes`    | Boolean | `false` | Enable the capture of experimental log attributes `thread.name` and `thread.id`.                                                                                                                           |\n| `captureCodeAttributes`            | Boolean | `false` | Enable the capture of [source code attributes]. Note that capturing source code attributes at logging sites might add a performance overhead.                                                              |\n| `captureMapMessageAttributes`      | Boolean | `false` | Enable the capture of `MapMessage` attributes.                                                                                                                                                             |\n| `captureMarkerAttribute`           | Boolean | `false` | Enable the capture of Log4j markers as attributes.                                                                                                                                                         |\n| `captureContextDataAttributes`     | String  |         | Comma separated list of context data attributes to capture. Use the wildcard character `*` to capture all attributes.                                                                                      |\n| `numLogsCapturedBeforeOtelInstall` | Integer | 1000    | Log telemetry is emitted after the initialization of the OpenTelemetry Log4j appender with an OpenTelemetry object. This setting allows you to modify the size of the cache used to replay the first logs. |\n\n[source code attributes]: https://github.com/open-telemetry/semantic-conventions/blob/main/docs/general/attributes.md#source-code-attributes\n",
      "name": "log4j-appender-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.0,)"
        ],
        "library": [
          "org.apache.logging.log4j:log4j-core:2.17.0"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.17.0,)"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.7",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.7,2.17.0)"
        ]
      }
    },
    {
      "name": "log4j-mdc-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-mdc-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-mdc-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "markdown_content": "# Appender Instrumentation for Logback version 1.0 and higher\n\nThis module provides a Logback [appender](https://logback.qos.ch/manual/appenders.html) which\nforwards Logback log events to the\n[OpenTelemetry Log SDK](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk/logs).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-logback-appender-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-logback-appender-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe following demonstrates how you might configure the appender in your `logback.xml` configuration:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\n  <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>\n        %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n      </pattern>\n    </encoder>\n  </appender>\n  <appender name=\"OpenTelemetry\"\n            class=\"io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender\">\n  </appender>\n\n  <root level=\"INFO\">\n    <appender-ref ref=\"console\"/>\n    <appender-ref ref=\"OpenTelemetry\"/>\n  </root>\n\n</configuration>\n```\n\nIn this example Logback log events will be sent to both the console appender and\nthe `OpenTelemetryAppender`.\n\nIn order to function, `OpenTelemetryAppender` needs access to an `OpenTelemetry` instance. This must\nbe set programmatically during application startup as follows:\n\n```java\nimport io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender;\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\n\npublic class Application {\n\n  public static void main(String[] args) {\n    OpenTelemetrySdk openTelemetrySdk = // Configure OpenTelemetrySdk\n\n    // Find OpenTelemetryAppender in logback configuration and install openTelemetrySdk\n    OpenTelemetryAppender.install(openTelemetrySdk);\n\n    // ... proceed with application\n  }\n}\n```\n\n#### Settings for the Logback Appender\n\nSettings can be configured in `logback.xml`, for example:\n\n```xml\n<appender name=\"OpenTelemetry\" class=\"io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender\">\n  <captureExperimentalAttributes>true</captureExperimentalAttributes>\n  <captureMdcAttributes>*</captureMdcAttributes>\n</appender>\n```\n\nThe available settings are:\n\n| XML Element                        | Type    | Default | Description                                                                                                                                                                                                                                       |\n|------------------------------------|---------|---------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `captureExperimentalAttributes`    | Boolean | `false` | Enable the capture of experimental log attributes `thread.name` and `thread.id`.                                                                                                                                                                  |\n| `captureCodeAttributes`            | Boolean | `false` | Enable the capture of [source code attributes]. Note that capturing source code attributes at logging sites might add a performance overhead.                                                                                                     |\n| `captureMarkerAttribute`           | Boolean | `false` | Enable the capture of Logback markers as attributes.                                                                                                                                                                                              |\n| `captureKeyValuePairAttributes`    | Boolean | `false` | Enable the capture of Logback key value pairs as attributes.                                                                                                                                                                                      |\n| `captureLoggerContext`             | Boolean | `false` | Enable the capture of Logback logger context properties as attributes.                                                                                                                                                                            |\n| `captureArguments`                 | Boolean | `false` | Enable the capture of Logback logger arguments.                                                                                                                                                                                                   |\n| `captureLogstashAttributes`        | Boolean | `false` | Enable the capture of Logstash attributes, supported are those added to logs via `Markers.append()`, `Markers.appendEntries()`, `Markers.appendArray()` and `Markers.appendRaw()` methods.                                                        |\n| `captureMdcAttributes`             | String  |         | Comma separated list of MDC attributes to capture. Use the wildcard character `*` to capture all attributes.                                                                                                                                      |\n| `numLogsCapturedBeforeOtelInstall` | Integer | 1000    | Log telemetry is emitted after the initialization of the OpenTelemetry Logback appender with an OpenTelemetry object. This setting allows you to modify the size of the cache used to replay the first logs. thread.id attribute is not captured. |\n\n\n[source code attributes]: https://github.com/open-telemetry/semantic-conventions/blob/main/docs/general/attributes.md#source-code-attributes\n",
      "name": "logback-appender-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-appender-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-appender-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[0.9.16,)"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.3.0",
          "net.logstash.logback:logstash-logback-encoder:3.0",
          "org.slf4j:slf4j-api:2.0.0"
        ]
      }
    },
    {
      "markdown_content": "# MDC Instrumentation for Logback version 1.0 and higher\n\nThis module integrates instrumentation with Logback by injecting the trace ID and span ID from a\nmounted span using a custom Logback appender.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-logback-mdc-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-logback-mdc-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```kotlin\ndependencies {\n  runtimeOnly(\"io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0:OPENTELEMETRY_VERSION\")\n}\n```\n\n### Usage\n\nThe following demonstrates how you might configure the appender in your `logback.xml` configuration:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>%d{HH:mm:ss.SSS} trace_id=%X{trace_id} span_id=%X{span_id} trace_flags=%X{trace_flags} %msg%n</pattern>\n    </encoder>\n  </appender>\n\n  <!-- Just wrap your logging appender, for example ConsoleAppender, with OpenTelemetryAppender -->\n  <appender name=\"OTEL\" class=\"io.opentelemetry.instrumentation.logback.mdc.v1_0.OpenTelemetryAppender\">\n    <appender-ref ref=\"CONSOLE\"/>\n  </appender>\n\n  <!-- Use the wrapped \"OTEL\" appender instead of the original \"CONSOLE\" one -->\n  <root level=\"INFO\">\n    <appender-ref ref=\"OTEL\"/>\n  </root>\n\n</configuration>\n```\n\n> It's important to note you can also use other encoders in the `ConsoleAppender` like [logstash-logback-encoder](https://github.com/logfellow/logstash-logback-encoder).\n> This can be helpful when the `Span` is invalid and the `trace_id`, `span_id`, and `trace_flags` are all `null` and are hidden entirely from the logs.\n\nLogging events will automatically have context information from the span context injected. The\nfollowing attributes are available for use:\n\n- `trace_id`\n- `span_id`\n- `trace_flags`\n\nThese keys can be customized in your `logback.xml` configuration, for example:\n\n```xml\n<appender name=\"OTEL\" class=\"io.opentelemetry.instrumentation.logback.mdc.v1_0.OpenTelemetryAppender\">\n  <traceIdKey>example_trace_id</traceIdKey>\n  <spanIdKey>example_span_id</spanIdKey>\n  <traceFlagsKey>example_trace_flags</traceFlagsKey>\n</appender>\n```\n\nIf you set `<addBaggage>true</addBaggage>` in your `logback.xml` configuration,\nkey/value pairs in [baggage](https://opentelemetry.io/docs/concepts/signals/baggage/) will also be added to the MDC.\n\n- `baggage.<entry_name>`\n",
      "name": "logback-mdc-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-mdc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-mdc-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[1.0.0,1.2.3]"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.0.0",
          "org.slf4j:slf4j-api:1.6.4"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "markdown_content": "# Micrometer Instrumentation for Micrometer version 1.5 and higher\n\nThis module provides a [Micrometer registry](https://docs.micrometer.io/micrometer/reference/concepts/registry.html) which\nsends Micrometer metrics to the\n[OpenTelemetry Metrics SDK](https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk/metrics).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-micrometer-1.5).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-micrometer-1.5</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-micrometer-1.5:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides an implementation of `MeterRegistry` to bridge Micrometer API to OpenTelemetry Metrics.\n\n```java\nMeterRegistry meterRegistry = OpenTelemetryMeterRegistry.builder(openTelemetry).build();\n```\n",
      "name": "micrometer-1.5",
      "scope": {
        "name": "io.opentelemetry.micrometer-1.5"
      },
      "semconv": [],
      "source_path": "instrumentation/micrometer/micrometer-1.5",
      "target_versions": {
        "javaagent": [
          "io.micrometer:micrometer-core:[1.5.0,)"
        ],
        "library": [
          "io.micrometer:micrometer-core:1.5.0"
        ]
      }
    },
    {
      "markdown_content": "# MongoDB library instrumentation\n\nThis package contains the library to help instrument MongoDB Client.\n\n## Quickstart\n\n### Dependencies\n\nReplace OPENTELEMETRY_VERSION with the [latest release](https://central.sonatype.com/search?q=g%3Aio.opentelemetry.instrumentation+a%3Aopentelemetry-mongo-3.1).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-mongo-3.1</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```gradle\nimplementation(\"io.opentelemetry.instrumentation:instrumentation:opentelemetry-mongo-3.1:OPENTELEMETRY_VERSION\")\n```\n\n## Usage\n\nThe instrumentation is initialized by passing a `MongoTelemetry::newCommandListener()` to the `MongoClientSettings` builder. You must set the `OpenTelemetry` to use with the feature.\n\n```java\nOpenTelemetry openTelemetry = ...;\n\nMongoTelemetry mongoTelemetry = MongoTelemetry.builder(openTelemetry).build();\n\nMongoClientSettings settings = MongoClientSettings.builder()\n    .applyConnectionString(ConnectionString(\"mongodb://localhost:27017\"))\n    .addCommandListener(mongoTelemetry.newCommandListener())\n    .build();\n\n// With Reactive Streams\nMongoClient client = MongoClients.create(settings);\n```\n",
      "name": "mongo-3.1",
      "scope": {
        "name": "io.opentelemetry.mongo-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.1",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.1,)"
        ],
        "library": [
          "org.mongodb:mongo-java-driver:3.1.0"
        ]
      }
    },
    {
      "name": "mongo-3.7",
      "scope": {
        "name": "io.opentelemetry.mongo-3.7"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.7",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.7, 4.0)",
          "org.mongodb:mongodb-driver-core:[3.7, 4.0)"
        ]
      }
    },
    {
      "name": "mongo-4.0",
      "scope": {
        "name": "io.opentelemetry.mongo-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-4.0",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-core:[4.0,)"
        ]
      }
    },
    {
      "name": "mongo-async-3.3",
      "scope": {
        "name": "io.opentelemetry.mongo-async-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-async-3.3",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-async:[3.3,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "mybatis-3.2",
      "scope": {
        "name": "io.opentelemetry.mybatis-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/mybatis-3.2",
      "target_versions": {
        "javaagent": [
          "org.mybatis:mybatis:[3.2.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        }
      ],
      "description": "This instrumentation provides messaging spans for NATS",
      "name": "nats-2.17",
      "scope": {
        "name": "io.opentelemetry.nats-2.17"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/nats/nats-2.17",
      "target_versions": {
        "javaagent": [
          "io.nats:jnats:[2.17.2,)"
        ],
        "library": [
          "io.nats:jnats:2.17.2"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.temporary",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "messaging.header.captured_header",
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.temporary",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "messaging.header.captured_header",
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "netty-3.8",
      "scope": {
        "name": "io.opentelemetry.netty-3.8"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-3.8",
      "target_versions": {
        "javaagent": [
          "io.netty:netty:[3.8.0.Final,4)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.0",
      "scope": {
        "name": "io.opentelemetry.netty-4.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.0",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.0.0.Final,4.1.0.Final)",
          "io.netty:netty-codec-http:[4.0.0.Final,4.1.0.Final)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.1",
      "scope": {
        "name": "io.opentelemetry.netty-4.1"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.1",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.1.0.Final,5.0.0)",
          "io.netty:netty-codec-http:[4.1.0.Final,5.0.0)"
        ],
        "library": [
          "io.netty:netty-codec-http:4.1.0.Final"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "okhttp-2.2",
      "scope": {
        "name": "io.opentelemetry.okhttp-2.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-2.2",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp:okhttp:[2.2,3)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "markdown_content": "# Library Instrumentation for OkHttp version 3.0 and higher\n\nProvides OpenTelemetry instrumentation for [okhttp3](https://square.github.io/okhttp/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-okhttp-3.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-okhttp-3.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-okhttp-3.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides an OkHttp `Call.Factory` implementation that wraps\nan instance of the `OkHttpClient` to provide OpenTelemetry-based spans and context\npropagation.\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.okhttp.v3_0.OkHttpTelemetry;\nimport okhttp3.Call;\nimport okhttp3.OkHttpClient;\n\npublic class OkHttpConfiguration {\n\n  //Use this Call.Factory implementation for making standard http client calls.\n  public Call.Factory createTracedClient(OpenTelemetry openTelemetry) {\n    return OkHttpTelemetry.builder(openTelemetry).build().newCallFactory(createClient());\n  }\n\n  //your configuration of the OkHttpClient goes here:\n  private OkHttpClient createClient() {\n    return new OkHttpClient.Builder().build();\n  }\n}\n```\n",
      "name": "okhttp-3.0",
      "scope": {
        "name": "io.opentelemetry.okhttp-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-3.0",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp3:okhttp:[3.0,)"
        ],
        "library": [
          "com.squareup.okhttp3:okhttp:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables including the full content of user and assistant messages in emitted log events. Note that full content can have data privacy and size concerns, and care should be taken when enabling this.\n",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables Gen AI client spans and metrics for OpenAI Java SDK 1.1+.",
      "library_link": "https://github.com/openai/openai-java",
      "markdown_content": "# Library Instrumentation for OpenAI Java SDK version 1.1.0 and higher\n\nProvides OpenTelemetry instrumentation for [openai-java](https://github.com/openai/openai-java/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-openai-java-1.1).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-openai-java-1.1</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-openai-java-1.1:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a wrapper for `OpenAIClient` that provide OpenTelemetry-based\nspans, metrics and logs.\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.openai.v1_1.OpenAITelemetry;\nimport com.openai.client.OpenAIClient;\n\npublic class OpenAIClientConfiguration {\n\n  //Use this client to capture telemetry.\n  public OpenAIClient createOtelClient(OpenTelemetry openTelemetry) {\n    return OpenAITelemetry.builder(openTelemetry).build().wrap(createClient());\n  }\n\n  //your configuration of the OpenAIClient goes here:\n  private OpenAIClient createClient() {\n    return ...;\n  }\n}\n```\n",
      "name": "openai-java-1.1",
      "scope": {
        "name": "io.opentelemetry.openai-java-1.1"
      },
      "semconv": [
        "Gen Ai"
      ],
      "source_path": "instrumentation/openai/openai-java-1.1",
      "target_versions": {
        "javaagent": [
          "com.openai:openai-java:[1.1.0,3)"
        ],
        "library": [
          "com.openai:openai-java:1.1.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "GenAI operation duration.",
              "name": "gen_ai.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.token.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Measures number of input and output tokens used.",
              "name": "gen_ai.client.token.usage",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "token"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.encoding_formats",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.frequency_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.max_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.presence_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.seed",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.stop_sequences",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.temperature",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.top_p",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.response.finish_reasons",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.response.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.usage.output_tokens",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-1.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-1.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[1.0,3.0)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-3.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-3.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[3.0,)"
        ]
      }
    },
    {
      "description": "The Oracle Universal Connection Pool (UCP) instrumentation generates connection pool metrics.",
      "library_link": "https://docs.oracle.com/database/121/JJUCP/",
      "markdown_content": "# Library Instrumentation for Oracle UCP version 11.2 and higher\n\nProvides OpenTelemetry instrumentation for [Oracle UCP](https://docs.oracle.com/database/121/JJUCP/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-oracle-ucp-11.2).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-oracle-ucp-11.2</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-oracle-ucp-11.2:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `UniversalConnectionPool` instances for collecting\nOpenTelemetry-based metrics.\n\n```java\nOracleUcpTelemetry oracleUcpTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, UniversalConnectionPool universalConnectionPool) {\n  oracleUcpTelemetry = OracleUcpTelemetry.create(openTelemetry);\n  oracleUcpTelemetry.registerMetrics(universalConnectionPool);\n}\n\nvoid destroy(UniversalConnectionPool universalConnectionPool) {\n  oracleUcpTelemetry.unregisterMetrics(universalConnectionPool);\n}\n```\n",
      "name": "oracle-ucp-11.2",
      "scope": {
        "name": "io.opentelemetry.oracle-ucp-11.2"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/oracle-ucp-11.2",
      "target_versions": {
        "javaagent": [
          "com.oracle.database.jdbc:ucp:[,)"
        ],
        "library": [
          "com.oracle.database.jdbc:ojdbc8:12.2.0.1",
          "com.oracle.database.jdbc:ucp:11.2.0.4"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the OSHI process runtime metrics.",
          "name": "otel.instrumentation.oshi.experimental-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "When the OSHI library is detected on the classpath, this instrumentation will use the system class loader to load classes from the oshi-core jar that are then used to generate system metrics.",
      "library_link": "https://github.com/oshi/oshi/",
      "name": "oshi",
      "scope": {
        "name": "io.opentelemetry.oshi"
      },
      "semconv": [
        "System"
      ],
      "source_path": "instrumentation/oshi",
      "target_versions": {
        "javaagent": [
          "com.github.oshi:oshi-core:[5.3.1,)"
        ],
        "library": [
          "com.github.oshi:oshi-core:5.3.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java CPU time",
              "name": "runtime.java.cpu_time",
              "type": "LONG_GAUGE",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java memory",
              "name": "runtime.java.memory",
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "otel.instrumentation.oshi.experimental-metrics.enabled=true"
        }
      ]
    },
    {
      "name": "payara",
      "scope": {
        "name": "io.opentelemetry.payara"
      },
      "semconv": [],
      "source_path": "instrumentation/payara"
    },
    {
      "name": "pekko-actor-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-actor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/pekko/pekko-actor-1.0",
      "target_versions": {
        "javaagent": [
          "org.apache.pekko:pekko-actor_2.12:[1.0,)",
          "org.apache.pekko:pekko-actor_2.13:[1.0,)",
          "org.apache.pekko:pekko-actor_3:[1.0,)"
        ]
      }
    },
    {
      "name": "pekko-http-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-http-1.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/pekko/pekko-http-1.0",
      "target_versions": {
        "javaagent": [
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.12:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.13:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_3:[1.7,)",
          "org.apache.pekko:pekko-http_2.12:[1.0,)",
          "org.apache.pekko:pekko-http_2.13:[1.0,)",
          "org.apache.pekko:pekko-http_3:[1.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-mvc-2.4",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.4",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_2.11:[2.4.0,2.6)"
        ]
      }
    },
    {
      "name": "play-mvc-2.6",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.6",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_$scalaVersion:[2.6.0,)",
          "com.typesafe.play:play_2.12:[2.6.0,)",
          "com.typesafe.play:play_2.13:[2.6.0,)"
        ]
      }
    },
    {
      "name": "play-ws-1.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-1.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[1.0.0,2.0.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[1.0.0,2.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[2.0.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.0.0,2.1.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.0.6,2.1.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.1",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.1",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.1.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.1.0,]"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "powerjob-4.0",
      "scope": {
        "name": "io.opentelemetry.powerjob-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/powerjob-4.0",
      "target_versions": {
        "javaagent": [
          "tech.powerjob:powerjob-worker:[4.0.0,)"
        ]
      }
    },
    {
      "name": "pulsar-2.8",
      "scope": {
        "name": "io.opentelemetry.pulsar-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/pulsar/pulsar-2.8",
      "target_versions": {
        "javaagent": [
          "org.apache.pulsar:pulsar-client:[2.8.0,)"
        ]
      }
    },
    {
      "name": "quarkus-resteasy-reactive",
      "scope": {
        "name": "io.opentelemetry.quarkus-resteasy-reactive"
      },
      "semconv": [],
      "source_path": "instrumentation/quarkus-resteasy-reactive",
      "target_versions": {
        "javaagent": [
          "io.quarkus:quarkus-resteasy-reactive:(,3.9.0)"
        ]
      }
    },
    {
      "name": "quartz-2.0",
      "scope": {
        "name": "io.opentelemetry.quartz-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/quartz-2.0",
      "target_versions": {
        "javaagent": [
          "org.quartz-scheduler:quartz:[2.0.0,)"
        ],
        "library": [
          "org.quartz-scheduler:quartz:2.0.0"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for R2dbc version 1.0 and higher\n\nProvides OpenTelemetry instrumentation for [R2dbc](https://r2dbc.io/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-r2dbc-1.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-r2dbc-1.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-r2dbc-1.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides a R2dbc `ProxyConnectionFactory` that gets wrapped around the original\n`ConnectionFactory`.\n\n```java\nConnectionFactory wrapWithProxyFactory(OpenTelemetry openTelemetry, ConnectionFactory originalFactory, ConnectionFactoryOptions factoryOptions) {\n  return R2dbcTelemetryBuilder\n    .create(openTelemetry)\n    .wrapConnectionFactory(originalFactory, factoryOptions);\n}\n```\n\nIf you use R2dbc in a Spring Boot application you can wrap the `ConnectionFactory` using a custom `BeanPostProcessor` implementation:\n\n```java\n@Configuration\nclass R2dbcConfiguration {\n\n  @Bean\n  public R2dbcInstrumentingPostProcessor r2dbcInstrumentingPostProcessor(\n      OpenTelemetry openTelemetry) {\n    return new R2dbcInstrumentingPostProcessor(openTelemetry);\n  }\n}\n\nclass R2dbcInstrumentingPostProcessor implements BeanPostProcessor {\n\n  private final OpenTelemetry openTelemetry;\n\n  R2dbcInstrumentingPostProcessor(OpenTelemetry openTelemetry) {\n    this.openTelemetry = openTelemetry;\n  }\n\n  @Override\n  public Object postProcessAfterInitialization(Object bean, String beanName) {\n    if (!(bean instanceof ConnectionFactory)) {\n      return bean;\n    }\n    ConnectionFactory connectionFactory = (ConnectionFactory) bean;\n    return R2dbcTelemetry.create(openTelemetry)\n        .wrapConnectionFactory(connectionFactory, getConnectionFactoryOptions(connectionFactory));\n  }\n\n  private static ConnectionFactoryOptions getConnectionFactoryOptions(ConnectionFactory connectionFactory) {\n    OptionsCapableConnectionFactory optionsCapableConnectionFactory =\n        OptionsCapableConnectionFactory.unwrapFrom(connectionFactory);\n    if (optionsCapableConnectionFactory != null) {\n      return optionsCapableConnectionFactory.getOptions();\n    } else {\n      // in practice should never happen\n      // fall back to empty options; or reconstruct them from the R2dbcProperties\n      return ConnectionFactoryOptions.builder().build();\n    }\n  }\n}\n```\n",
      "name": "r2dbc-1.0",
      "scope": {
        "name": "io.opentelemetry.r2dbc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/r2dbc-1.0",
      "target_versions": {
        "javaagent": [
          "io.r2dbc:r2dbc-spi:[1.0.0.RELEASE,)"
        ],
        "library": [
          "io.r2dbc:r2dbc-spi:1.0.0.RELEASE"
        ]
      }
    },
    {
      "name": "rabbitmq-2.7",
      "scope": {
        "name": "io.opentelemetry.rabbitmq-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/rabbitmq-2.7",
      "target_versions": {
        "javaagent": [
          "com.rabbitmq:amqp-client:[2.7.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.4",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.4",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.4.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.7",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.7"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.7",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.7.0,)"
        ],
        "library": [
          "io.ratpack:ratpack-core:1.7.0"
        ]
      }
    },
    {
      "name": "reactor-3.1",
      "scope": {
        "name": "io.opentelemetry.reactor-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.1",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.1.0.RELEASE,)"
        ]
      }
    },
    {
      "name": "reactor-3.4",
      "scope": {
        "name": "io.opentelemetry.reactor-3.4"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.4",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.4.0,)"
        ]
      }
    },
    {
      "name": "reactor-kafka-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-kafka-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-kafka-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.kafka:reactor-kafka:[1.0.0,)"
        ]
      }
    },
    {
      "name": "reactor-netty-0.9",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-0.9"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-0.9",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty:[0.8.2.RELEASE,1.0.0)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans.",
          "name": "otel.instrumentation.reactor-netty.connection-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "reactor-netty-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty-http:[1.0.0,)",
          "io.projectreactor.netty:reactor-netty:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "rediscala-1.8",
      "scope": {
        "name": "io.opentelemetry.rediscala-1.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rediscala-1.8",
      "target_versions": {
        "javaagent": [
          "com.github.Ma27:rediscala_2.11:[1.8.1,)",
          "com.github.Ma27:rediscala_2.12:[1.8.1,)",
          "com.github.Ma27:rediscala_2.13:[1.9.0,)",
          "com.github.etaty:rediscala_2.11:[1.5.0,)",
          "com.github.etaty:rediscala_2.12:[1.8.0,)",
          "com.github.etaty:rediscala_2.13:[1.9.0,)",
          "io.github.rediscala:rediscala_2.13:[1.10.0,)"
        ]
      }
    },
    {
      "name": "redisson-3.0",
      "scope": {
        "name": "io.opentelemetry.redisson-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.0",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.0.0,3.17.0)"
        ]
      }
    },
    {
      "name": "redisson-3.17",
      "scope": {
        "name": "io.opentelemetry.redisson-3.17"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.17",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.17.0,)"
        ]
      }
    },
    {
      "markdown_content": "# OpenTelemetry Resource Providers\n\nThis package includes some standard `ResourceProvider`s for filling in attributes related to\ncommon environments. Currently, the resources provide the following semantic conventions:\n\n## Populated attributes\n\n### Container\n\nProvider: `io.opentelemetry.instrumentation.resources.ContainerResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/container.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `container.id`\n\n### Host\n\nProvider: `io.opentelemetry.instrumentation.resources.HostResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/host.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `host.name`\n- `host.arch`\n\nProvider: `io.opentelemetry.instrumentation.resources.HostIdResourceProvider`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/host.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `host.id`\n\n### Operating System\n\nProvider: `io.opentelemetry.instrumentation.resources.OsResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/os.md>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `os.type`\n- `os.description`\n\n### Process\n\nImplementation: `io.opentelemetry.instrumentation.resources.ProcessResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/process.md#process>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `process.pid`\n- `process.executable.path` (note, we assume the `java` binary is located in the `bin` subfolder of `JAVA_HOME`)\n- `process.command_line` (note this includes all system properties and arguments when running)\n\n### Java Runtime\n\nImplementation: `io.opentelemetry.instrumentation.resources.ProcessRuntimeResource`\n\nSpecification: <https://github.com/open-telemetry/semantic-conventions/blob/main/docs/resource/process.md#process-runtimes>\n\nIncluded in [declarative config].\n\nImplemented attributes:\n\n- `process.runtime.name`\n- `process.runtime.version`\n- `process.runtime.description`\n\n## Platforms\n\nThis package currently does not run on Android. It has been verified on OpenJDK and should work on\nother server JVM distributions but if you find any issues please let us know.\n\n[declarative config]: https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/configuration#declarative-configuration\n",
      "name": "resources",
      "scope": {
        "name": "io.opentelemetry.resources"
      },
      "semconv": [],
      "source_path": "instrumentation/resources"
    },
    {
      "name": "restlet-1.1",
      "scope": {
        "name": "io.opentelemetry.restlet-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-1.1",
      "target_versions": {
        "javaagent": [
          "org.restlet:org.restlet:[1.1.0, 1.2-M1)"
        ],
        "library": [
          "com.noelios.restlet:com.noelios.restlet:1.1.5",
          "org.restlet:org.restlet:[1.1.5,1.+)"
        ]
      }
    },
    {
      "name": "restlet-2.0",
      "scope": {
        "name": "io.opentelemetry.restlet-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-2.0",
      "target_versions": {
        "javaagent": [
          "org.restlet.jse:org.restlet:[2.0.0,)"
        ],
        "library": [
          "org.restlet.jse:org.restlet:2.0.2"
        ]
      }
    },
    {
      "name": "rmi",
      "scope": {
        "name": "io.opentelemetry.rmi"
      },
      "semconv": [],
      "source_path": "instrumentation/rmi",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "markdown_content": "# Library Instrumentation for Apache RocketMQ remoting-based client 4.0.0+\n\nProvides OpenTelemetry instrumentation for [Apache RocketMQ](https://rocketmq.apache.org/) remoting-based client.\n\n## Quickstart\n\n### Add the following dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest release]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-rocketmq-client-4.8).\n\nFor Maven, add the following to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-rocketmq-client-4.8</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add the following to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-rocketmq-client-4.8:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library provides the implementation of `SendMessageHook` and `ConsumeMessageHook` to provide OpenTelemetry-based spans and context propagation.\n\n```java\nRocketMqTelemetry rocketMqTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, DefaultMQProducerImpl producer, DefaultMQPushConsumerImpl pushConsumer) {\n  rocketMqTelemetry = RocketMqTelemetry.create(openTelemetry);\n  // For producer.\n  producer.registerSendMessageHook(rocketMqTelemetry.newTracingSendMessageHook());\n  // For push consumer.\n  pushConsumer.registerConsumeMessageHook(rocketMqTelemetry.newTracingConsumeMessageHook());\n}\n```\n",
      "name": "rocketmq-client-4.8",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-4.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-4.8",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client:[4.0.0,)"
        ],
        "library": [
          "org.apache.rocketmq:rocketmq-client:4.8.0"
        ]
      }
    },
    {
      "name": "rocketmq-client-5.0",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client-java:[5.0.0,)"
        ]
      }
    },
    {
      "markdown_content": "The main entry point is the `RuntimeMetrics` class in the package `io.opentelemetry.instrumentation.runtimemetrics.java17`:\n\n```java\n// Initialize JfrTelemetry\nRuntimeMetrics runtimeMetrics = RuntimeMetrics.create(openTelemetry);\n\n// Close JfrTelemetry to stop listening for JFR events\nruntimeMetrics.close();\n```\n\n`RuntimeMetrics` uses two underlying implementations to gather the full set of metric data, JFR and JMX.\nThe metrics gathered by the two implementations are mutually exclusive and the union of them produces\nthe full set of available metrics.\nThe JMX component is reused from the `io.opentelemetry.instrumentation.runtimemetrics.java8` package.\nThe JFR component uses JFR streaming and is only available in JAVA 17.\nIt works by subscribing to certain JFR events, and using relevant bits of information\nfrom the events to produce telemetry data like metrics. The code is divided into \"handlers\", which\nlisten for specific events and produce relevant telemetry. The handlers are organized into\nfeatures (i.e `JfrFeature`), which represent a category of telemetry and can be toggled on and\noff. `RuntimeMetrics` evaluates which features are enabled, and only listens for the events required\nby the handlers associated with those features.\n\nEnable or disable a feature as follows:\n\n```\nRuntimeMetrics runtimeMetrics = RuntimeMetrics.builder(openTelemetry)\n  .enableFeature(JfrFeature.BUFFER_METRICS)\n  .disableFeature(JfrFeature.LOCK_METRICS)\n  .build();\n```\n\nThe following table describes the set of `JfrFeatures` available, whether each is enabled by\ndefault, and the telemetry each produces:\n\n<!-- DO NOT MANUALLY EDIT. Regenerate table following changes to instrumentation using ./gradlew generateDocs -->\n<!-- generateDocsStart -->\n\n| JfrFeature                | Default Enabled | Metrics                                                                                                           |\n|---------------------------|-----------------|-------------------------------------------------------------------------------------------------------------------|\n| BUFFER_METRICS            | `false`         | `jvm.buffer.count`, `jvm.buffer.memory.limit`, `jvm.buffer.memory.used`                                           |\n| CLASS_LOAD_METRICS        | `false`         | `jvm.class.count`, `jvm.class.loaded`, `jvm.class.unloaded`                                                       |\n| CONTEXT_SWITCH_METRICS    | `true`          | `jvm.cpu.context_switch`                                                                                          |\n| CPU_COUNT_METRICS         | `true`          | `jvm.cpu.limit`                                                                                                   |\n| CPU_UTILIZATION_METRICS   | `false`         | `jvm.cpu.recent_utilization`, `jvm.system.cpu.utilization`                                                        |\n| GC_DURATION_METRICS       | `false`         | `jvm.gc.duration`                                                                                                 |\n| LOCK_METRICS              | `true`          | `jvm.cpu.longlock`                                                                                                |\n| MEMORY_ALLOCATION_METRICS | `true`          | `jvm.memory.allocation`                                                                                           |\n| MEMORY_POOL_METRICS       | `false`         | `jvm.memory.committed`, `jvm.memory.init`, `jvm.memory.limit`, `jvm.memory.used`, `jvm.memory.used_after_last_gc` |\n| NETWORK_IO_METRICS        | `true`          | `jvm.network.io`, `jvm.network.time`                                                                              |\n| THREAD_METRICS            | `false`         | `jvm.thread.count`                                                                                                |\n",
      "minimum_java_version": 17,
      "name": "runtime-telemetry-java17",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java17"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java17"
    },
    {
      "markdown_content": "# JVM Runtime Metrics\n\nThis module provides JVM runtime metrics as documented in the [semantic conventions](https://github.com/open-telemetry/semantic-conventions/blob/main/docs/runtime/jvm-metrics.md).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-runtime-telemetry-java8).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-runtime-telemetry-java8</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nruntimeOnly(\"io.opentelemetry.instrumentation:opentelemetry-runtime-telemetry-java8:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nRegister observers for the desired runtime metrics:\n\n```java\nOpenTelemetry openTelemetry = // OpenTelemetry instance configured elsewhere\n\nClasses.registerObservers(openTelemetry);\nCpu.registerObservers(openTelemetry);\nMemoryPools.registerObservers(openTelemetry);\nThreads.registerObservers(openTelemetry);\nGarbageCollector.registerObservers(openTelemetry);\n```\n\n## Garbage Collector Dependent Metrics\n\nThe attributes reported on the memory metrics (`jvm.memory.*`) and gc metrics (`jvm.gc.*`) are dependent on the garbage collector used by the application, since each garbage collector organizes memory pools differently and has different strategies for reclaiming memory during garbage collection.\n\nThe following lists attributes reported for a variety of garbage collectors. Notice that attributes are not necessarily constant across `*.used`, `*.committed`, and `*.limit` since not all memory pools report a limit.\n\n- CMS Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Code Cache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Code Cache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Code Cache,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=Par Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Par Survivor Space,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of minor GC,jvm.gc.name=ParNew}, {jvm.gc.action=end of major GC,jvm.gc.name=MarkSweepCompact}\n- G1 Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=G1 Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=G1 Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=G1 Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=G1 Old Gen,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of minor GC,jvm.gc.name=G1 Young Generation}, {jvm.gc.action=end of major GC,jvm.gc.name=G1 Old Generation}\n- Parallel Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=PS Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Old Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=PS Eden Space,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of major GC,jvm.gc.name=PS MarkSweep}, {jvm.gc.action=end of minor GC,jvm.gc.name=PS Scavenge}\n- Serial Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=Tenured Gen,jvm.memory.type=heap}, {jvm.memory.pool.name=Eden Space,jvm.memory.type=heap}, {jvm.memory.pool.name=Survivor Space,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of minor GC,jvm.gc.name=Copy}, {jvm.gc.action=end of major GC,jvm.gc.name=MarkSweepCompact}\n- Shenandoah Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=Shenandoah,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of GC cycle,jvm.gc.name=Shenandoah Cycles}, {jvm.gc.action=end of GC pause,jvm.gc.name=Shenandoah Pauses}\n- Z Garbage Collector\n  - `jvm.memory.used`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.committed`: {jvm.memory.pool.name=Metaspace,jvm.memory.type=non_heap}, {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.limit`: {jvm.memory.pool.name=CodeCache,jvm.memory.type=non_heap}, {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}, {jvm.memory.pool.name=Compressed Class Space,jvm.memory.type=non_heap}\n  - `jvm.memory.used_after_last_gc`: {jvm.memory.pool.name=ZHeap,jvm.memory.type=heap}\n  - `jvm.gc.duration`: {jvm.gc.action=end of GC cycle,jvm.gc.name=ZGC Cycles}, {jvm.gc.action=end of GC pause,jvm.gc.name=ZGC Pauses}\n",
      "name": "runtime-telemetry-java8",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java8"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java8"
    },
    {
      "name": "rxjava-2.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-2.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava2:rxjava:[2.0.6,)"
        ],
        "library": [
          "io.reactivex.rxjava2:rxjava:2.1.3"
        ]
      }
    },
    {
      "name": "rxjava-3.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.0.0,3.1.0]"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:[3.0.12,3.1.0)"
        ]
      }
    },
    {
      "name": "rxjava-3.1.1",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.1.1",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.1.1,)"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:3.1.1"
        ]
      }
    },
    {
      "name": "scala-fork-join-2.8",
      "scope": {
        "name": "io.opentelemetry.scala-fork-join-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/scala-fork-join-2.8",
      "target_versions": {
        "javaagent": [
          "org.scala-lang:scala-library:[2.8.0,2.12.0)"
        ]
      }
    },
    {
      "name": "servlet-2.2",
      "scope": {
        "name": "io.opentelemetry.servlet-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-2.2",
      "target_versions": {
        "javaagent": [
          "javax.servlet:servlet-api:[2.2, 3.0)"
        ]
      }
    },
    {
      "name": "servlet-3.0",
      "scope": {
        "name": "io.opentelemetry.servlet-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-3.0",
      "target_versions": {
        "javaagent": [
          "javax.servlet:javax.servlet-api:[3.0,)"
        ]
      }
    },
    {
      "name": "servlet-5.0",
      "scope": {
        "name": "io.opentelemetry.servlet-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-5.0",
      "target_versions": {
        "javaagent": [
          "jakarta.servlet:jakarta.servlet-api:[5.0.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it extracts the HTTP route and attaches it to HTTP server spans and HTTP server metrics.\n",
      "library_link": "https://sparkjava.com/",
      "name": "spark-2.3",
      "scope": {
        "name": "io.opentelemetry.spark-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/spark-2.3",
      "target_versions": {
        "javaagent": [
          "com.sparkjava:spark-core:[2.3,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental attribute `job.system` to spans.",
          "name": "otel.instrumentation.spring-batch.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, a new root span will be created for each chunk processing. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.experimental.chunk.new-trace",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, spans will be created for each item processed. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.item.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables INTERNAL spans for jobs run by the Spring Batch framework.",
      "disabled_by_default": true,
      "library_link": "https://spring.io/projects/spring-batch",
      "name": "spring-batch-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-batch-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-batch-3.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.batch:spring-batch-core:[3.0.0.RELEASE,5)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-batch.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation configures the OpenTelemetry Micrometer bridge to receive metrics from Spring Boot Actuator. It does not produce telemetry on its own.\n",
      "disabled_by_default": true,
      "library_link": "https://spring.io/projects/spring-boot",
      "name": "spring-boot-actuator-autoconfigure-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-boot-actuator-autoconfigure-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-actuator-autoconfigure-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.boot:spring-boot-actuator-autoconfigure:[2.0.0.RELEASE,)"
        ]
      }
    },
    {
      "description": "This instrumentation automatically detects the `service.name` and `service.version` for Spring Boot applications and sets them as resource attributes.\nIt uses the following strategies (first successful wins):\n  - Check for the SPRING_APPLICATION_NAME environment variable\n  - Check for spring.application.name system property\n  - Check for application.properties file on the classpath\n  - Check for application.properties in the current working dir\n  - Check for application.yml on the classpath\n  - Check for application.yml in the current working dir\n  - Check for --spring.application.name program argument (not jvm arg) via ProcessHandle\n  - Check for --spring.application.name program argument via sun.java.command system property\n",
      "library_link": "https://spring.io/projects/spring-boot",
      "name": "spring-boot-resources",
      "scope": {
        "name": "io.opentelemetry.spring-boot-resources"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-resources"
    },
    {
      "description": "This instrumentation enhances tracing for Spring Cloud AWS. It augments the existing AWS SDK instrumentation by providing higher-level tracing for SQS operations, capturing details specific to Spring Cloud AWS SQS usage and linking them to the underlying AWS SDK traces.\n",
      "library_link": "https://spring.io/projects/spring-cloud-aws",
      "minimum_java_version": 17,
      "name": "spring-cloud-aws-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-aws-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-aws-3.0",
      "target_versions": {
        "javaagent": [
          "io.awspring.cloud:spring-cloud-aws-sqs:[3.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `spring-cloud-gateway.route` attributes (e.g., `spring-cloud-gateway.route.id`, `spring-cloud-gateway.route.uri`, etc.) on spans.\n",
          "name": "otel.instrumentation.spring-cloud-gateway.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enhances tracing for Spring Cloud Gateway. It does not generate new telemetry on its own, but rather enriches existing traces produced by other instrumentations like Netty and Spring WebFlux with Spring Cloud Gateway-specific attributes.\n",
      "library_link": "https://github.com/spring-cloud/spring-cloud-gateway",
      "name": "spring-cloud-gateway-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-gateway-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-gateway/spring-cloud-gateway-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.cloud:spring-cloud-starter-gateway:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "description": "This instrumentation ensures proper context propagation for asynchronous operations within Spring Core. It modifies how tasks are submitted and executed to ensure that spans created by other instrumentations are correctly linked across thread boundaries, rather than generating any new telemetry itself.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/package-summary.html",
      "minimum_java_version": 17,
      "name": "spring-core-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-core-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-core-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-core:[2.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation enhances tracing for Spring Data operations. It works in conjunction with other instrumentations, such as JDBC, to provide additional context and details for database interactions initiated through Spring Data.\n",
      "library_link": "https://spring.io/projects/spring-data",
      "name": "spring-data-1.8",
      "scope": {
        "name": "io.opentelemetry.spring-data-1.8"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-data/spring-data-1.8",
      "target_versions": {
        "javaagent": [
          "org.springframework.data:spring-data-commons:[1.8.0.RELEASE,]",
          "org.springframework:spring-aop:[1.2,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": "*",
          "description": "An array of Spring channel name patterns that will be intercepted.",
          "name": "otel.instrumentation.spring-integration.global-channel-interceptor-patterns",
          "type": "list"
        },
        {
          "default": false,
          "description": "Create producer spans when messages are sent to an output channel. Enable when you're using a messaging library that doesn't have its own instrumentation for generating producer spans. Note that the detection of output channels only works for Spring Cloud Stream `DirectWithAttributesChannel`.\n",
          "name": "otel.instrumentation.spring-integration.producer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables producer and consumer messaging spans for Spring Integration.",
      "library_link": "https://spring.io/projects/spring-integration",
      "name": "spring-integration-4.1",
      "scope": {
        "name": "io.opentelemetry.spring-integration-4.1"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-integration-4.1",
      "target_versions": {
        "javaagent": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,)"
        ],
        "library": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,5.+)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "otel.instrumentation.spring-integration.producer.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of consumer messaging spans for Spring JMS.",
      "library_link": "https://docs.spring.io/spring-framework/reference/integration/jms.html",
      "name": "spring-jms-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-2.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[2.0,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of consumer messaging spans for Spring JMS.",
      "library_link": "https://docs.spring.io/spring-framework/reference/integration/jms.html",
      "minimum_java_version": 17,
      "name": "spring-jms-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-6.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `kafka.record.queue_time_ms`",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables consumer messaging spans for Spring Kafka listeners.",
      "library_link": "https://spring.io/projects/spring-kafka",
      "name": "spring-kafka-2.7",
      "scope": {
        "name": "io.opentelemetry.spring-kafka-2.7"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-kafka-2.7",
      "target_versions": {
        "javaagent": [
          "org.springframework.kafka:spring-kafka:[2.7.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "kafka.record.queue_time_ms",
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "otel.instrumentation.kafka.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `messaging.pulsar.message.type` on PRODUCER spans.\n",
          "name": "otel.instrumentation.pulsar.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables consumer messaging spans for Spring Pulsar listeners.",
      "library_link": "https://spring.io/projects/spring-pulsar",
      "minimum_java_version": 17,
      "name": "spring-pulsar-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-pulsar-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-pulsar-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.pulsar:spring-pulsar:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables consumer messaging spans for Spring RabbitMQ listeners.",
      "library_link": "https://spring.io/projects/spring-amqp",
      "name": "spring-rabbit-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-rabbit-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-rabbit-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.amqp:spring-rabbit:(,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables RPC client and RPC server spans for Spring RMI applications.",
      "library_link": "https://docs.spring.io/spring-framework/docs/4.0.x/javadoc-api/org/springframework/remoting/rmi/package-summary.html",
      "name": "spring-rmi-4.0",
      "scope": {
        "name": "io.opentelemetry.spring-rmi-4.0"
      },
      "semconv": [
        "Aws"
      ],
      "source_path": "instrumentation/spring/spring-rmi-4.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[4.0.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental span attribute `job.system` with the value `spring_scheduling`.",
          "name": "otel.instrumentation.spring-scheduling.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Spring Scheduling tasks.",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/package-summary.html",
      "name": "spring-scheduling-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-scheduling-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-scheduling-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[3.1.0.RELEASE,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-scheduling.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing the enduser.id attribute.",
          "name": "otel.instrumentation.common.enduser.id.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.role attribute.",
          "name": "otel.instrumentation.common.enduser.role.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.scope attribute.",
          "name": "otel.instrumentation.common.enduser.scope.enabled",
          "type": "boolean"
        },
        {
          "default": "ROLE_",
          "description": "Prefix of granted authorities identifying roles to capture in the `enduser.role` semantic attribute.",
          "name": "otel.instrumentation.spring-security.enduser.role.granted-authority-prefix",
          "type": "string"
        },
        {
          "default": "SCOPE_",
          "description": "Prefix of granted authorities identifying scopes to capture in the `enduser.scopes` semantic attribute.",
          "name": "otel.instrumentation.spring-security.scope.role.granted-authority-prefix",
          "type": "string"
        }
      ],
      "description": "This instrumentation does not emit any telemetry on its own. Instead, it captures enduser attributes, and is only enabled when at least one of the `enduser` configurations is enabled.\nNOTE: The `enduser` attributes have been deprecated and will be removed in 3.0+ of the java agent.\n",
      "library_link": "https://spring.io/projects/spring-security",
      "markdown_content": "# OpenTelemetry Instrumentation: Spring Security Config\n\nProvides a Servlet `Filter` and a WebFlux `WebFilter` to capture `enduser.*` semantic attributes\nfrom Spring Security `Authentication` objects.\n\nAlso provides `Customizer` implementations to insert those filters into the filter chains created by\n`HttpSecurity` and `ServerHttpSecurity`, respectively.\n\n## Usage in Spring WebMVC Applications\n\nWhen not using [automatic instrumentation](../javaagent/), you can enable enduser attribute capturing\nfor a `SecurityFilterChain` by appling an `EnduserAttributesHttpSecurityCustomizer`\nto the `HttpSecurity` which constructs the `SecurityFilterChain`.\n\n```java\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.EnduserAttributesCapturer;\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.servlet.EnduserAttributesHttpSecurityCustomizer;\n\n@Configuration\n@EnableWebSecurity\nclass MyWebSecurityConfig {\n\n  @Bean\n  public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    // First, apply application related configuration to http\n\n    // Then, apply enduser.* attribute capturing\n    EnduserAttributesCapturer capturer = new EnduserAttributesCapturer();\n    // Set properties of capturer.  Defaults shown.\n    capturer.setEnduserIdEnabled(false);\n    capturer.setEnduserRoleEnabled(false);\n    capturer.setEnduserScopeEnabled(false);\n    capturer.setRoleGrantedAuthorityPrefix(\"ROLE_\");\n    capturer.setScopeGrantedAuthorityPrefix(\"SCOPE_\");\n\n    new EnduserAttributesHttpSecurityCustomizer(capturer)\n        .customize(http);\n\n    return http.build();\n  }\n}\n```\n\n## Usage in Spring WebFlux Applications\n\nWhen not using [automatic instrumentation](../javaagent/), you can enable enduser attribute capturing\nfor a `SecurityWebFilterChain` by appling an `EnduserAttributesServerHttpSecurityCustomizer`\nto the `ServerHttpSecurity` which constructs the `SecurityWebFilterChain`.\n\n```java\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.EnduserAttributesCapturer;\nimport io.opentelemetry.instrumentation.spring.security.config.v6_0.webflux.EnduserAttributesServerHttpSecurityCustomizer;\n\n@Configuration\n@EnableWebFluxSecurity\nclass MyWebFluxSecurityConfig {\n\n  @Bean\n  public SecurityWebFilterChain filterChain(ServerHttpSecurity http) throws Exception {\n    // First, apply application related configuration to http\n\n    // Then, apply enduser.* attribute capturing\n    EnduserAttributesCapturer capturer = new EnduserAttributesCapturer();\n    // Set properties of capturer.  Defaults shown.\n    capturer.setEnduserIdEnabled(false);\n    capturer.setEnduserRoleEnabled(false);\n    capturer.setEnduserScopeEnabled(false);\n    capturer.setRoleGrantedAuthorityPrefix(\"ROLE_\");\n    capturer.setScopeGrantedAuthorityPrefix(\"SCOPE_\");\n\n    new EnduserAttributesServerHttpSecurityCustomizer(capturer)\n        .customize(http);\n\n    return http.build();\n  }\n}\n```\n",
      "minimum_java_version": 17,
      "name": "spring-security-config-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-security-config-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-security-config-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.security:spring-security-config:[6.0.0,]"
        ],
        "library": [
          "io.projectreactor:reactor-core:3.5.0",
          "jakarta.servlet:jakarta.servlet-api:6.0.0",
          "org.springframework.security:spring-security-config:6.0.0",
          "org.springframework.security:spring-security-web:6.0.0",
          "org.springframework:spring-web:6.0.0"
        ]
      }
    },
    {
      "description": "This instrumentation provides a library integration that enables capturing HTTP client spans and metrics for Spring's RestTemplate. The agent integration enriches HTTP server spans and metrics with route information.\n",
      "library_link": "https://github.com/spring-projects/spring-framework",
      "markdown_content": "# Library Instrumentation for Spring Web version 3.1 and higher\n\nProvides OpenTelemetry instrumentation for Spring's RestTemplate.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `SPRING_VERSION` with the version of spring you're using.\n`Minimum version: 3.1`\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-spring-web-3.1).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <!-- opentelemetry -->\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-web-3.1</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- provides opentelemetry-sdk -->\n  <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-logging</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- required to instrument spring-web -->\n  <!-- this artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-web</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-web-3.1:OPENTELEMETRY_VERSION\")\nimplementation(\"io.opentelemetry:opentelemetry-exporter-logging:OPENTELEMETRY_VERSION\")\n\n//this artifact should already be present in your application\nimplementation(\"org.springframework:spring-web:SPRING_VERSION\")\n```\n\n### Features\n\n#### Telemetry-producing `ClientHttpRequestInterceptor` implementation\n\n`SpringWebTelemetry` allows creating a\ncustom [ClientHttpRequestInterceptor](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/client/ClientHttpRequestInterceptor.html)\nthat produces telemetry for HTTP requests sent using a `RestTemplate`. Example:\n\n##### Usage\n\n```java\n\nimport io.opentelemetry.instrumentation.spring.web.SpringWebTelemetry;\nimport io.opentelemetry.api.OpenTelemetry;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.ClientHttpRequestInterceptor;\nimport org.springframework.web.client.RestTemplate;\n\n@Configuration\npublic class RestTemplateConfig {\n\n  @Bean\n  public RestTemplate restTemplate(OpenTelemetry openTelemetry) {\n\n    RestTemplate restTemplate = new RestTemplate();\n    SpringWebTelemetry telemetry = SpringWebTelemetry.create(openTelemetry);\n    restTemplate.getInterceptors().add(telemetry.newInterceptor());\n\n    return restTemplate;\n  }\n}\n```\n\n### Starter Guide\n\nCheck out [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/) to learn more about\nusing the OpenTelemetry API to instrument your code.\n",
      "name": "spring-web-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-web-3.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-web/spring-web-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enriches HTTP server spans and metrics with route information.",
      "library_link": "https://github.com/spring-projects/spring-framework",
      "minimum_java_version": 17,
      "name": "spring-web-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-web-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-web/spring-web-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[6.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and metrics for Spring WebFlux 5.0. It also optionally enables experimental controller (INTERNAL) spans.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/package-summary.html",
      "name": "spring-webflux-5.0",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.0"
      },
      "semconv": [
        "Code",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.ipc:reactor-netty:[0.7.0.RELEASE,)",
          "io.projectreactor.netty:reactor-netty:[0.8.0.RELEASE,)",
          "org.springframework:spring-webflux:[5.0.0.RELEASE,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.controller-telemetry.enabled"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for the Spring WebFlux WebClient and Webflux server versions 5.3+ that enables HTTP client and server spans and metrics.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/package-summary.html",
      "markdown_content": "# Library Instrumentation for Spring Webflux\n\nProvides OpenTelemetry instrumentation for Spring's `WebClient` and Webflux server.\n\nFor this instrumentation, the minimum supported version of Spring Webflux is 5.3.0.\n\n## Add dependencies to your project\n\nFor Maven, add to your `pom.xml`:\n\n```xml\n\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-webflux-5.3</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- This artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webflux</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-webflux-5.3:OPENTELEMETRY_VERSION\")\n\n// this artifact should already be present in your application\nimplementation(\"org.springframework:spring-webflux:SPRING_VERSION\")\n```\n\n## Features\n\n`SpringWebfluxTelemetry` can emit a client span for each request sent using `WebClient` by\nimplementing\nthe [ExchangeFilterFunction](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/reactive/function/client/ExchangeFilterFunction.html)\ninterface.\n\n`SpringWebfluxTelemetry` can also emit a server span for each request received, by implementing\na `WebFilter` and using the OpenTelemetry Reactor instrumentation to ensure context is\npassed around correctly.\n\n### Web client instrumentation\n\nThe `WebClient` instrumentation will emit the `error.type` attribute with value `cancelled` whenever\nan outgoing HTTP request is cancelled.\n\n### Setup\n\nHere is how to set up client and server instrumentation respectively:\n\n```java\nimport io.opentelemetry.instrumentation.spring.webflux.v5_3.SpringWebfluxClientTelemetry;\nimport io.opentelemetry.instrumentation.spring.webflux.v5_3.SpringWebfluxServerTelemetry;\n\n@Configuration\npublic class WebClientConfig {\n  private final SpringWebfluxClientTelemetry webfluxClientTelemetry;\n  private final SpringWebfluxServerTelemetry webfluxServerTelemetry;\n\n  public WebClientConfig(OpenTelemetry openTelemetry) {\n    this.webfluxClientTelemetry = SpringWebfluxClientTelemetry.builder(openTelemetry).build();\n  }\n\n  // Adds instrumentation to WebClients\n  @Bean\n  public WebClient.Builder webClient() {\n    WebClient webClient = WebClient.create();\n    return webClient.mutate().filters(webfluxClientTelemetry::addFilter);\n  }\n\n  // Adds instrumentation to Webflux server\n  @Bean\n  public WebFilter webFilter() {\n    return webfluxServerTelemetry.createWebFilterAndRegisterReactorHook();\n  }\n}\n```\n\n## Starter Guide\n\nCheck\nout [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/)\nto learn more about using the OpenTelemetry API to instrument your code.\n",
      "name": "spring-webflux-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.3",
      "target_versions": {
        "library": [
          "org.springframework:spring-webflux:5.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 3.1+.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html",
      "name": "spring-webmvc-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for Spring WebMVC controllers, that enables the creation of HTTP server spans and metrics for requests processed by the Spring servlet container.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html",
      "markdown_content": "# Library Instrumentation for Spring Web MVC version 5.3 and higher\n\nProvides OpenTelemetry instrumentation for Spring WebMVC controllers.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `SPRING_VERSION` with the version of spring you're using.\n\n- `Minimum version: 5.3`\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-spring-webmvc-5.3).\n\nFor Maven add the following to your `pom.xml`:\n\n```xml\n<dependencies>\n  <!-- OpenTelemetry instrumentation -->\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-webmvc-5.3</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n   <!-- OpenTelemetry exporter -->\n   <!-- replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..) -->\n   <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-logging</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- required to instrument Spring WebMVC -->\n  <!-- this artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n\n</dependencies>\n```\n\nFor Gradle add the following to your dependencies:\n\n```groovy\n\n// OpenTelemetry instrumentation\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-5.3:OPENTELEMETRY_VERSION\")\n\n// OpenTelemetry exporter\n// replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..)\nimplementation(\"io.opentelemetry:opentelemetry-exporter-logging:OPENTELEMETRY_VERSION\")\n\n// required to instrument Spring WebMVC\n// this artifact should already be present in your application\nimplementation(\"org.springframework:spring-webmvc:SPRING_VERSION\")\n```\n\n### Features\n\n#### `SpringWebMvcTelemetry`\n\n`SpringWebMvcTelemetry` enables creating OpenTelemetry server spans around HTTP requests processed\nby the Spring servlet container.\n\n##### Usage in Spring Boot\n\nSpring Boot allows servlet `Filter`s to be registered as beans:\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.spring.webmvc.v5_3.SpringWebMvcTelemetry;\nimport javax.servlet.Filter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SpringWebMvcTelemetryConfiguration {\n\n   @Bean\n   public Filter telemetryFilter(OpenTelemetry openTelemetry) {\n      return SpringWebMvcTelemetry.create(openTelemetry).createServletFilter();\n   }\n}\n```\n\n### Starter Guide\n\nCheck\nout [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/)\nto learn more about using the OpenTelemetry API to instrument your code.\n",
      "name": "spring-webmvc-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-5.3",
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 6.0+.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html",
      "markdown_content": "# Library Instrumentation for Spring Web MVC version 6.0.0 and higher\n\nProvides OpenTelemetry instrumentation for Spring WebMVC controllers.\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `SPRING_VERSION` with the version of spring you're using.\n\n- `Minimum version: 6.0.0`\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-spring-webmvc-6.0).\n\nFor Maven add the following to your `pom.xml`:\n\n```xml\n<dependencies>\n  <!-- OpenTelemetry instrumentation -->\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-webmvc-6.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n   <!-- OpenTelemetry exporter -->\n   <!-- replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..) -->\n   <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-logging</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n\n  <!-- required to instrument Spring WebMVC -->\n  <!-- this artifact should already be present in your application -->\n  <dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-webmvc</artifactId>\n    <version>SPRING_VERSION</version>\n  </dependency>\n\n</dependencies>\n```\n\nFor Gradle add the following to your dependencies:\n\n```groovy\n\n// OpenTelemetry instrumentation\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-webmvc-6.0:OPENTELEMETRY_VERSION\")\n\n// OpenTelemetry exporter\n// replace this default exporter with your OpenTelemetry exporter (ex. otlp/zipkin/..)\nimplementation(\"io.opentelemetry:opentelemetry-exporter-logging:OPENTELEMETRY_VERSION\")\n\n// required to instrument Spring WebMVC\n// this artifact should already be present in your application\nimplementation(\"org.springframework:spring-webmvc:SPRING_VERSION\")\n```\n\n### Features\n\n#### `SpringWebMvcTelemetry`\n\n`SpringWebMvcTelemetry` enables creating OpenTelemetry server spans around HTTP requests processed\nby the Spring servlet container.\n\n##### Usage in Spring Boot\n\nSpring Boot allows servlet `Filter`s to be registered as beans:\n\n```java\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.instrumentation.spring.webmvc.v6_0.SpringWebMvcTelemetry;\nimport jakarta.servlet.Filter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SpringWebMvcTelemetryConfiguration {\n\n   @Bean\n   public Filter telemetryFilter(OpenTelemetry openTelemetry) {\n      return SpringWebMvcTelemetry.create(openTelemetry).createServletFilter();\n   }\n}\n```\n\n### Starter Guide\n\nCheck\nout [OpenTelemetry Manual Instrumentation](https://opentelemetry.io/docs/instrumentation/java/manual/)\nto learn more about using the OpenTelemetry API to instrument your code.\n",
      "minimum_java_version": 17,
      "name": "spring-webmvc-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-6.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "disabled_by_default": true,
      "library_link": "https://spring.io/projects/spring-ws",
      "name": "spring-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-ws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-ws-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.ws:spring-ws-core:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "name": "spymemcached-2.12",
      "scope": {
        "name": "io.opentelemetry.spymemcached-2.12"
      },
      "semconv": [],
      "source_path": "instrumentation/spymemcached-2.12",
      "target_versions": {
        "javaagent": [
          "net.spy:spymemcached:[2.12.0,)"
        ]
      }
    },
    {
      "name": "struts-2.3",
      "scope": {
        "name": "io.opentelemetry.struts-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[2.1.0,7)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "struts-7.0",
      "scope": {
        "name": "io.opentelemetry.struts-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[7.0.0,)"
        ]
      }
    },
    {
      "name": "tapestry-5.4",
      "scope": {
        "name": "io.opentelemetry.tapestry-5.4"
      },
      "semconv": [],
      "source_path": "instrumentation/tapestry-5.4",
      "target_versions": {
        "javaagent": [
          "org.apache.tapestry:tapestry-core:[5.4.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "tomcat-10.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-10.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[10,)"
        ]
      }
    },
    {
      "name": "tomcat-7.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[7.0.4, 10)"
        ]
      }
    },
    {
      "name": "tomcat-jdbc",
      "scope": {
        "name": "io.opentelemetry.tomcat-jdbc"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/tomcat/tomcat-jdbc",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jdbc:[8.5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connections.idle.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connections.idle.min",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The number of pending requests for an open connection, cumulative for the entire pool.",
              "name": "db.client.connections.pending_requests",
              "type": "LONG_SUM",
              "unit": "requests"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "twilio-6.6",
      "scope": {
        "name": "io.opentelemetry.twilio-6.6"
      },
      "semconv": [],
      "source_path": "instrumentation/twilio-6.6",
      "target_versions": {
        "javaagent": [
          "com.twilio.sdk:twilio:(,8.0.0)"
        ]
      }
    },
    {
      "name": "undertow-1.4",
      "scope": {
        "name": "io.opentelemetry.undertow-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/undertow-1.4",
      "target_versions": {
        "javaagent": [
          "io.undertow:undertow-core:[1.4.0.Final,)"
        ]
      }
    },
    {
      "name": "vaadin-14.2",
      "scope": {
        "name": "io.opentelemetry.vaadin-14.2"
      },
      "semconv": [],
      "source_path": "instrumentation/vaadin-14.2",
      "target_versions": {
        "javaagent": [
          "com.vaadin:flow-server:[2.2.0,3)",
          "com.vaadin:flow-server:[3.1.0,)"
        ]
      }
    },
    {
      "name": "vertx-http-client-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[3.0.0,4.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-http-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-4.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-http-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-5.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-kafka-client-3.6",
      "scope": {
        "name": "io.opentelemetry.vertx-kafka-client-3.6"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-kafka-client-3.6",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-kafka-client:[3.5.1,)"
        ]
      }
    },
    {
      "name": "vertx-redis-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-redis-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-redis-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-redis-client:[4.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.redis.database_index",
                  "type": "LONG"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "vertx-rx-java-3.5",
      "scope": {
        "name": "io.opentelemetry.vertx-rx-java-3.5"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-rx-java-3.5",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-rx-java2:[3.5.0,)"
        ]
      }
    },
    {
      "name": "vertx-sql-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.sql.table",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.user",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-sql-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.sql.table",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.user",
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "vertx-web-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-web-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-web-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-web:[3.0.0,)"
        ]
      }
    },
    {
      "description": "Instrumentation for the vibur-dbcp library, which provides connection pool metrics.",
      "library_link": "https://www.vibur.org/",
      "markdown_content": "# Library Instrumentation for Vibur DBCP version 11.0 and higher\n\nProvides OpenTelemetry instrumentation for [Vibur DBCP](https://www.vibur.org/).\n\n## Quickstart\n\n### Add these dependencies to your project\n\nReplace `OPENTELEMETRY_VERSION` with the [latest\nrelease]( https://central.sonatype.com/artifact/io.opentelemetry.instrumentation/opentelemetry-vibur-dbcp-11.0).\n\nFor Maven, add to your `pom.xml` dependencies:\n\n```xml\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-vibur-dbcp-11.0</artifactId>\n    <version>OPENTELEMETRY_VERSION</version>\n  </dependency>\n</dependencies>\n```\n\nFor Gradle, add to your dependencies:\n\n```groovy\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-vibur-dbcp-11.0:OPENTELEMETRY_VERSION\")\n```\n\n### Usage\n\nThe instrumentation library allows registering `ViburDBCPDataSource` instances for collecting\nOpenTelemetry-based metrics.\n\n```java\nViburTelemetry viburTelemetry;\n\nvoid configure(OpenTelemetry openTelemetry, ViburDBCPDataSource viburDataSource) {\n  viburTelemetry = ViburTelemetry.create(openTelemetry);\n  viburTelemetry.registerMetrics(viburDataSource);\n}\n\nvoid destroy(ViburDBCPDataSource viburDataSource) {\n  viburTelemetry.unregisterMetrics(viburDataSource);\n}\n```\n",
      "name": "vibur-dbcp-11.0",
      "scope": {
        "name": "io.opentelemetry.vibur-dbcp-11.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vibur-dbcp-11.0",
      "target_versions": {
        "javaagent": [
          "org.vibur:vibur-dbcp:[11.0,)"
        ],
        "library": [
          "org.vibur:vibur-dbcp:11.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connections.max",
              "type": "LONG_SUM",
              "unit": "connections"
            },
            {
              "attributes": [
                {
                  "name": "pool.name",
                  "type": "STRING"
                },
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connections.usage",
              "type": "LONG_SUM",
              "unit": "connections"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "otel.semconv-stability.opt-in=database"
        }
      ]
    },
    {
      "name": "wicket-8.0",
      "scope": {
        "name": "io.opentelemetry.wicket-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/wicket-8.0",
      "target_versions": {
        "javaagent": [
          "org.apache.wicket:wicket:[8.0.0,]"
        ]
      }
    },
    {
      "name": "xxl-job-1.9.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-1.9.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-1.9.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[1.9.2, 2.1.2)"
        ]
      }
    },
    {
      "name": "xxl-job-2.1.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.1.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.1.2,2.3.0)"
        ]
      }
    },
    {
      "name": "xxl-job-2.3.0",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.3.0",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.3.0,)"
        ]
      }
    },
    {
      "name": "zio-2.0",
      "scope": {
        "name": "io.opentelemetry.zio-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/zio/zio-2.0",
      "target_versions": {
        "javaagent": [
          "dev.zio:zio_2.12:[2.0.0,)",
          "dev.zio:zio_2.13:[2.0.0,)",
          "dev.zio:zio_3:[2.0.0,)"
        ]
      }
    }
  ],
  "3.0": [
    {
      "configurations": [
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.size` and `http.server.response.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP server spans and HTTP server metrics for the ActiveJ HTTP server.",
      "display_name": "ActiveJ",
      "library_link": "https://activej.io/",
      "minimum_java_version": 17,
      "name": "activej-http-6.0",
      "scope": {
        "name": "io.opentelemetry.activej-http-6.0"
      },
      "semantic_conventions": [
        "HTTP_SERVER_METRICS",
        "HTTP_SERVER_SPANS"
      ],
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/activej-http-6.0",
      "target_versions": {
        "javaagent": [
          "io.activej:activej-http:[6.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides context propagation for Akka actors, it does not emit any telemetry on its own.",
      "display_name": "Akka Actors",
      "features": [
        "CONTEXT_PROPAGATION"
      ],
      "library_link": "https://doc.akka.io/libraries/akka-core/current/typed/index.html",
      "name": "akka-actor-2.3",
      "scope": {
        "name": "io.opentelemetry.akka-actor-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-2.3",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.3,)",
          "com.typesafe.akka:akka-actor_2.12:[2.3,)",
          "com.typesafe.akka:akka-actor_2.13:[2.3,)"
        ]
      }
    },
    {
      "description": "This instrumentation provides context propagation for the Akka Fork-Join Pool, it does not emit any telemetry on its own.",
      "display_name": "Akka Actors",
      "features": [
        "CONTEXT_PROPAGATION"
      ],
      "library_link": "https://doc.akka.io/libraries/akka-core/current/typed/index.html",
      "name": "akka-actor-fork-join-2.5",
      "scope": {
        "name": "io.opentelemetry.akka-actor-fork-join-2.5"
      },
      "semconv": [],
      "source_path": "instrumentation/akka/akka-actor-fork-join-2.5",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-actor_2.11:[2.5,)",
          "com.typesafe.akka:akka-actor_2.12:[2.5,2.6)",
          "com.typesafe.akka:akka-actor_2.13:[2.5.23,2.6)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.size` and `http.server.response.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and metrics for the Akka HTTP client, and HTTP server spans and metrics for the Akka HTTP server.\n",
      "display_name": "Akka HTTP",
      "features": [
        "CONTEXT_PROPAGATION",
        "HTTP_ROUTE"
      ],
      "library_link": "https://doc.akka.io/docs/akka-http/current/index.html",
      "name": "akka-http-10.0",
      "scope": {
        "name": "io.opentelemetry.akka-http-10.0"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS",
        "HTTP_SERVER_METRICS",
        "HTTP_SERVER_SPANS"
      ],
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/akka/akka-http-10.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.akka:akka-http_2.11:[10,)",
          "com.typesafe.akka:akka-http_2.12:[10,)",
          "com.typesafe.akka:akka-http_2.13:[10,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Opt-in to emit stable semantic conventions instead of the old experimental semantic conventions. Accepts a comma-separated list of semantic convention groups (e.g., `database`, `http`, `messaging`). Use `<group>/dup` to emit both old and new conventions simultaneously. Stable semantic conventions will become the default in version 3.0 of the agent.\n",
          "name": "otel.semconv-stability.opt-in",
          "type": "list"
        }
      ],
      "description": "The Alibaba Druid instrumentation generates database connection pool metrics for druid data sources.\n",
      "library_link": "https://github.com/alibaba/druid",
      "name": "alibaba-druid-1.0",
      "scope": {
        "name": "io.opentelemetry.alibaba-druid-1.0"
      },
      "semantic_conventions": [
        "DATABASE_POOL_METRICS"
      ],
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/alibaba-druid-1.0",
      "target_versions": {
        "javaagent": [
          "com.alibaba:druid:(,)"
        ],
        "library": [
          "com.alibaba:druid:1.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Opt-in to emit stable semantic conventions instead of the old experimental semantic conventions. Accepts a comma-separated list of semantic convention groups (e.g., `database`, `http`, `messaging`). Use `<group>/dup` to emit both old and new conventions simultaneously. Stable semantic conventions will become the default in version 3.0 of the agent.\n",
          "name": "otel.semconv-stability.opt-in",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database connection pools metrics for Apache DBCP.\nThe instrumentation uses `MBeanRegistration` methods for lifecycle detection, therefore it only activates if the `BasicDataSource` is registered to an `MBeanServer`. If using Spring Boot, this happens automatically as all Spring beans that support JMX registration are automatically registered by default.\n",
      "display_name": "Apache DBCP",
      "library_link": "https://commons.apache.org/proper/commons-dbcp/",
      "name": "apache-dbcp-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-dbcp-2.0"
      },
      "semantic_conventions": [
        "DATABASE_POOL_METRICS"
      ],
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/apache-dbcp-2.0",
      "target_versions": {
        "javaagent": [
          "org.apache.commons:commons-dbcp2:[2,)"
        ],
        "library": [
          "org.apache.commons:commons-dbcp2:2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        }
      ],
      "description": "The Apache Dubbo instrumentation provides RPC client spans and metrics, and RPC server spans and metrics for Apache Dubbo RPC calls.\n",
      "display_name": "Apache Dubbo",
      "library_link": "https://github.com/apache/dubbo/",
      "name": "apache-dubbo-2.7",
      "scope": {
        "name": "io.opentelemetry.apache-dubbo-2.7"
      },
      "semantic_conventions": [
        "RPC_CLIENT_METRICS",
        "RPC_CLIENT_SPANS",
        "RPC_SERVER_METRICS",
        "RPC_SERVER_SPANS"
      ],
      "semconv": [
        "Aws",
        "Database Client",
        "Rpc"
      ],
      "source_path": "instrumentation/apache-dubbo-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.dubbo:dubbo:[2.7,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an outbound RPC invocation.",
              "name": "rpc.client.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The duration of an inbound RPC invocation.",
              "name": "rpc.server.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for the Apache HttpAsyncClient.",
      "display_name": "Apache HttpAsyncClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpasyncclient-4.1",
      "scope": {
        "name": "io.opentelemetry.apache-httpasyncclient-4.1"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpasyncclient-4.1",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents:httpasyncclient:[4.1,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for versions 2 and 3 of the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-2.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-2.0"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-2.0",
      "target_versions": {
        "javaagent": [
          "commons-httpclient:commons-httpclient:[2.0,4.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 4 of the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-4.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.0"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-client:(,3.0.0)",
          "org.apache.httpcomponents:httpclient:[4.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables HTTP client spans and HTTP client metrics for the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-4.3",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-4.3"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-4.3",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents:httpclient:[4.3,4.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 5 of the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-5.0",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.0"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.httpcomponents.client5:httpclient5:[5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration that enables HTTP client spans and HTTP client metrics for the Apache HttpClient.",
      "display_name": "Apache HttpClient",
      "library_link": "https://hc.apache.org/index.html",
      "name": "apache-httpclient-5.2",
      "scope": {
        "name": "io.opentelemetry.apache-httpclient-5.2"
      },
      "semantic_conventions": [
        "HTTP_CLIENT_METRICS",
        "HTTP_CLIENT_SPANS"
      ],
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/apache-httpclient/apache-httpclient-5.2",
      "target_versions": {
        "library": [
          "org.apache.httpcomponents.client5:httpclient5:5.2.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `apache-shenyu.meta.` prefixed span attributes `app-name`, `service-name`, `context-path`, `param-types`, `id`, `method-name`, `rpc-type`, `path` and `rpc-ext`.\n",
          "name": "otel.instrumentation.apache-shenyu.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation does not emit telemetry on its own. Instead, it augments existing HTTP server spans and HTTP server metrics with the HTTP route and Shenyu specific attributes.\n",
      "library_link": "https://shenyu.apache.org/",
      "name": "apache-shenyu-2.4",
      "scope": {
        "name": "io.opentelemetry.apache-shenyu-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/apache-shenyu-2.4",
      "target_versions": {
        "javaagent": [
          "org.apache.shenyu:shenyu-web:[2.4.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation enables HTTP client spans and metrics for the Armeria HTTP client, and HTTP server spans and metrics for the Armeria HTTP server.\n",
      "library_link": "https://armeria.dev/",
      "name": "armeria-1.3",
      "scope": {
        "name": "io.opentelemetry.armeria-1.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/armeria/armeria-1.3",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria:[1.3.0,)"
        ],
        "library": [
          "com.linecorp.armeria:armeria:1.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables RPC client spans and metrics for the Armeria gRPC client, and RPC server spans and metrics for the Armeria gRPC server.\n",
      "library_link": "https://armeria.dev/",
      "name": "armeria-grpc-1.14",
      "scope": {
        "name": "io.opentelemetry.armeria-grpc-1.14"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Rpc"
      ],
      "source_path": "instrumentation/armeria/armeria-grpc-1.14",
      "target_versions": {
        "javaagent": [
          "com.linecorp.armeria:armeria-grpc:[1.14.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 1 of the AsyncHttpClient (AHC) HTTP client.",
      "library_link": "https://github.com/AsyncHttpClient/async-http-client",
      "name": "async-http-client-1.9",
      "scope": {
        "name": "io.opentelemetry.async-http-client-1.9"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-1.9",
      "target_versions": {
        "javaagent": [
          "com.ning:async-http-client:[1.9.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for version 2 of the AsyncHttpClient (AHC) HTTP client.",
      "library_link": "https://github.com/AsyncHttpClient/async-http-client",
      "name": "async-http-client-2.0",
      "scope": {
        "name": "io.opentelemetry.async-http-client-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/async-http-client/async-http-client-2.0",
      "target_versions": {
        "javaagent": [
          "org.asynchttpclient:async-http-client:[2.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it hooks into the Avaje Jex Context to extract the HTTP route and attach it to existing HTTP server spans and HTTP server metrics.\n",
      "library_link": "https://avaje.io/jex/",
      "minimum_java_version": 21,
      "name": "avaje-jex-3.0",
      "scope": {
        "name": "io.opentelemetry.avaje-jex-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/avaje-jex-3.0",
      "target_versions": {
        "javaagent": [
          "io.avaje:avaje-jex:[3.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "Provides lightweight instrumentation of the Lambda core library, supporting all versions. It generates FaaS server spans with the `faas.invocation_id` attribute. Use this package if you only use `RequestStreamHandler` or know you don't use any event classes from `aws-lambda-java-events`. This also includes when you are using `aws-serverless-java-container` to run e.g., a Spring Boot application on Lambda.\nFor custom wrappers when using library instrumentation, you can configure the `OTEL_INSTRUMENTATION_AWS_LAMBDA_HANDLER` environment variable to contain your lambda handler method (in the format `package.ClassName::methodName`) and use one of wrappers as your lambda `Handler`.\n",
      "library_link": "https://docs.aws.amazon.com/lambda/latest/dg/java-handler.html",
      "name": "aws-lambda-core-1.0",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-core-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/aws-lambda/aws-lambda-core-1.0",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This version of the library instrumentation is deprecated, please use the `aws-lambda-events-3.11` library instrumentation instead. This instrumentation builds on top of the `aws-lambda-core-1.0` instrumentation, expanding support to cover the Lambda library, including standard and custom event types.\n",
      "library_link": "https://docs.aws.amazon.com/lambda/latest/dg/java-handler.html",
      "name": "aws-lambda-events-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-events-2.2"
      },
      "semconv": [
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-lambda/aws-lambda-events-2.2",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-lambda-java-core:[1.0.0,)"
        ],
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0",
          "com.amazonaws:aws-lambda-java-events:2.2.1"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                },
                {
                  "name": "faas.trigger",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": 10000,
          "description": "Flush timeout in milliseconds.",
          "name": "otel.instrumentation.aws-lambda.flush-timeout",
          "type": "int"
        }
      ],
      "description": "This instrumentation builds on top of the `aws-lambda-core-1.0` instrumentation, expanding support to cover the Lambda library, including standard and custom event types.\n",
      "library_link": "https://docs.aws.amazon.com/lambda/latest/dg/java-handler.html",
      "name": "aws-lambda-events-3.11",
      "scope": {
        "name": "io.opentelemetry.aws-lambda-events-3.11"
      },
      "semconv": [
        "Cloud",
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-lambda/aws-lambda-events-3.11",
      "target_versions": {
        "library": [
          "com.amazonaws:aws-lambda-java-core:1.0.0",
          "com.amazonaws:aws-lambda-java-events:3.11.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "cloud.account.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cloud.resource_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "faas.invocation_id",
                  "type": "STRING"
                },
                {
                  "name": "faas.trigger",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the experimental span attributes `aws.agent`, `aws.bucket.name`, `aws.queue.url`, `aws.queue.name`, `aws.stream.name`, `aws.table.name`, `aws.lambda.function.arn` and `aws.lambda.function.name` for AWS SDK instrumentation.\n",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation covers the AWS SDK 1.11+ client library, enabling messaging and client spans and metrics for calls to AWS services including DynamoDB, EC2, Kinesis, Lambda, RDS, S3, secrets manager, SNS/SQS and step functions.\n",
      "library_link": "https://aws.amazon.com/sdk-for-java/",
      "name": "aws-sdk-1.11",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-1.11"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-1.11",
      "target_versions": {
        "javaagent": [
          "com.amazonaws:aws-java-sdk-core:[1.10.33,)",
          "com.amazonaws:aws-java-sdk-sqs:[1.10.33,)"
        ],
        "library": [
          "com.amazonaws:aws-java-sdk-core:1.11.0",
          "com.amazonaws:aws-java-sdk-sqs:[1.11.106,1.12.583)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.table_names",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Determines whether errors returned by each individual HTTP request should be recorded as events for the SDK span.",
          "name": "otel.instrumentation.aws-sdk.experimental-record-individual-http-error",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental span attributes `aws.agent`, `aws.lambda.function.arn` and `aws.lambda.function.name` for AWS SDK instrumentation.\n",
          "name": "otel.instrumentation.aws-sdk.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether the configured TextMapPropagator should be used to inject into supported messaging attributes (for SQS).",
          "name": "otel.instrumentation.aws-sdk.experimental-use-propagator-for-messaging",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Determines whether Generative AI events include full content of user and assistant messages. Note that full content can have data privacy and size concerns and care should be taken when enabling this\n",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation covers the AWS SDK 2.2+ client library, enabling messaging and client spans and metrics for calls to AWS services including DynamoDB, EC2, Kinesis, Lambda, RDS, S3, SNS/SQS and Bedrock.\n",
      "library_link": "https://aws.amazon.com/sdk-for-java/",
      "name": "aws-sdk-2.2",
      "scope": {
        "name": "io.opentelemetry.aws-sdk-2.2"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/aws-sdk/aws-sdk-2.2",
      "target_versions": {
        "javaagent": [
          "software.amazon.awssdk:aws-core:[2.2.0,)",
          "software.amazon.awssdk:bedrock-runtime:[2.25.63,)",
          "software.amazon.awssdk:lambda:[2.17.0,)",
          "software.amazon.awssdk:sns:[2.2.0,)",
          "software.amazon.awssdk:sqs:[2.2.0,)"
        ],
        "library": [
          "software.amazon.awssdk:aws-core:2.2.0",
          "software.amazon.awssdk:aws-json-protocol:2.2.0",
          "software.amazon.awssdk:lambda:2.2.0",
          "software.amazon.awssdk:sns:2.2.0",
          "software.amazon.awssdk:sqs:2.2.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.bucket.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.global_secondary_indexes",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.limit",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.read_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.provisioned_throughput.write_capacity_units",
                  "type": "STRING"
                },
                {
                  "name": "aws.dynamodb.select",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.arn",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.function.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.lambda.resource_mapping.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.secretsmanager.secret.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.sns.topic.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.activity.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.step_functions.state_machine.arn",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "aws.stream.name",
                  "type": "STRING"
                },
                {
                  "name": "aws.table.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "aws.agent",
                  "type": "STRING"
                },
                {
                  "name": "aws.queue.url",
                  "type": "STRING"
                },
                {
                  "name": "aws.request_id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "library_link": "https://learn.microsoft.com/en-us/java/api/overview/azure/core-readme?view=azure-java-stable",
      "name": "azure-core-1.14",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.14"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.14",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.14.0,1.19.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "library_link": "https://learn.microsoft.com/en-us/java/api/overview/azure/core-readme?view=azure-java-stable",
      "name": "azure-core-1.19",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.19"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.19",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.19.0,1.36.0)"
        ]
      }
    },
    {
      "description": "This instrumentation enables context propagation for the Azure Core library, it does not emit any telemetry on its own.",
      "library_link": "https://learn.microsoft.com/en-us/java/api/overview/azure/core-readme?view=azure-java-stable",
      "name": "azure-core-1.36",
      "scope": {
        "name": "io.opentelemetry.azure-core-1.36"
      },
      "semconv": [],
      "source_path": "instrumentation/azure-core/azure-core-1.36",
      "target_versions": {
        "javaagent": [
          "com.azure:azure-core:[1.36.0,)"
        ]
      }
    },
    {
      "description": "The c3p0 instrumentation provides connection pool metrics for c3p0 data sources.",
      "library_link": "https://github.com/swaldman/c3p0",
      "name": "c3p0-0.9",
      "scope": {
        "name": "io.opentelemetry.c3p0-0.9"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/c3p0-0.9",
      "target_versions": {
        "javaagent": [
          "com.mchange:c3p0:(,)"
        ],
        "library": [
          "com.mchange:c3p0:0.9.2"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of experimental `camel.uri`, `camel.kafka.partitionKey`, `camel.kafka.key` and `camel.kafka.offset` span attributes.\n",
          "name": "otel.instrumentation.camel.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Apache Camel 2.x applications by generating spans for each route execution. For Camel versions 3.5 and newer, users should instead use the native 'camel-opentelemetry' component provided directly by the Camel project.\n",
      "library_link": "https://camel.apache.org/",
      "name": "camel-2.20",
      "scope": {
        "name": "io.opentelemetry.camel-2.20"
      },
      "semconv": [
        "Database Client",
        "HTTP",
        "Messaging"
      ],
      "source_path": "instrumentation/camel-2.20",
      "target_versions": {
        "javaagent": [
          "org.apache.camel:camel-core:[2.19,3)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "camel.uri",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "camel.uri",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            },
            {
              "attributes": [
                {
                  "name": "camel.uri",
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "otel.instrumentation.camel.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "library_link": "https://github.com/apache/cassandra-java-driver",
      "name": "cassandra-3.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-3.0"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-3.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.cassandra:cassandra-driver-core:[3.0,4.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "library_link": "https://github.com/apache/cassandra-java-driver",
      "name": "cassandra-4.0",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.0"
      },
      "semconv": [
        "Cassandra",
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-4.0",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.0,4.4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "cassandra.consistency.level",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.dc",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.page.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "cassandra.query.idempotent",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "cassandra.speculative_execution.count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "Instruments the Cassandra database client, providing database client spans and metrics for Cassandra queries.\n",
      "library_link": "https://github.com/apache/cassandra-java-driver",
      "name": "cassandra-4.4",
      "scope": {
        "name": "io.opentelemetry.cassandra-4.4"
      },
      "semconv": [
        "Cassandra",
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/cassandra/cassandra-4.4",
      "target_versions": {
        "javaagent": [
          "com.datastax.oss:java-driver-core:[4.4,]"
        ],
        "library": [
          "com.datastax.oss:java-driver-core:4.4.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "cassandra.consistency.level",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.dc",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.coordinator.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "cassandra.page.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "cassandra.query.idempotent",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "cassandra.speculative_execution.count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and metrics for the V1 ClickHouse client.",
      "library_link": "https://github.com/ClickHouse/clickhouse-java",
      "name": "clickhouse-client-v1-0.5",
      "scope": {
        "name": "io.opentelemetry.clickhouse-client-v1-0.5"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/clickhouse/clickhouse-client-v1-0.5",
      "target_versions": {
        "javaagent": [
          "com.clickhouse.client:clickhouse-client:[0.5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and metrics for the V2 ClickHouse client.",
      "library_link": "https://github.com/ClickHouse/clickhouse-java",
      "name": "clickhouse-client-v2-0.8",
      "scope": {
        "name": "io.opentelemetry.clickhouse-client-v2-0.8"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/clickhouse/clickhouse-client-v2-0.8",
      "target_versions": {
        "javaagent": [
          "com.clickhouse:client-v2:[0.6.4,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables database client spans and database client metrics for Couchbase 2.0 operations. It automatically traces key-value operations (get, upsert, replace, remove), view queries, N1QL queries, and cluster management operations.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-2.0",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/couchbase/couchbase-2.0",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2,3)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental span attributes `couchbase.operation_id` and `couchbase.local.address`. Different operation types receive different experimental attributes.\n",
          "name": "otel.instrumentation.couchbase.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Couchbase 2.6 operations. It automatically traces key-value operations (get, upsert, replace, remove), view queries, N1QL queries, and cluster management operations.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-2.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-2.6"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/couchbase/couchbase-2.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[2.6.0,3)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "couchbase.local.address",
                  "type": "STRING"
                },
                {
                  "name": "couchbase.operation_id",
                  "type": "STRING"
                },
                {
                  "name": "db.name",
                  "type": "STRING"
                },
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.statement",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.couchbase.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project for versions 3+. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-3.1",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1,3.1.6)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project for versions 3+. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-3.1.6",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.1.6",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.1.6,3.2.0)"
        ]
      }
    },
    {
      "description": "Couchbase instrumentation is owned by the Couchbase project for versions 3+. This instrumentation automatically configures the instrumentation provided by the Couchbase library.\n",
      "library_link": "https://github.com/couchbase/couchbase-java-client",
      "name": "couchbase-3.2",
      "scope": {
        "name": "io.opentelemetry.couchbase-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/couchbase/couchbase-3.2",
      "target_versions": {
        "javaagent": [
          "com.couchbase.client:java-client:[3.2.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the dropwizard metrics instrumentation.",
          "name": "otel.instrumentation.dropwizard-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "The dropwizard-metrics instrumentation for the dropwizard/codahale metrics library produces OpenTelemetry compliant versions of the metrics generated by the Dropwizard MetricRegistry.\nThe Dropwizard metrics API does not have a concept of metric labels/tags/attributes, thus the data produced by this integration might be of very low quality, depending on how the API is used in the instrumented application.\n",
      "disabled_by_default": true,
      "library_link": "https://metrics.dropwizard.io/4.2.0/",
      "name": "dropwizard-metrics-4.0",
      "scope": {
        "name": "io.opentelemetry.dropwizard-metrics-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-metrics-4.0",
      "target_versions": {
        "javaagent": [
          "io.dropwizard.metrics:metrics-core:[4.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the creation of spans for Dropwizard views.",
      "library_link": "https://www.dropwizard.io/en/latest/manual/views.html",
      "name": "dropwizard-views-0.7",
      "scope": {
        "name": "io.opentelemetry.dropwizard-views-0.7"
      },
      "semconv": [],
      "source_path": "instrumentation/dropwizard/dropwizard-views-0.7",
      "target_versions": {
        "javaagent": [
          "io.dropwizard:dropwizard-views:(,3.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.view-telemetry.enabled=true"
        }
      ]
    },
    {
      "description": "This instrumentation extends the elasticsearch-rest-7.0 instrumentation by adding additional `db.elasticsearch.path_parts.id` and `db.elasticsearch.path_parts.index` attributes to Elasticsearch database client spans. Versions 8.10 and later of the client have native support for OpenTelemetry.\n",
      "library_link": "https://www.elastic.co/docs/reference/elasticsearch/clients/java",
      "name": "elasticsearch-api-client-7.16",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-api-client-7.16"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-api-client-7.16",
      "target_versions": {
        "javaagent": [
          "co.elastic.clients:elasticsearch-java:[7.16,7.17.20)",
          "co.elastic.clients:elasticsearch-java:[8.0.0,8.10)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.elasticsearch.path_parts.id",
                  "type": "STRING"
                },
                {
                  "name": "db.elasticsearch.path_parts.index",
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch REST clients.",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-rest",
      "name": "elasticsearch-rest-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[5.0,6.4)",
          "org.elasticsearch.client:rest:[5.0,6.4)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch REST clients.",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-rest",
      "name": "elasticsearch-rest-6.4",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-6.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-6.4",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[6.4,7.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of search query bodies. It is important to note that Elasticsearch queries may contain personal or sensitive information.\n",
          "name": "otel.instrumentation.elasticsearch.capture-search-query",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch REST clients.",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-rest",
      "name": "elasticsearch-rest-7.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-rest-7.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-rest-7.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:elasticsearch-rest-client:[7.0,)"
        ],
        "library": [
          "org.elasticsearch.client:elasticsearch-rest-client:7.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of the experimental span attributes `elasticsearch.action`, `elasticsearch.id`, `elasticsearch.request`, `elasticsearch.request.indices`, `elasticsearch.request.write.routing`, `elasticsearch.request.write.type`, `elasticsearch.response.status`, `elasticsearch.shard.replication.failed`, `elasticsearch.shard.replication.successful`, `elasticsearch.shard.replication.total`, `elasticsearch.type`, and `elasticsearch.version`.\n",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-api/",
      "name": "elasticsearch-transport-5.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.0.0,5.3.0)",
          "org.elasticsearch:elasticsearch:[5.0.0,5.3.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of `elasticsearch.action`, `elasticsearch.id`, `elasticsearch.request`, `elasticsearch.request.indices`, `elasticsearch.request.search.types`, `elasticsearch.request.write.type`, `elasticsearch.request.write.version`, `elasticsearch.response.status`, `elasticsearch.shard.broadcast.failed`, `elasticsearch.shard.broadcast.successful`, `elasticsearch.shard.broadcast.total`, `elasticsearch.shard.replication.failed`, `elasticsearch.shard.replication.successful`, `elasticsearch.shard.replication.total`, `elasticsearch.type`, and `elasticsearch.version` experimental span attributes.\n",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-api/",
      "name": "elasticsearch-transport-5.3",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-5.3"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-5.3",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[5.3.0,6.0.0)",
          "org.elasticsearch:elasticsearch:[5.3.0,6.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.search.types",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.broadcast.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the capture of `elasticsearch.action`, `elasticsearch.id`, `elasticsearch.request`, `elasticsearch.request.indices`, `elasticsearch.request.write.type`, `elasticsearch.request.write.version`, `elasticsearch.response.status`, `elasticsearch.shard.replication.failed`, `elasticsearch.shard.replication.successful`, `elasticsearch.shard.replication.total`, `elasticsearch.type`, and `elasticsearch.version` experimental span attributes.\n",
          "name": "otel.instrumentation.elasticsearch.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Elasticsearch transport client requests. Each call produces a span named after the Elasticsearch action, enriched with transport-specific attributes.\n",
      "library_link": "https://www.elastic.co/guide/en/elasticsearch/client/java-api/",
      "name": "elasticsearch-transport-6.0",
      "scope": {
        "name": "io.opentelemetry.elasticsearch-transport-6.0"
      },
      "semconv": [
        "Database Client",
        "Network"
      ],
      "source_path": "instrumentation/elasticsearch/elasticsearch-transport-6.0",
      "target_versions": {
        "javaagent": [
          "org.elasticsearch.client:transport:[6.0.0,)",
          "org.elasticsearch:elasticsearch:[6.0.0,8.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.operation",
                  "type": "STRING"
                },
                {
                  "name": "db.system",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.action",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.id",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.indices",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.request.write.version",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.response.status",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.failed",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.successful",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.shard.replication.total",
                  "type": "LONG"
                },
                {
                  "name": "elasticsearch.type",
                  "type": "STRING"
                },
                {
                  "name": "elasticsearch.version",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "otel.instrumentation.elasticsearch.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "List of Executor subclasses to be instrumented.",
          "name": "otel.instrumentation.executors.include",
          "type": "list"
        },
        {
          "default": false,
          "description": "Whether to instrument all classes that implement the Executor interface.",
          "name": "otel.instrumentation.executors.include-all",
          "type": "boolean"
        }
      ],
      "description": "The executor instrumentation ensures that context is automatically propagated when using common Java executors (e.g., ThreadPoolExecutor, ScheduledThreadPoolExecutor, ForkJoinPool). When a task is submitted, the current context is captured and bound to the task. Then, when the task eventually runs, even if it\u2019s on a different thread, the instrumentation reactivates that context, enabling consistent correlation across concurrent and asynchronous workflows.\n",
      "library_link": "https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html",
      "name": "executors",
      "scope": {
        "name": "io.opentelemetry.executors"
      },
      "semconv": [],
      "source_path": "instrumentation/executors",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "description": "This standalone instrumentation enables metrics for Failsafe circuit breakers.",
      "library_link": "https://failsafe.dev",
      "name": "failsafe-3.0",
      "scope": {
        "name": "io.opentelemetry.failsafe-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/failsafe-3.0",
      "target_versions": {
        "library": [
          "dev.failsafe:failsafe:3.0.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "failsafe.circuit_breaker.name",
                  "type": "STRING"
                },
                {
                  "name": "failsafe.circuit_breaker.outcome",
                  "type": "STRING"
                }
              ],
              "description": "Count of circuit breaker executions.",
              "name": "failsafe.circuit_breaker.execution.count",
              "type": "LONG_SUM",
              "unit": "execution"
            },
            {
              "attributes": [
                {
                  "name": "failsafe.circuit_breaker.name",
                  "type": "STRING"
                },
                {
                  "name": "failsafe.circuit_breaker.state",
                  "type": "STRING"
                }
              ],
              "description": "Count of circuit breaker state changes.",
              "name": "failsafe.circuit_breaker.state_change.count",
              "type": "LONG_SUM",
              "unit": "execution"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation for Finagle HTTP clients and servers ensures that telemetry is correctly generated by the underlying Netty instrumentation. It augments existing telemetry by bridging the gap between Finagle's abstractions and Netty's pipeline, primarily for context propagation.\n",
      "library_link": "https://github.com/twitter/finagle",
      "name": "finagle-http-23.11",
      "scope": {
        "name": "io.opentelemetry.finagle-http-23.11"
      },
      "semconv": [],
      "source_path": "instrumentation/finagle-http-23.11",
      "target_versions": {
        "javaagent": [
          "com.twitter:finagle-http_2.12:[23.11.0,]",
          "com.twitter:finagle-http_2.13:[23.11.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation for the Finatra web framework augments the telemetry generated by the underlying Netty instrumentation. It provides more specific, high-level context, such as route information, to the spans generated by Netty.",
      "library_link": "https://github.com/twitter/finatra",
      "name": "finatra-2.9",
      "scope": {
        "name": "io.opentelemetry.finatra-2.9"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/finatra-2.9",
      "target_versions": {
        "javaagent": [
          "com.twitter:finatra-http_2.11:[2.9.0,]",
          "com.twitter:finatra-http_2.12:[2.9.0,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables database client spans and database client metrics for Apache Geode cache operations.",
      "library_link": "https://geode.apache.org/",
      "name": "geode-1.4",
      "scope": {
        "name": "io.opentelemetry.geode-1.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/geode-1.4",
      "target_versions": {
        "javaagent": [
          "org.apache.geode:geode-core:[1.4.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for Google HTTP Client requests.",
      "library_link": "https://github.com/googleapis/google-http-java-client",
      "name": "google-http-client-1.19",
      "scope": {
        "name": "io.opentelemetry.google-http-client-1.19"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/google-http-client-1.19",
      "target_versions": {
        "javaagent": [
          "com.google.http-client:google-http-client:[1.19.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enriches existing HTTP server spans with HTTP route information, and optionally enables experimental controller (INTERNAL) spans for Grails applications.\n",
      "library_link": "https://grails.apache.org/",
      "name": "grails-3.0",
      "scope": {
        "name": "io.opentelemetry.grails-3.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/grails-3.0",
      "target_versions": {
        "javaagent": [
          "org.grails:grails-web-url-mappings:[3.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.controller-telemetry.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Whether GraphQL operation name is added to the span name. WARNING: The GraphQL operation name is provided by the client and can have high cardinality. Use only when the server is not exposed to malicious clients.\n",
          "name": "otel.instrumentation.graphql.add-operation-name-to-span-name.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables sanitization of sensitive information from queries so they aren't added as span attributes.",
          "name": "otel.instrumentation.graphql.query-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for GraphQL Java operations.",
      "library_link": "https://www.graphql-java.com/",
      "name": "graphql-java-12.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-12.0"
      },
      "semconv": [
        "Graphql"
      ],
      "source_path": "instrumentation/graphql-java/graphql-java-12.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[12,20)"
        ],
        "library": [
          "com.graphql-java:graphql-java:[12.0,19.+)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "graphql.document",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Whether GraphQL operation name is added to the span name. WARNING: The GraphQL operation name is provided by the client and can have high cardinality. Use only when the server is not exposed to malicious clients.\n",
          "name": "otel.instrumentation.graphql.add-operation-name-to-span-name.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables span generation for data fetchers.",
          "name": "otel.instrumentation.graphql.data-fetcher.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables sanitization of sensitive information from queries so they aren't added as span attributes.",
          "name": "otel.instrumentation.graphql.query-sanitizer.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Whether to create spans for trivial data fetchers. A trivial data fetcher is one that simply maps data from an object to a field.",
          "name": "otel.instrumentation.graphql.trivial-data-fetcher.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for GraphQL Java operations.",
      "library_link": "https://www.graphql-java.com/",
      "minimum_java_version": 11,
      "name": "graphql-java-20.0",
      "scope": {
        "name": "io.opentelemetry.graphql-java-20.0"
      },
      "semconv": [
        "Graphql"
      ],
      "source_path": "instrumentation/graphql-java/graphql-java-20.0",
      "target_versions": {
        "javaagent": [
          "com.graphql-java:graphql-java:[20,)"
        ],
        "library": [
          "com.graphql-java:graphql-java:20.0"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "graphql.document",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "graphql.document",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.field.name",
                  "type": "STRING"
                },
                {
                  "name": "graphql.field.path",
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "graphql.operation.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.graphql.data-fetcher.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.body.size` and `http.server.response.body.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP server spans and HTTP server metrics for Grizzly applications.",
      "library_link": "https://javaee.github.io/grizzly/httpserverframework.html",
      "name": "grizzly-2.3",
      "scope": {
        "name": "io.opentelemetry.grizzly-2.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/grizzly-2.3",
      "target_versions": {
        "javaagent": [
          "org.glassfish.grizzly:grizzly-http:[2.3,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of request metadata keys. gRPC client instrumentation will capture metadata values corresponding to configured keys as span attributes.\n",
          "name": "otel.instrumentation.grpc.capture-metadata.client.request",
          "type": "list"
        },
        {
          "default": "",
          "description": "A comma-separated list of request metadata keys. gRPC server instrumentation will capture metadata values corresponding to configured keys as span attributes.\n",
          "name": "otel.instrumentation.grpc.capture-metadata.server.request",
          "type": "list"
        },
        {
          "default": true,
          "description": "Determines whether to emit a span event for each individual message received and sent.",
          "name": "otel.instrumentation.grpc.emit-message-events",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental span attributes `grpc.received.message_count`, `grpc.sent.message_count` and `grpc.canceled`.\n",
          "name": "otel.instrumentation.grpc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables RPC client spans and metrics, and RPC server spans and metrics for gRPC version 1.6 and above.",
      "library_link": "https://github.com/grpc/grpc-java",
      "name": "grpc-1.6",
      "scope": {
        "name": "io.opentelemetry.grpc-1.6"
      },
      "semconv": [
        "Aws",
        "Database Client",
        "Network",
        "Rpc"
      ],
      "source_path": "instrumentation/grpc-1.6",
      "target_versions": {
        "javaagent": [
          "io.grpc:grpc-core:[1.6.0,)"
        ],
        "library": [
          "io.grpc:grpc-core:1.6.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an outbound RPC invocation.",
              "name": "rpc.client.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an inbound RPC invocation.",
              "name": "rpc.server.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an outbound RPC invocation.",
              "name": "rpc.client.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "The duration of an inbound RPC invocation.",
              "name": "rpc.server.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "ms"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "grpc.received.message_count",
                  "type": "LONG"
                },
                {
                  "name": "grpc.sent.message_count",
                  "type": "LONG"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "grpc.received.message_count",
                  "type": "LONG"
                },
                {
                  "name": "grpc.sent.message_count",
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.grpc.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "otel.instrumentation.grpc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "name": "guava-10.0",
      "scope": {
        "name": "io.opentelemetry.guava-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/guava-10.0",
      "target_versions": {
        "javaagent": [
          "com.google.guava:guava:[10.0,]"
        ],
        "library": [
          "com.google.guava:guava:10.0"
        ]
      }
    },
    {
      "description": "This instrumentation enables RPC server spans for GWT RPC requests.",
      "library_link": "https://www.gwtproject.org/",
      "name": "gwt-2.0",
      "scope": {
        "name": "io.opentelemetry.gwt-2.0"
      },
      "semconv": [
        "Aws"
      ],
      "source_path": "instrumentation/gwt-2.0",
      "target_versions": {
        "javaagent": [
          "com.google.gwt:gwt-servlet:[2.0.0,)",
          "org.gwtproject:gwt-servlet:[2.10.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate operations, including session methods (e.g., `save`, `update`, `delete`), transaction commits, and query executions.\n",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "name": "hibernate-3.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-3.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[3.3.0.GA,4.0.0.Final)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate operations, including session methods (e.g., `save`, `update`, `delete`), transaction commits, and query executions.\n",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "name": "hibernate-4.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-4.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.0.0.Final,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate operations, including session methods (e.g., `save`, `update`, `delete`), transaction commits, and query executions.\n",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "minimum_java_version": 11,
      "name": "hibernate-6.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-6.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[6.0.0.Final,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the addition of the experimental `hibernate.session_id` span attribute.",
          "name": "otel.instrumentation.hibernate.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hibernate stored procedure calls.",
      "library_link": "https://github.com/hibernate/hibernate-orm",
      "name": "hibernate-procedure-call-4.3",
      "scope": {
        "name": "io.opentelemetry.hibernate-procedure-call-4.3"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-procedure-call-4.3",
      "target_versions": {
        "javaagent": [
          "org.hibernate:hibernate-core:[4.3.0.Final,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hibernate.session_id",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hibernate.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation does not emit any telemetry on its own. Instead, it enables context propagation for Hibernate Reactive asynchronous operations.\n",
      "library_link": "https://hibernate.org/reactive/",
      "name": "hibernate-reactive-1.0",
      "scope": {
        "name": "io.opentelemetry.hibernate-reactive-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/hibernate/hibernate-reactive-1.0",
      "target_versions": {
        "javaagent": [
          "org.hibernate.reactive:hibernate-reactive-core:(,)"
        ]
      }
    },
    {
      "description": "This instrumentation provides database client metrics for HikariCP 3.0+ connection pools. It reports metrics like connection timeouts, creation time, wait time, and usage time, along with connection pool statistics such as the number of active, idle, and pending connections.\n",
      "library_link": "https://github.com/brettwooldridge/HikariCP",
      "name": "hikaricp-3.0",
      "scope": {
        "name": "io.opentelemetry.hikaricp-3.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/hikaricp-3.0",
      "target_versions": {
        "javaagent": [
          "com.zaxxer:HikariCP:[3.0.0,)"
        ],
        "library": [
          "com.zaxxer:HikariCP:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to create a new connection.",
              "name": "db.client.connection.create_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connection timeouts that have occurred trying to obtain a connection from the pool.",
              "name": "db.client.connection.timeouts",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "timeout"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time between borrowing a connection and returning it to the pool.",
              "name": "db.client.connection.use_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The time it took to obtain an open connection from the pool.",
              "name": "db.client.connection.wait_time",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables the generation of HTTP client spans and HTTP client metrics for requests made using `java.net.HttpURLConnection`.\n",
      "library_link": "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/HttpURLConnection.html",
      "name": "http-url-connection",
      "scope": {
        "name": "io.opentelemetry.http-url-connection"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/http-url-connection",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing the experimental `hystrix.command`, `hystrix.circuit_open` and `hystrix.group` span attributes.",
          "name": "otel.instrumentation.hystrix.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of INTERNAL spans for Hystrix command executions and fallbacks.",
      "library_link": "https://github.com/Netflix/Hystrix",
      "name": "hystrix-1.4",
      "scope": {
        "name": "io.opentelemetry.hystrix-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/hystrix-1.4",
      "target_versions": {
        "javaagent": [
          "com.netflix.hystrix:hystrix-core:[1.4.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "hystrix.circuit_open",
                  "type": "BOOLEAN"
                },
                {
                  "name": "hystrix.command",
                  "type": "STRING"
                },
                {
                  "name": "hystrix.group",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.hystrix.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation enables the generation of database client spans and metrics for the InfluxDB Java client.",
      "library_link": "https://github.com/influxdata/influxdb-java",
      "name": "influxdb-2.4",
      "scope": {
        "name": "io.opentelemetry.influxdb-2.4"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/influxdb-2.4",
      "target_versions": {
        "javaagent": [
          "org.influxdb:influxdb-java:[2.4,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP client telemetry.",
          "name": "otel.instrumentation.http.client.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP client telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.client.request.size` and `http.client.response.size` metrics.\n",
          "name": "otel.instrumentation.http.client.emit-experimental-telemetry",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Redact sensitive URL parameters. See https://opentelemetry.io/docs/specs/semconv/http/http-spans.",
          "name": "otel.instrumentation.http.client.experimental.redact-query-parameters",
          "type": "boolean"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and HTTP client metrics for requests made using the Java HTTP client.",
      "library_link": "https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/package-summary.html",
      "minimum_java_version": 11,
      "name": "java-http-client",
      "scope": {
        "name": "io.opentelemetry.java-http-client"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/java-http-client",
      "target_versions": {
        "javaagent": [
          "Java 11+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": "CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE",
          "description": "Configures the instrumentation to recognize an alternative set of HTTP request methods. All other methods will be treated as `_OTHER`.\n",
          "name": "otel.instrumentation.http.known-methods",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP request headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-request-headers",
          "type": "list"
        },
        {
          "default": "",
          "description": "List of HTTP response headers to capture in HTTP server telemetry.",
          "name": "otel.instrumentation.http.server.capture-response-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enable the capture of experimental HTTP server telemetry. Adds the `http.request.body.size` and `http.response.body.size` attributes to spans, and records `http.server.request.body.size` and `http.server.response.body.size` metrics.\n",
          "name": "otel.instrumentation.http.server.emit-experimental-telemetry",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP server spans and HTTP server metrics for the Java HTTP server.",
      "library_link": "https://docs.oracle.com/en/java/javase/21/docs/api/jdk.httpserver/module-summary.html",
      "name": "java-http-server",
      "scope": {
        "name": "io.opentelemetry.java-http-server"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/java-http-server",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enriches existing HTTP server spans with route information, it does not emit any telemetry on its own.",
      "library_link": "https://javalin.io/",
      "minimum_java_version": 11,
      "name": "javalin-5.0",
      "scope": {
        "name": "io.opentelemetry.javalin-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/javalin-5.0",
      "target_versions": {
        "javaagent": [
          "io.javalin:javalin:[5.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JAX-RS 1.x",
      "library_link": "https://javaee.github.io/javaee-spec/javadocs/javax/ws/rs/package-summary.html",
      "name": "jaxrs-1.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-1.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-1.0",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:jsr311-api:[0.5,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS annotated methods, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JAX-RS 2.x",
      "library_link": "https://javaee.github.io/javaee-spec/javadocs/javax/ws/rs/package-summary.html",
      "name": "jaxrs-2.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-annotations"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-annotations",
      "target_versions": {
        "javaagent": [
          "javax.ws.rs:javax.ws.rs-api:[,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using Apache CXF, and enriches existing HTTP server spans with route information.\n",
      "display_name": "Apache CXF JAX-RS 2.x",
      "library_link": "https://cxf.apache.org/",
      "name": "jaxrs-2.0-cxf-3.2",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-cxf-3.2"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-cxf-3.2",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxrs:[3.2,4)",
          "org.apache.tomee:openejb-cxf-rs:(8,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using Jersey, and enriches existing HTTP server spans with route information.\n",
      "display_name": "Eclipse Jersey JAX-RS 2.x",
      "library_link": "https://eclipse-ee4j.github.io/jersey/",
      "name": "jaxrs-2.0-jersey-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-jersey-2.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-jersey-2.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.containers:jersey-container-servlet:[2.0,3.0.0)",
          "org.glassfish.jersey.core:jersey-server:[2.0,3.0.0)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using RESTEasy, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JBoss RESTEasy JAX-RS 2.x",
      "library_link": "https://resteasy.dev/",
      "name": "jaxrs-2.0-resteasy-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-jaxrs:[3.0.0.Final,3.1.0.Final)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.5.0.Final,4)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using RESTEasy, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JBoss RESTEasy JAX-RS 2.x",
      "library_link": "https://resteasy.dev/",
      "name": "jaxrs-2.0-resteasy-3.1",
      "scope": {
        "name": "io.opentelemetry.jaxrs-2.0-resteasy-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[4.0.0.Final,6)",
          "org.jboss.resteasy:resteasy-jaxrs:[3.1.0.Final,3.5.0.Final)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS annotated methods, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JAX-RS 3.x",
      "library_link": "https://jakarta.ee/specifications/restful-ws/3.0/",
      "name": "jaxrs-3.0-annotations",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-annotations"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-annotations",
      "target_versions": {
        "javaagent": [
          "jakarta.ws.rs:jakarta.ws.rs-api:[3.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using Jersey, and enriches existing HTTP server spans with route information.\n",
      "display_name": "Eclipse Jersey JAX-RS 3.x",
      "library_link": "https://eclipse-ee4j.github.io/jersey/",
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-jersey-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-jersey-3.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-jersey-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish.jersey.core:jersey-server:[3.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the experimental `jaxrs.canceled` span attribute.",
          "name": "otel.instrumentation.jaxrs.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables spans for JAX-RS methods when using RESTEasy, and enriches existing HTTP server spans with route information.\n",
      "display_name": "JBoss RESTEasy JAX-RS 3.x",
      "library_link": "https://resteasy.dev/",
      "minimum_java_version": 11,
      "name": "jaxrs-3.0-resteasy-6.0",
      "scope": {
        "name": "io.opentelemetry.jaxrs-3.0-resteasy-6.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/jaxrs/jaxrs-3.0/jaxrs-3.0-resteasy-6.0",
      "target_versions": {
        "javaagent": [
          "org.jboss.resteasy:resteasy-core:[6.0.0.Final,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "jaxrs.canceled",
                  "type": "BOOLEAN"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.jaxrs.experimental-span-attributes=true"
        }
      ]
    },
    {
      "name": "jaxws-2.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0",
      "target_versions": {
        "javaagent": [
          "javax.xml.ws:jaxws-api:[2.0,]"
        ]
      }
    },
    {
      "name": "jaxws-2.0-axis2-1.6",
      "scope": {
        "name": "io.opentelemetry.jaxws-2.0-axis2-1.6"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-2.0-axis2-1.6",
      "target_versions": {
        "javaagent": [
          "org.apache.axis2:axis2-jaxws:[1.6.0,)"
        ]
      }
    },
    {
      "name": "jaxws-cxf-3.0",
      "scope": {
        "name": "io.opentelemetry.jaxws-cxf-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-cxf-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.cxf:cxf-rt-frontend-jaxws:[3.0.0,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "jaxws-jws-api-1.1",
      "scope": {
        "name": "io.opentelemetry.jaxws-jws-api-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-jws-api-1.1",
      "target_versions": {
        "javaagent": [
          "javax.jws:javax.jws-api:[1.1,]"
        ]
      }
    },
    {
      "name": "jaxws-metro-2.2",
      "scope": {
        "name": "io.opentelemetry.jaxws-metro-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jaxws/jaxws-metro-2.2",
      "target_versions": {
        "javaagent": [
          "com.sun.xml.ws:jaxws-rt:[2.2.0.1,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-appender-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-appender-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-appender-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "name": "jboss-logmanager-mdc-1.1",
      "scope": {
        "name": "io.opentelemetry.jboss-logmanager-mdc-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jboss-logmanager/jboss-logmanager-mdc-1.1",
      "target_versions": {
        "javaagent": [
          "org.jboss.logmanager:jboss-logmanager:[1.1.0.GA,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": true,
          "description": "Enables statement sanitization for database queries.",
          "name": "otel.instrumentation.common.db-statement-sanitizer.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "Used to specify a mapping from host names or IP addresses to peer services.",
          "name": "otel.instrumentation.common.peer-service-mapping",
          "type": "map"
        },
        {
          "default": false,
          "description": "Enables instrumentation of JDBC datasource connections.",
          "name": "otel.instrumentation.jdbc-datasource.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Sets whether the query parameters should be captured as span attributes named <code>db.query.parameter.&lt;key&gt;</code>. Enabling this option disables the statement sanitization.<p>WARNING: captured query parameters may contain sensitive information such as passwords, personally identifiable information or protected health info.\n",
          "name": "otel.instrumentation.jdbc.experimental.capture-query-parameters",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables experimental instrumentation to create spans for COMMIT and ROLLBACK operations.",
          "name": "otel.instrumentation.jdbc.experimental.transaction.enabled",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enables statement sanitization for database queries. Takes precedent to otel.instrumentation.common.db-statement-sanitizer.enabled.",
          "name": "otel.instrumentation.jdbc.statement-sanitizer.enabled",
          "type": "boolean"
        }
      ],
      "description": "The JDBC instrumentation provides database client spans and metrics. Each call produces a span named after the SQL verb, enriched with standard DB client attributes (system, database, operation, sanitized statement, peer address) and error details if an exception occurs.\nThere is also a \"jdbc-datasource\" instrumentation that creates spans for datasource connections, but is disabled by default due to the volume of telemetry produced.\n",
      "library_link": "https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html",
      "name": "jdbc",
      "scope": {
        "name": "io.opentelemetry.jdbc"
      },
      "semconv": [],
      "source_path": "instrumentation/jdbc",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "name": "jedis-1.4",
      "scope": {
        "name": "io.opentelemetry.jedis-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-1.4",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[1.4.0,3.0.0)"
        ]
      }
    },
    {
      "name": "jedis-3.0",
      "scope": {
        "name": "io.opentelemetry.jedis-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-3.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[3.0.0,4)"
        ]
      }
    },
    {
      "name": "jedis-4.0",
      "scope": {
        "name": "io.opentelemetry.jedis-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jedis/jedis-4.0",
      "target_versions": {
        "javaagent": [
          "redis.clients:jedis:[4.0.0-beta1,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jetty-11.0",
      "scope": {
        "name": "io.opentelemetry.jetty-11.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-11.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[11, 12)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "jetty-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-12.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[12,)"
        ]
      }
    },
    {
      "name": "jetty-8.0",
      "scope": {
        "name": "io.opentelemetry.jetty-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jetty/jetty-8.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-server:[8.0.0.v20110901,11)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "jetty-httpclient-12.0",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-12.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-12.0",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[12,)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:12.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jetty-httpclient-9.2",
      "scope": {
        "name": "io.opentelemetry.jetty-httpclient-9.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jetty-httpclient/jetty-httpclient-9.2",
      "target_versions": {
        "javaagent": [
          "org.eclipse.jetty:jetty-client:[9.2,10)"
        ],
        "library": [
          "org.eclipse.jetty:jetty-client:[9.2.0.v20140526,9.+)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jms-1.1",
      "scope": {
        "name": "io.opentelemetry.jms-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-1.1",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:(,3)",
          "javax.jms:javax.jms-api:(,)",
          "javax.jms:jms-api:(,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jms-3.0",
      "scope": {
        "name": "io.opentelemetry.jms-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jms/jms-3.0",
      "target_versions": {
        "javaagent": [
          "jakarta.jms:jakarta.jms-api:[3.0.0,)"
        ]
      }
    },
    {
      "name": "jodd-http-4.2",
      "scope": {
        "name": "io.opentelemetry.jodd-http-4.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/jodd-http-4.2",
      "target_versions": {
        "javaagent": [
          "org.jodd:jodd-http:[4.2.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "jsf-mojarra-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-1.2",
      "target_versions": {
        "javaagent": [
          "com.sun.faces:jsf-impl:[2.0,2.1)",
          "com.sun.faces:jsf-impl:[2.1,2.2)",
          "javax.faces:jsf-impl:[1.2,2)",
          "org.glassfish:jakarta.faces:[2.3.9,3)",
          "org.glassfish:javax.faces:[2.0.7,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-mojarra-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-mojarra-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-mojarra-3.0",
      "target_versions": {
        "javaagent": [
          "org.glassfish:jakarta.faces:[3,)"
        ]
      }
    },
    {
      "name": "jsf-myfaces-1.2",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-1.2",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[1.2,3)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "jsf-myfaces-3.0",
      "scope": {
        "name": "io.opentelemetry.jsf-myfaces-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/jsf/jsf-myfaces-3.0",
      "target_versions": {
        "javaagent": [
          "org.apache.myfaces.core:myfaces-impl:[3,)"
        ]
      }
    },
    {
      "name": "jsp-2.3",
      "scope": {
        "name": "io.opentelemetry.jsp-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/jsp-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jasper:[7.0.19,10)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the capture of the experimental consumer attribute \"kafka.record.queue_time_ms\"",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": true,
          "description": "Enable context propagation for kafka message producers.",
          "name": "otel.instrumentation.kafka.producer-propagation.enabled",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables messaging spans and metrics for Apache Kafka 0.11 clients. It automatically traces message production and consumption, propagates context, and emits metrics for production and consumption.\n",
      "library_link": "https://kafka.apache.org/",
      "name": "kafka-clients-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-clients:[0.11.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation provides a library integration that enables messaging spans and metrics for Apache Kafka 2.6+ clients.\n",
      "library_link": "https://kafka.apache.org/",
      "name": "kafka-clients-2.6",
      "scope": {
        "name": "io.opentelemetry.kafka-clients-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-clients/kafka-clients-2.6",
      "target_versions": {
        "library": [
          "org.apache.kafka:kafka-clients:2.6.0"
        ]
      }
    },
    {
      "library_link": "https://kafka.apache.org/documentation/streams/",
      "name": "kafka-streams-0.11",
      "scope": {
        "name": "io.opentelemetry.kafka-streams-0.11"
      },
      "semconv": [],
      "source_path": "instrumentation/kafka/kafka-streams-0.11",
      "target_versions": {
        "javaagent": [
          "org.apache.kafka:kafka-streams:[0.11.0.0,)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-1.0",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-1.0",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.0.0,1.3.8)"
        ]
      }
    },
    {
      "name": "kotlinx-coroutines-flow-1.3",
      "scope": {
        "name": "io.opentelemetry.kotlinx-coroutines-flow-1.3"
      },
      "semconv": [],
      "source_path": "instrumentation/kotlinx-coroutines/kotlinx-coroutines-flow-1.3",
      "target_versions": {
        "javaagent": [
          "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:[1.3.9,)",
          "org.jetbrains.kotlinx:kotlinx-coroutines-core:[1.3.0,1.3.8)"
        ]
      }
    },
    {
      "name": "ktor-1.0",
      "scope": {
        "name": "io.opentelemetry.ktor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-1.0",
      "target_versions": {
        "library": [
          "io.ktor:ktor-server-core:[1.0.0,1.+)"
        ]
      }
    },
    {
      "name": "ktor-2.0",
      "scope": {
        "name": "io.opentelemetry.ktor-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-2.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[2.0.0,3.0.0)",
          "io.ktor:ktor-server-core:[2.0.0,3.0.0)"
        ],
        "library": [
          "io.ktor:ktor-client-core:[2.0.0,2.+)",
          "io.ktor:ktor-server-core:[2.0.0,2.+)"
        ]
      }
    },
    {
      "name": "ktor-3.0",
      "scope": {
        "name": "io.opentelemetry.ktor-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/ktor/ktor-3.0",
      "target_versions": {
        "javaagent": [
          "io.ktor:ktor-client-core:[3.0.0,)",
          "io.ktor:ktor-server-core:[3.0.0,)"
        ],
        "library": [
          "io.ktor:ktor-client-core:3.0.0",
          "io.ktor:ktor-server-core:3.0.0"
        ]
      }
    },
    {
      "name": "kubernetes-client-7.0",
      "scope": {
        "name": "io.opentelemetry.kubernetes-client-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/kubernetes-client-7.0",
      "target_versions": {
        "javaagent": [
          "io.kubernetes:client-java-api:[7.0.0,)"
        ]
      }
    },
    {
      "name": "lettuce-4.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-4.0",
      "target_versions": {
        "javaagent": [
          "biz.paluch.redis:lettuce:[4.0.Final,)"
        ]
      }
    },
    {
      "name": "lettuce-5.0",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.0",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.0.0.RELEASE,5.1.0.RELEASE)"
        ]
      }
    },
    {
      "name": "lettuce-5.1",
      "scope": {
        "name": "io.opentelemetry.lettuce-5.1"
      },
      "semconv": [],
      "source_path": "instrumentation/lettuce/lettuce-5.1",
      "target_versions": {
        "javaagent": [
          "io.lettuce:lettuce-core:[5.1.0.RELEASE,)"
        ],
        "library": [
          "io.lettuce:lettuce-core:5.1.0.RELEASE"
        ]
      }
    },
    {
      "name": "liberty-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-20.0"
    },
    {
      "name": "liberty-dispatcher-20.0",
      "scope": {
        "name": "io.opentelemetry.liberty-dispatcher-20.0"
      },
      "semconv": [],
      "source_path": "instrumentation/liberty/liberty-dispatcher-20.0"
    },
    {
      "name": "log4j-appender-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "name": "log4j-appender-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-appender-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-appender-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.0,)"
        ],
        "library": [
          "org.apache.logging.log4j:log4j-core:2.17.0"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.17",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.17"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.17",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.17.0,)"
        ]
      }
    },
    {
      "name": "log4j-context-data-2.7",
      "scope": {
        "name": "io.opentelemetry.log4j-context-data-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-context-data/log4j-context-data-2.7",
      "target_versions": {
        "javaagent": [
          "org.apache.logging.log4j:log4j-core:[2.7,2.17.0)"
        ]
      }
    },
    {
      "name": "log4j-mdc-1.2",
      "scope": {
        "name": "io.opentelemetry.log4j-mdc-1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/log4j/log4j-mdc-1.2",
      "target_versions": {
        "javaagent": [
          "log4j:log4j:[1.2,)"
        ]
      }
    },
    {
      "name": "logback-appender-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-appender-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-appender-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[0.9.16,)"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.3.0",
          "net.logstash.logback:logstash-logback-encoder:3.0",
          "org.slf4j:slf4j-api:2.0.0"
        ]
      }
    },
    {
      "name": "logback-mdc-1.0",
      "scope": {
        "name": "io.opentelemetry.logback-mdc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/logback/logback-mdc-1.0",
      "target_versions": {
        "javaagent": [
          "ch.qos.logback:logback-classic:[1.0.0,1.2.3]"
        ],
        "library": [
          "ch.qos.logback:logback-classic:1.0.0",
          "org.slf4j:slf4j-api:1.6.4"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "micrometer-1.5",
      "scope": {
        "name": "io.opentelemetry.micrometer-1.5"
      },
      "semconv": [],
      "source_path": "instrumentation/micrometer/micrometer-1.5",
      "target_versions": {
        "javaagent": [
          "io.micrometer:micrometer-core:[1.5.0,)"
        ],
        "library": [
          "io.micrometer:micrometer-core:1.5.0"
        ]
      }
    },
    {
      "name": "mongo-3.1",
      "scope": {
        "name": "io.opentelemetry.mongo-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.1",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.1,)"
        ],
        "library": [
          "org.mongodb:mongo-java-driver:3.1.0"
        ]
      }
    },
    {
      "name": "mongo-3.7",
      "scope": {
        "name": "io.opentelemetry.mongo-3.7"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-3.7",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongo-java-driver:[3.7, 4.0)",
          "org.mongodb:mongodb-driver-core:[3.7, 4.0)"
        ]
      }
    },
    {
      "name": "mongo-4.0",
      "scope": {
        "name": "io.opentelemetry.mongo-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-4.0",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-core:[4.0,)"
        ]
      }
    },
    {
      "name": "mongo-async-3.3",
      "scope": {
        "name": "io.opentelemetry.mongo-async-3.3"
      },
      "semconv": [],
      "source_path": "instrumentation/mongo/mongo-async-3.3",
      "target_versions": {
        "javaagent": [
          "org.mongodb:mongodb-driver-async:[3.3,)"
        ]
      }
    },
    {
      "disabled_by_default": true,
      "name": "mybatis-3.2",
      "scope": {
        "name": "io.opentelemetry.mybatis-3.2"
      },
      "semconv": [],
      "source_path": "instrumentation/mybatis-3.2",
      "target_versions": {
        "javaagent": [
          "org.mybatis:mybatis:[3.2.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        }
      ],
      "description": "This instrumentation provides messaging spans for NATS",
      "name": "nats-2.17",
      "scope": {
        "name": "io.opentelemetry.nats-2.17"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/nats/nats-2.17",
      "target_versions": {
        "javaagent": [
          "io.nats:jnats:[2.17.2,)"
        ],
        "library": [
          "io.nats:jnats:2.17.2"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.temporary",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "messaging.header.captured_header",
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.temporary",
                  "semconv": true,
                  "type": "BOOLEAN"
                },
                {
                  "name": "messaging.header.captured_header",
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "netty-3.8",
      "scope": {
        "name": "io.opentelemetry.netty-3.8"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-3.8",
      "target_versions": {
        "javaagent": [
          "io.netty:netty:[3.8.0.Final,4)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.0",
      "scope": {
        "name": "io.opentelemetry.netty-4.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.0",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.0.0.Final,4.1.0.Final)",
          "io.netty:netty-codec-http:[4.0.0.Final,4.1.0.Final)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans",
          "name": "otel.instrumentation.netty.connection-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enable SSL telemetry",
          "name": "otel.instrumentation.netty.ssl-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "netty-4.1",
      "scope": {
        "name": "io.opentelemetry.netty-4.1"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/netty/netty-4.1",
      "target_versions": {
        "javaagent": [
          "io.netty:netty-all:[4.1.0.Final,5.0.0)",
          "io.netty:netty-codec-http:[4.1.0.Final,5.0.0)"
        ],
        "library": [
          "io.netty:netty-codec-http:4.1.0.Final"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "okhttp-2.2",
      "scope": {
        "name": "io.opentelemetry.okhttp-2.2"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-2.2",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp:okhttp:[2.2,3)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "okhttp-3.0",
      "scope": {
        "name": "io.opentelemetry.okhttp-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/okhttp/okhttp-3.0",
      "target_versions": {
        "javaagent": [
          "com.squareup.okhttp3:okhttp:[3.0,)"
        ],
        "library": [
          "com.squareup.okhttp3:okhttp:3.0.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables including the full content of user and assistant messages in emitted log events. Note that full content can have data privacy and size concerns, and care should be taken when enabling this.\n",
          "name": "otel.instrumentation.genai.capture-message-content",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables Gen AI client spans and metrics for OpenAI Java SDK 1.1+.",
      "library_link": "https://github.com/openai/openai-java",
      "name": "openai-java-1.1",
      "scope": {
        "name": "io.opentelemetry.openai-java-1.1"
      },
      "semconv": [
        "Gen Ai"
      ],
      "source_path": "instrumentation/openai/openai-java-1.1",
      "target_versions": {
        "javaagent": [
          "com.openai:openai-java:[1.1.0,3)"
        ],
        "library": [
          "com.openai:openai-java:1.1.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "GenAI operation duration.",
              "name": "gen_ai.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.token.type",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Measures number of input and output tokens used.",
              "name": "gen_ai.client.token.usage",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "token"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.encoding_formats",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "gen_ai.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.provider.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.frequency_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.max_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.request.presence_penalty",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.seed",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.request.stop_sequences",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.request.temperature",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.request.top_p",
                  "semconv": true,
                  "type": "DOUBLE"
                },
                {
                  "name": "gen_ai.response.finish_reasons",
                  "semconv": true,
                  "type": "STRING_ARRAY"
                },
                {
                  "name": "gen_ai.response.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.response.model",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "gen_ai.usage.input_tokens",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "gen_ai.usage.output_tokens",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-1.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-1.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[1.0,3.0)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "opensearch-rest-3.0",
      "scope": {
        "name": "io.opentelemetry.opensearch-rest-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/opensearch/opensearch-rest-3.0",
      "target_versions": {
        "javaagent": [
          "org.opensearch.client:opensearch-rest-client:[3.0,)"
        ]
      }
    },
    {
      "description": "The Oracle Universal Connection Pool (UCP) instrumentation generates connection pool metrics.",
      "library_link": "https://docs.oracle.com/database/121/JJUCP/",
      "name": "oracle-ucp-11.2",
      "scope": {
        "name": "io.opentelemetry.oracle-ucp-11.2"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/oracle-ucp-11.2",
      "target_versions": {
        "javaagent": [
          "com.oracle.database.jdbc:ucp:[,)"
        ],
        "library": [
          "com.oracle.database.jdbc:ojdbc8:12.2.0.1",
          "com.oracle.database.jdbc:ucp:11.2.0.4"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the OSHI process runtime metrics.",
          "name": "otel.instrumentation.oshi.experimental-metrics.enabled",
          "type": "boolean"
        }
      ],
      "description": "When the OSHI library is detected on the classpath, this instrumentation will use the system class loader to load classes from the oshi-core jar that are then used to generate system metrics.",
      "library_link": "https://github.com/oshi/oshi/",
      "name": "oshi",
      "scope": {
        "name": "io.opentelemetry.oshi"
      },
      "semconv": [
        "System"
      ],
      "source_path": "instrumentation/oshi",
      "target_versions": {
        "javaagent": [
          "com.github.oshi:oshi-core:[5.3.1,)"
        ],
        "library": [
          "com.github.oshi:oshi-core:5.3.1"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "default"
        },
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java CPU time",
              "name": "runtime.java.cpu_time",
              "type": "LONG_GAUGE",
              "unit": "ms"
            },
            {
              "attributes": [
                {
                  "name": "type",
                  "type": "STRING"
                }
              ],
              "description": "Runtime Java memory",
              "name": "runtime.java.memory",
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk IO",
              "name": "system.disk.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System disk operations",
              "name": "system.disk.operations",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "operations"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory usage",
              "name": "system.memory.usage",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "state",
                  "type": "STRING"
                }
              ],
              "description": "System memory utilization",
              "name": "system.memory.utilization",
              "semconv": true,
              "type": "DOUBLE_GAUGE",
              "unit": "1"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network errors",
              "name": "system.network.errors",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "errors"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network IO",
              "name": "system.network.io",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "By"
            },
            {
              "attributes": [
                {
                  "name": "device",
                  "type": "STRING"
                },
                {
                  "name": "direction",
                  "type": "STRING"
                }
              ],
              "description": "System network packets",
              "name": "system.network.packets",
              "type": "LONG_SUM",
              "unit": "packets"
            }
          ],
          "when": "otel.instrumentation.oshi.experimental-metrics.enabled=true"
        }
      ]
    },
    {
      "name": "payara",
      "scope": {
        "name": "io.opentelemetry.payara"
      },
      "semconv": [],
      "source_path": "instrumentation/payara"
    },
    {
      "name": "pekko-actor-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-actor-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/pekko/pekko-actor-1.0",
      "target_versions": {
        "javaagent": [
          "org.apache.pekko:pekko-actor_2.12:[1.0,)",
          "org.apache.pekko:pekko-actor_2.13:[1.0,)",
          "org.apache.pekko:pekko-actor_3:[1.0,)"
        ]
      }
    },
    {
      "name": "pekko-http-1.0",
      "scope": {
        "name": "io.opentelemetry.pekko-http-1.0"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/pekko/pekko-http-1.0",
      "target_versions": {
        "javaagent": [
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.12:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_2.13:[1.7,)",
          "com.softwaremill.sttp.tapir:tapir-pekko-http-server_3:[1.7,)",
          "org.apache.pekko:pekko-http_2.12:[1.0,)",
          "org.apache.pekko:pekko-http_2.13:[1.0,)",
          "org.apache.pekko:pekko-http_3:[1.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-mvc-2.4",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.4"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.4",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_2.11:[2.4.0,2.6)"
        ]
      }
    },
    {
      "name": "play-mvc-2.6",
      "scope": {
        "name": "io.opentelemetry.play-mvc-2.6"
      },
      "semconv": [],
      "source_path": "instrumentation/play/play-mvc/play-mvc-2.6",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play_$scalaVersion:[2.6.0,)",
          "com.typesafe.play:play_2.12:[2.6.0,)",
          "com.typesafe.play:play_2.13:[2.6.0,)"
        ]
      }
    },
    {
      "name": "play-ws-1.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-1.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[1.0.0,2.0.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[1.0.0,2.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.0",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.11:[2.0.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.0.0,2.1.0)",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.0.6,2.1.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "play-ws-2.1",
      "scope": {
        "name": "io.opentelemetry.play-ws-2.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/play/play-ws/play-ws-2.1",
      "target_versions": {
        "javaagent": [
          "com.typesafe.play:play-ahc-ws-standalone_2.12:[2.1.0,]",
          "com.typesafe.play:play-ahc-ws-standalone_2.13:[2.1.0,]"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "powerjob-4.0",
      "scope": {
        "name": "io.opentelemetry.powerjob-4.0"
      },
      "semconv": [],
      "source_path": "instrumentation/powerjob-4.0",
      "target_versions": {
        "javaagent": [
          "tech.powerjob:powerjob-worker:[4.0.0,)"
        ]
      }
    },
    {
      "name": "pulsar-2.8",
      "scope": {
        "name": "io.opentelemetry.pulsar-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/pulsar/pulsar-2.8",
      "target_versions": {
        "javaagent": [
          "org.apache.pulsar:pulsar-client:[2.8.0,)"
        ]
      }
    },
    {
      "name": "quarkus-resteasy-reactive",
      "scope": {
        "name": "io.opentelemetry.quarkus-resteasy-reactive"
      },
      "semconv": [],
      "source_path": "instrumentation/quarkus-resteasy-reactive",
      "target_versions": {
        "javaagent": [
          "io.quarkus:quarkus-resteasy-reactive:(,3.9.0)"
        ]
      }
    },
    {
      "name": "quartz-2.0",
      "scope": {
        "name": "io.opentelemetry.quartz-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/quartz-2.0",
      "target_versions": {
        "javaagent": [
          "org.quartz-scheduler:quartz:[2.0.0,)"
        ],
        "library": [
          "org.quartz-scheduler:quartz:2.0.0"
        ]
      }
    },
    {
      "name": "r2dbc-1.0",
      "scope": {
        "name": "io.opentelemetry.r2dbc-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/r2dbc-1.0",
      "target_versions": {
        "javaagent": [
          "io.r2dbc:r2dbc-spi:[1.0.0.RELEASE,)"
        ],
        "library": [
          "io.r2dbc:r2dbc-spi:1.0.0.RELEASE"
        ]
      }
    },
    {
      "name": "rabbitmq-2.7",
      "scope": {
        "name": "io.opentelemetry.rabbitmq-2.7"
      },
      "semconv": [],
      "source_path": "instrumentation/rabbitmq-2.7",
      "target_versions": {
        "javaagent": [
          "com.rabbitmq:amqp-client:[2.7.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.4",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.4",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.4.0,)"
        ]
      }
    },
    {
      "name": "ratpack-1.7",
      "scope": {
        "name": "io.opentelemetry.ratpack-1.7"
      },
      "semconv": [],
      "source_path": "instrumentation/ratpack/ratpack-1.7",
      "target_versions": {
        "javaagent": [
          "io.ratpack:ratpack-core:[1.7.0,)"
        ],
        "library": [
          "io.ratpack:ratpack-core:1.7.0"
        ]
      }
    },
    {
      "name": "reactor-3.1",
      "scope": {
        "name": "io.opentelemetry.reactor-3.1"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.1",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.1.0.RELEASE,)"
        ]
      }
    },
    {
      "name": "reactor-3.4",
      "scope": {
        "name": "io.opentelemetry.reactor-3.4"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-3.4",
      "target_versions": {
        "javaagent": [
          "io.projectreactor:reactor-core:[3.4.0,)"
        ]
      }
    },
    {
      "name": "reactor-kafka-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-kafka-1.0"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-kafka-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.kafka:reactor-kafka:[1.0.0,)"
        ]
      }
    },
    {
      "name": "reactor-netty-0.9",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-0.9"
      },
      "semconv": [],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-0.9",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty:[0.8.2.RELEASE,1.0.0)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enable the creation of Connect and DNS spans.",
          "name": "otel.instrumentation.reactor-netty.connection-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "name": "reactor-netty-1.0",
      "scope": {
        "name": "io.opentelemetry.reactor-netty-1.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/reactor/reactor-netty/reactor-netty-1.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.netty:reactor-netty-http:[1.0.0,)",
          "io.projectreactor.netty:reactor-netty:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.resend_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "rediscala-1.8",
      "scope": {
        "name": "io.opentelemetry.rediscala-1.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rediscala-1.8",
      "target_versions": {
        "javaagent": [
          "com.github.Ma27:rediscala_2.11:[1.8.1,)",
          "com.github.Ma27:rediscala_2.12:[1.8.1,)",
          "com.github.Ma27:rediscala_2.13:[1.9.0,)",
          "com.github.etaty:rediscala_2.11:[1.5.0,)",
          "com.github.etaty:rediscala_2.12:[1.8.0,)",
          "com.github.etaty:rediscala_2.13:[1.9.0,)",
          "io.github.rediscala:rediscala_2.13:[1.10.0,)"
        ]
      }
    },
    {
      "name": "redisson-3.0",
      "scope": {
        "name": "io.opentelemetry.redisson-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.0",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.0.0,3.17.0)"
        ]
      }
    },
    {
      "name": "redisson-3.17",
      "scope": {
        "name": "io.opentelemetry.redisson-3.17"
      },
      "semconv": [],
      "source_path": "instrumentation/redisson/redisson-3.17",
      "target_versions": {
        "javaagent": [
          "org.redisson:redisson:[3.17.0,)"
        ]
      }
    },
    {
      "name": "resources",
      "scope": {
        "name": "io.opentelemetry.resources"
      },
      "semconv": [],
      "source_path": "instrumentation/resources"
    },
    {
      "name": "restlet-1.1",
      "scope": {
        "name": "io.opentelemetry.restlet-1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-1.1",
      "target_versions": {
        "javaagent": [
          "org.restlet:org.restlet:[1.1.0, 1.2-M1)"
        ],
        "library": [
          "com.noelios.restlet:com.noelios.restlet:1.1.5",
          "org.restlet:org.restlet:[1.1.5,1.+)"
        ]
      }
    },
    {
      "name": "restlet-2.0",
      "scope": {
        "name": "io.opentelemetry.restlet-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/restlet/restlet-2.0",
      "target_versions": {
        "javaagent": [
          "org.restlet.jse:org.restlet:[2.0.0,)"
        ],
        "library": [
          "org.restlet.jse:org.restlet:2.0.2"
        ]
      }
    },
    {
      "name": "rmi",
      "scope": {
        "name": "io.opentelemetry.rmi"
      },
      "semconv": [],
      "source_path": "instrumentation/rmi",
      "target_versions": {
        "javaagent": [
          "Java 8+"
        ]
      }
    },
    {
      "name": "rocketmq-client-4.8",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-4.8"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-4.8",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client:[4.0.0,)"
        ],
        "library": [
          "org.apache.rocketmq:rocketmq-client:4.8.0"
        ]
      }
    },
    {
      "name": "rocketmq-client-5.0",
      "scope": {
        "name": "io.opentelemetry.rocketmq-client-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rocketmq/rocketmq-client/rocketmq-client-5.0",
      "target_versions": {
        "javaagent": [
          "org.apache.rocketmq:rocketmq-client-java:[5.0.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "runtime-telemetry-java17",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java17"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java17"
    },
    {
      "name": "runtime-telemetry-java8",
      "scope": {
        "name": "io.opentelemetry.runtime-telemetry-java8"
      },
      "semconv": [],
      "source_path": "instrumentation/runtime-telemetry/runtime-telemetry-java8"
    },
    {
      "name": "rxjava-2.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-2.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava2:rxjava:[2.0.6,)"
        ],
        "library": [
          "io.reactivex.rxjava2:rxjava:2.1.3"
        ]
      }
    },
    {
      "name": "rxjava-3.0",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.0",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.0.0,3.1.0]"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:[3.0.12,3.1.0)"
        ]
      }
    },
    {
      "name": "rxjava-3.1.1",
      "scope": {
        "name": "io.opentelemetry.rxjava-3.1.1"
      },
      "semconv": [],
      "source_path": "instrumentation/rxjava/rxjava-3.1.1",
      "target_versions": {
        "javaagent": [
          "io.reactivex.rxjava3:rxjava:[3.1.1,)"
        ],
        "library": [
          "io.reactivex.rxjava3:rxjava:3.1.1"
        ]
      }
    },
    {
      "name": "scala-fork-join-2.8",
      "scope": {
        "name": "io.opentelemetry.scala-fork-join-2.8"
      },
      "semconv": [],
      "source_path": "instrumentation/scala-fork-join-2.8",
      "target_versions": {
        "javaagent": [
          "org.scala-lang:scala-library:[2.8.0,2.12.0)"
        ]
      }
    },
    {
      "name": "servlet-2.2",
      "scope": {
        "name": "io.opentelemetry.servlet-2.2"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-2.2",
      "target_versions": {
        "javaagent": [
          "javax.servlet:servlet-api:[2.2, 3.0)"
        ]
      }
    },
    {
      "name": "servlet-3.0",
      "scope": {
        "name": "io.opentelemetry.servlet-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-3.0",
      "target_versions": {
        "javaagent": [
          "javax.servlet:javax.servlet-api:[3.0,)"
        ]
      }
    },
    {
      "name": "servlet-5.0",
      "scope": {
        "name": "io.opentelemetry.servlet-5.0"
      },
      "semconv": [],
      "source_path": "instrumentation/servlet/servlet-5.0",
      "target_versions": {
        "javaagent": [
          "jakarta.servlet:jakarta.servlet-api:[5.0.0,)"
        ]
      }
    },
    {
      "description": "This instrumentation does not emit telemetry on its own. Instead, it extracts the HTTP route and attaches it to HTTP server spans and HTTP server metrics.\n",
      "library_link": "https://sparkjava.com/",
      "name": "spark-2.3",
      "scope": {
        "name": "io.opentelemetry.spark-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/spark-2.3",
      "target_versions": {
        "javaagent": [
          "com.sparkjava:spark-core:[2.3,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental attribute `job.system` to spans.",
          "name": "otel.instrumentation.spring-batch.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, a new root span will be created for each chunk processing. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.experimental.chunk.new-trace",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "When enabled, spans will be created for each item processed. Please note that this may lead to a high number of spans being created.",
          "name": "otel.instrumentation.spring-batch.item.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables INTERNAL spans for jobs run by the Spring Batch framework.",
      "disabled_by_default": true,
      "library_link": "https://spring.io/projects/spring-batch",
      "name": "spring-batch-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-batch-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-batch-3.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.batch:spring-batch-core:[3.0.0.RELEASE,5)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-batch.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation configures the OpenTelemetry Micrometer bridge to receive metrics from Spring Boot Actuator. It does not produce telemetry on its own.\n",
      "disabled_by_default": true,
      "library_link": "https://spring.io/projects/spring-boot",
      "name": "spring-boot-actuator-autoconfigure-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-boot-actuator-autoconfigure-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-actuator-autoconfigure-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.boot:spring-boot-actuator-autoconfigure:[2.0.0.RELEASE,)"
        ]
      }
    },
    {
      "description": "This instrumentation automatically detects the `service.name` and `service.version` for Spring Boot applications and sets them as resource attributes.\nIt uses the following strategies (first successful wins):\n  - Check for the SPRING_APPLICATION_NAME environment variable\n  - Check for spring.application.name system property\n  - Check for application.properties file on the classpath\n  - Check for application.properties in the current working dir\n  - Check for application.yml on the classpath\n  - Check for application.yml in the current working dir\n  - Check for --spring.application.name program argument (not jvm arg) via ProcessHandle\n  - Check for --spring.application.name program argument via sun.java.command system property\n",
      "library_link": "https://spring.io/projects/spring-boot",
      "name": "spring-boot-resources",
      "scope": {
        "name": "io.opentelemetry.spring-boot-resources"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-boot-resources"
    },
    {
      "description": "This instrumentation enhances tracing for Spring Cloud AWS. It augments the existing AWS SDK instrumentation by providing higher-level tracing for SQS operations, capturing details specific to Spring Cloud AWS SQS usage and linking them to the underlying AWS SDK traces.\n",
      "library_link": "https://spring.io/projects/spring-cloud-aws",
      "minimum_java_version": 17,
      "name": "spring-cloud-aws-3.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-aws-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-aws-3.0",
      "target_versions": {
        "javaagent": [
          "io.awspring.cloud:spring-cloud-aws-sqs:[3.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables experimental `spring-cloud-gateway.route` attributes (e.g., `spring-cloud-gateway.route.id`, `spring-cloud-gateway.route.uri`, etc.) on spans.\n",
          "name": "otel.instrumentation.spring-cloud-gateway.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enhances tracing for Spring Cloud Gateway. It does not generate new telemetry on its own, but rather enriches existing traces produced by other instrumentations like Netty and Spring WebFlux with Spring Cloud Gateway-specific attributes.\n",
      "library_link": "https://github.com/spring-cloud/spring-cloud-gateway",
      "name": "spring-cloud-gateway-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-cloud-gateway-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-cloud-gateway/spring-cloud-gateway-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.cloud:spring-cloud-starter-gateway:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "description": "This instrumentation ensures proper context propagation for asynchronous operations within Spring Core. It modifies how tasks are submitted and executed to ensure that spans created by other instrumentations are correctly linked across thread boundaries, rather than generating any new telemetry itself.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/package-summary.html",
      "minimum_java_version": 17,
      "name": "spring-core-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-core-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-core-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-core:[2.0,]"
        ]
      }
    },
    {
      "description": "This instrumentation enhances tracing for Spring Data operations. It works in conjunction with other instrumentations, such as JDBC, to provide additional context and details for database interactions initiated through Spring Data.\n",
      "library_link": "https://spring.io/projects/spring-data",
      "name": "spring-data-1.8",
      "scope": {
        "name": "io.opentelemetry.spring-data-1.8"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-data/spring-data-1.8",
      "target_versions": {
        "javaagent": [
          "org.springframework.data:spring-data-commons:[1.8.0.RELEASE,]",
          "org.springframework:spring-aop:[1.2,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "Allows configuring headers to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": "*",
          "description": "An array of Spring channel name patterns that will be intercepted.",
          "name": "otel.instrumentation.spring-integration.global-channel-interceptor-patterns",
          "type": "list"
        },
        {
          "default": false,
          "description": "Create producer spans when messages are sent to an output channel. Enable when you're using a messaging library that doesn't have its own instrumentation for generating producer spans. Note that the detection of output channels only works for Spring Cloud Stream `DirectWithAttributesChannel`.\n",
          "name": "otel.instrumentation.spring-integration.producer.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables producer and consumer messaging spans for Spring Integration.",
      "library_link": "https://spring.io/projects/spring-integration",
      "name": "spring-integration-4.1",
      "scope": {
        "name": "io.opentelemetry.spring-integration-4.1"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-integration-4.1",
      "target_versions": {
        "javaagent": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,)"
        ],
        "library": [
          "org.springframework.integration:spring-integration-core:[4.1.0.RELEASE,5.+)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            },
            {
              "attributes": [
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                }
              ],
              "span_kind": "PRODUCER"
            }
          ],
          "when": "otel.instrumentation.spring-integration.producer.enabled=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of consumer messaging spans for Spring JMS.",
      "library_link": "https://docs.spring.io/spring-framework/reference/integration/jms.html",
      "name": "spring-jms-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-2.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[2.0,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables the generation of consumer messaging spans for Spring JMS.",
      "library_link": "https://docs.spring.io/spring-framework/reference/integration/jms.html",
      "minimum_java_version": 17,
      "name": "spring-jms-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-jms-6.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-jms/spring-jms-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-jms:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `kafka.record.queue_time_ms`",
          "name": "otel.instrumentation.kafka.experimental-span-attributes",
          "type": "boolean"
        },
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables consumer messaging spans for Spring Kafka listeners.",
      "library_link": "https://spring.io/projects/spring-kafka",
      "name": "spring-kafka-2.7",
      "scope": {
        "name": "io.opentelemetry.spring-kafka-2.7"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-kafka-2.7",
      "target_versions": {
        "javaagent": [
          "org.springframework.kafka:spring-kafka:[2.7.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "kafka.record.queue_time_ms",
                  "type": "LONG"
                },
                {
                  "name": "messaging.batch.message_count",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.client_id",
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.destination.partition.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.consumer.group",
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.key",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.kafka.message.offset",
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "otel.instrumentation.kafka.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        },
        {
          "default": false,
          "description": "Enables experimental receive telemetry, which will cause consumers to start a new trace, with only a span link connecting it to the producer trace.\n",
          "name": "otel.instrumentation.messaging.experimental.receive-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing experimental span attribute `messaging.pulsar.message.type` on PRODUCER spans.\n",
          "name": "otel.instrumentation.pulsar.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables consumer messaging spans for Spring Pulsar listeners.",
      "library_link": "https://spring.io/projects/spring-pulsar",
      "minimum_java_version": 17,
      "name": "spring-pulsar-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-pulsar-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-pulsar-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.pulsar:spring-pulsar:[1.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.message.id",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": "",
          "description": "A comma-separated list of header names to capture as span attributes.",
          "name": "otel.instrumentation.messaging.experimental.capture-headers",
          "type": "list"
        }
      ],
      "description": "This instrumentation enables consumer messaging spans for Spring RabbitMQ listeners.",
      "library_link": "https://spring.io/projects/spring-amqp",
      "name": "spring-rabbit-1.0",
      "scope": {
        "name": "io.opentelemetry.spring-rabbit-1.0"
      },
      "semconv": [
        "Messaging"
      ],
      "source_path": "instrumentation/spring/spring-rabbit-1.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.amqp:spring-rabbit:(,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "messaging.destination.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "messaging.message.body.size",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "messaging.operation",
                  "type": "STRING"
                },
                {
                  "name": "messaging.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CONSUMER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enables RPC client and RPC server spans for Spring RMI applications.",
      "library_link": "https://docs.spring.io/spring-framework/docs/4.0.x/javadoc-api/org/springframework/remoting/rmi/package-summary.html",
      "name": "spring-rmi-4.0",
      "scope": {
        "name": "io.opentelemetry.spring-rmi-4.0"
      },
      "semconv": [
        "Aws"
      ],
      "source_path": "instrumentation/spring/spring-rmi-4.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[4.0.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "rpc.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.service",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "rpc.system",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Adds the experimental span attribute `job.system` with the value `spring_scheduling`.",
          "name": "otel.instrumentation.spring-scheduling.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables tracing for Spring Scheduling tasks.",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/package-summary.html",
      "name": "spring-scheduling-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-scheduling-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-scheduling-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-context:[3.1.0.RELEASE,]"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "job.system",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-scheduling.experimental-span-attributes=true"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables capturing the enduser.id attribute.",
          "name": "otel.instrumentation.common.enduser.id.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.role attribute.",
          "name": "otel.instrumentation.common.enduser.role.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables capturing the enduser.scope attribute.",
          "name": "otel.instrumentation.common.enduser.scope.enabled",
          "type": "boolean"
        },
        {
          "default": "ROLE_",
          "description": "Prefix of granted authorities identifying roles to capture in the `enduser.role` semantic attribute.",
          "name": "otel.instrumentation.spring-security.enduser.role.granted-authority-prefix",
          "type": "string"
        },
        {
          "default": "SCOPE_",
          "description": "Prefix of granted authorities identifying scopes to capture in the `enduser.scopes` semantic attribute.",
          "name": "otel.instrumentation.spring-security.scope.role.granted-authority-prefix",
          "type": "string"
        }
      ],
      "description": "This instrumentation does not emit any telemetry on its own. Instead, it captures enduser attributes, and is only enabled when at least one of the `enduser` configurations is enabled.\nNOTE: The `enduser` attributes have been deprecated and will be removed in 3.0+ of the java agent.\n",
      "library_link": "https://spring.io/projects/spring-security",
      "minimum_java_version": 17,
      "name": "spring-security-config-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-security-config-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-security-config-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.security:spring-security-config:[6.0.0,]"
        ],
        "library": [
          "io.projectreactor:reactor-core:3.5.0",
          "jakarta.servlet:jakarta.servlet-api:6.0.0",
          "org.springframework.security:spring-security-config:6.0.0",
          "org.springframework.security:spring-security-web:6.0.0",
          "org.springframework:spring-web:6.0.0"
        ]
      }
    },
    {
      "description": "This instrumentation provides a library integration that enables capturing HTTP client spans and metrics for Spring's RestTemplate. The agent integration enriches HTTP server spans and metrics with route information.\n",
      "library_link": "https://github.com/spring-projects/spring-framework",
      "name": "spring-web-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-web-3.1"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-web/spring-web-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "description": "This instrumentation enriches HTTP server spans and metrics with route information.",
      "library_link": "https://github.com/spring-projects/spring-framework",
      "minimum_java_version": 17,
      "name": "spring-web-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-web-6.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-web/spring-web-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-web:[6.0.0,)"
        ]
      }
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables HTTP client spans and metrics for Spring WebFlux 5.0. It also optionally enables experimental controller (INTERNAL) spans.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/package-summary.html",
      "name": "spring-webflux-5.0",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.0"
      },
      "semconv": [
        "Code",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.0",
      "target_versions": {
        "javaagent": [
          "io.projectreactor.ipc:reactor-netty:[0.7.0.RELEASE,)",
          "io.projectreactor.netty:reactor-netty:[0.8.0.RELEASE,)",
          "org.springframework:spring-webflux:[5.0.0.RELEASE,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.common.experimental.controller-telemetry.enabled"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for the Spring WebFlux WebClient and Webflux server versions 5.3+ that enables HTTP client and server spans and metrics.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/package-summary.html",
      "name": "spring-webflux-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webflux-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webflux/spring-webflux-5.3",
      "target_versions": {
        "library": [
          "org.springframework:spring-webflux:5.3.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            },
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            },
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 3.1+.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html",
      "name": "spring-webmvc-3.1",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-3.1"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-3.1",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[3.1.0.RELEASE,6)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "description": "This instrumentation provides a library integration for Spring WebMVC controllers, that enables the creation of HTTP server spans and metrics for requests processed by the Spring servlet container.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html",
      "name": "spring-webmvc-5.3",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-5.3"
      },
      "semconv": [
        "Client",
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-5.3",
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "Duration of HTTP server requests.",
              "name": "http.server.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "client.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "http.route",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.path",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.query",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "url.scheme",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "user_agent.original",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "SERVER"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "configurations": [
        {
          "default": false,
          "description": "Enables the creation of experimental controller (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.controller-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the creation of experimental view (INTERNAL) spans.",
          "name": "otel.instrumentation.common.experimental.view-telemetry.enabled",
          "type": "boolean"
        },
        {
          "default": false,
          "description": "Enables the capture of experimental span attributes `spring-webmvc-view-name` and `spring-webmvc.view.type`.\n",
          "name": "otel.instrumentation.spring-webmvc.experimental-span-attributes",
          "type": "boolean"
        }
      ],
      "description": "This instrumentation enables optional Controller and View (INTERNAL) spans for Spring WebMVC 6.0+.\n",
      "library_link": "https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/mvc/package-summary.html",
      "minimum_java_version": 17,
      "name": "spring-webmvc-6.0",
      "scope": {
        "name": "io.opentelemetry.spring-webmvc-6.0"
      },
      "semconv": [
        "Code"
      ],
      "source_path": "instrumentation/spring/spring-webmvc/spring-webmvc-6.0",
      "target_versions": {
        "javaagent": [
          "org.springframework:spring-webmvc:[6.0.0,)"
        ]
      },
      "telemetry": [
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "default"
        },
        {
          "spans": [
            {
              "attributes": [
                {
                  "name": "code.function",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "code.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "spring-webmvc.view.type",
                  "type": "STRING"
                }
              ],
              "span_kind": "INTERNAL"
            }
          ],
          "when": "otel.instrumentation.spring-webmvc.experimental-span-attributes=true"
        }
      ]
    },
    {
      "disabled_by_default": true,
      "library_link": "https://spring.io/projects/spring-ws",
      "name": "spring-ws-2.0",
      "scope": {
        "name": "io.opentelemetry.spring-ws-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/spring/spring-ws-2.0",
      "target_versions": {
        "javaagent": [
          "org.springframework.ws:spring-ws-core:[2.0.0.RELEASE,]"
        ]
      }
    },
    {
      "name": "spymemcached-2.12",
      "scope": {
        "name": "io.opentelemetry.spymemcached-2.12"
      },
      "semconv": [],
      "source_path": "instrumentation/spymemcached-2.12",
      "target_versions": {
        "javaagent": [
          "net.spy:spymemcached:[2.12.0,)"
        ]
      }
    },
    {
      "name": "struts-2.3",
      "scope": {
        "name": "io.opentelemetry.struts-2.3"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-2.3",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[2.1.0,7)"
        ]
      }
    },
    {
      "minimum_java_version": 17,
      "name": "struts-7.0",
      "scope": {
        "name": "io.opentelemetry.struts-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/struts/struts-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.struts:struts2-core:[7.0.0,)"
        ]
      }
    },
    {
      "name": "tapestry-5.4",
      "scope": {
        "name": "io.opentelemetry.tapestry-5.4"
      },
      "semconv": [],
      "source_path": "instrumentation/tapestry-5.4",
      "target_versions": {
        "javaagent": [
          "org.apache.tapestry:tapestry-core:[5.4.0,)"
        ]
      }
    },
    {
      "minimum_java_version": 11,
      "name": "tomcat-10.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-10.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-10.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[10,)"
        ]
      }
    },
    {
      "name": "tomcat-7.0",
      "scope": {
        "name": "io.opentelemetry.tomcat-7.0"
      },
      "semconv": [],
      "source_path": "instrumentation/tomcat/tomcat-7.0",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat.embed:tomcat-embed-core:[7.0.4, 10)"
        ]
      }
    },
    {
      "name": "tomcat-jdbc",
      "scope": {
        "name": "io.opentelemetry.tomcat-jdbc"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/tomcat/tomcat-jdbc",
      "target_versions": {
        "javaagent": [
          "org.apache.tomcat:tomcat-jdbc:[8.5.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of idle open connections allowed.",
              "name": "db.client.connection.idle.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The minimum number of idle open connections allowed.",
              "name": "db.client.connection.idle.min",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of current pending requests for an open connection.",
              "name": "db.client.connection.pending_requests",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "request"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "twilio-6.6",
      "scope": {
        "name": "io.opentelemetry.twilio-6.6"
      },
      "semconv": [],
      "source_path": "instrumentation/twilio-6.6",
      "target_versions": {
        "javaagent": [
          "com.twilio.sdk:twilio:(,8.0.0)"
        ]
      }
    },
    {
      "name": "undertow-1.4",
      "scope": {
        "name": "io.opentelemetry.undertow-1.4"
      },
      "semconv": [],
      "source_path": "instrumentation/undertow-1.4",
      "target_versions": {
        "javaagent": [
          "io.undertow:undertow-core:[1.4.0.Final,)"
        ]
      }
    },
    {
      "name": "vaadin-14.2",
      "scope": {
        "name": "io.opentelemetry.vaadin-14.2"
      },
      "semconv": [],
      "source_path": "instrumentation/vaadin-14.2",
      "target_versions": {
        "javaagent": [
          "com.vaadin:flow-server:[2.2.0,3)",
          "com.vaadin:flow-server:[3.1.0,)"
        ]
      }
    },
    {
      "name": "vertx-http-client-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-3.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[3.0.0,4.0.0)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-http-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-4.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-http-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-http-client-5.0"
      },
      "semconv": [
        "Database Client",
        "HTTP"
      ],
      "source_path": "instrumentation/vertx/vertx-http-client/vertx-http-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-core:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of HTTP client requests.",
              "name": "http.client.request.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.request.method_original",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "http.response.status_code",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "network.protocol.version",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "url.full",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-kafka-client-3.6",
      "scope": {
        "name": "io.opentelemetry.vertx-kafka-client-3.6"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-kafka-client-3.6",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-kafka-client:[3.5.1,)"
        ]
      }
    },
    {
      "name": "vertx-redis-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-redis-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-redis-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-redis-client:[4.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.system.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "network.peer.port",
                  "semconv": true,
                  "type": "LONG"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-rx-java-3.5",
      "scope": {
        "name": "io.opentelemetry.vertx-rx-java-3.5"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-rx-java-3.5",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-rx-java2:[3.5.0,)"
        ]
      }
    },
    {
      "name": "vertx-sql-client-4.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-4.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-4.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[4.0.0,5)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "minimum_java_version": 11,
      "name": "vertx-sql-client-5.0",
      "scope": {
        "name": "io.opentelemetry.vertx-sql-client-5.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vertx/vertx-sql-client/vertx-sql-client-5.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-sql-client:[5.0.0,)"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "description": "Duration of database client operations.",
              "name": "db.client.operation.duration",
              "semconv": true,
              "type": "HISTOGRAM",
              "unit": "s"
            }
          ],
          "spans": [
            {
              "attributes": [
                {
                  "name": "db.collection.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.namespace",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.operation.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.query.text",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.response.status_code",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "error.type",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.address",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "server.port",
                  "semconv": true,
                  "type": "LONG"
                }
              ],
              "span_kind": "CLIENT"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "vertx-web-3.0",
      "scope": {
        "name": "io.opentelemetry.vertx-web-3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/vertx/vertx-web-3.0",
      "target_versions": {
        "javaagent": [
          "io.vertx:vertx-web:[3.0.0,)"
        ]
      }
    },
    {
      "description": "Instrumentation for the vibur-dbcp library, which provides connection pool metrics.",
      "library_link": "https://www.vibur.org/",
      "name": "vibur-dbcp-11.0",
      "scope": {
        "name": "io.opentelemetry.vibur-dbcp-11.0"
      },
      "semconv": [
        "Database Client"
      ],
      "source_path": "instrumentation/vibur-dbcp-11.0",
      "target_versions": {
        "javaagent": [
          "org.vibur:vibur-dbcp:[11.0,)"
        ],
        "library": [
          "org.vibur:vibur-dbcp:11.0"
        ]
      },
      "telemetry": [
        {
          "metrics": [
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                },
                {
                  "name": "db.client.connection.state",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The number of connections that are currently in state described by the state attribute.",
              "name": "db.client.connection.count",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            },
            {
              "attributes": [
                {
                  "name": "db.client.connection.pool.name",
                  "semconv": true,
                  "type": "STRING"
                }
              ],
              "description": "The maximum number of open connections allowed.",
              "name": "db.client.connection.max",
              "semconv": true,
              "type": "LONG_SUM",
              "unit": "connection"
            }
          ],
          "when": "default"
        }
      ]
    },
    {
      "name": "wicket-8.0",
      "scope": {
        "name": "io.opentelemetry.wicket-8.0"
      },
      "semconv": [],
      "source_path": "instrumentation/wicket-8.0",
      "target_versions": {
        "javaagent": [
          "org.apache.wicket:wicket:[8.0.0,]"
        ]
      }
    },
    {
      "name": "xxl-job-1.9.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-1.9.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-1.9.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[1.9.2, 2.1.2)"
        ]
      }
    },
    {
      "name": "xxl-job-2.1.2",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.1.2"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.1.2",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.1.2,2.3.0)"
        ]
      }
    },
    {
      "name": "xxl-job-2.3.0",
      "scope": {
        "name": "io.opentelemetry.xxl-job-2.3.0"
      },
      "semconv": [],
      "source_path": "instrumentation/xxl-job/xxl-job-2.3.0",
      "target_versions": {
        "javaagent": [
          "com.xuxueli:xxl-job-core:[2.3.0,)"
        ]
      }
    },
    {
      "name": "zio-2.0",
      "scope": {
        "name": "io.opentelemetry.zio-2.0"
      },
      "semconv": [],
      "source_path": "instrumentation/zio/zio-2.0",
      "target_versions": {
        "javaagent": [
          "dev.zio:zio_2.12:[2.0.0,)",
          "dev.zio:zio_2.13:[2.0.0,)",
          "dev.zio:zio_3:[2.0.0,)"
        ]
      }
    }
  ]
}