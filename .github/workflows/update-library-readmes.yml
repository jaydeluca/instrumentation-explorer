name: Update Library READMEs

on:
  # Run daily at 10 AM UTC (1 hour after instrumentation list update)
  schedule:
    - cron: '0 10 * * *'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      version:
        description: 'Git tag to process. Examples: "v2.9.0", "v2.8.0", "v1.32.1". Use exact GitHub release tag format. Leave empty to use latest release.'
        required: false
        type: string
        default: ''

jobs:
  update-library-readmes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        pip install requests pyyaml
    
    - name: Run README update script (default - latest release)
      if: ${{ inputs.version == '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        python scripts/update-library-readmes.py
    
    - name: Run README update script (specific version/tag)
      if: ${{ inputs.version != '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        python scripts/update-library-readmes.py --version "${{ inputs.version }}"
    
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Check for changes
      id: git-check
      run: |
        echo "Checking for changes..."
        git status
        
        # Add all files in data directory to staging to detect them
        git add data/ || true
        
        # Check if there are any changes (staged or unstaged) in the data directory
        if ! git diff --cached --exit-code --quiet data/ 2>/dev/null; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected in library README files"
          
          # Count new and modified files
          NEW_FILES=$(git diff --cached --name-only --diff-filter=A data/ | grep '\.md$' | wc -l || echo "0")
          MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=M data/ | grep '\.md$' | wc -l || echo "0")
          
          echo "new_files=$NEW_FILES" >> $GITHUB_OUTPUT
          echo "modified_files=$MODIFIED_FILES" >> $GITHUB_OUTPUT
          
          echo "New README files: $NEW_FILES"
          echo "Modified README files: $MODIFIED_FILES"
          
          echo "Changed files:"
          git diff --cached --name-only data/
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected in data directory"
        fi
    
    - name: Create Pull Request
      if: steps.git-check.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GH_PAT }}
        commit-message: 'chore: update library README files'
        title: 'Update library README files'
        body: |
          ## Automated Library README Update
          
          This PR updates the cached library README files from the OpenTelemetry Java Instrumentation repository.
          
          ### Changes:
          - **New README files**: ${{ steps.git-check.outputs.new_files }}
          - **Modified README files**: ${{ steps.git-check.outputs.modified_files }}
          
          ### Source Details:
          - **Repository**: https://github.com/open-telemetry/opentelemetry-java-instrumentation
          - **Tag/Version**: ${{ inputs.version || 'latest release' }}
          - **Target Directory**: `data/{version}/library_readme/`
          
          ### What This Does:
          Downloads README.md files from each instrumentation library's `/library/` subdirectory and stores them locally for the instrumentation explorer to reference.
          
          ### Files Updated:
          ```
          ${{ steps.git-check.outputs.changes == 'true' && 'See "Files changed" tab for details' || 'No files changed' }}
          ```
          
          **Auto-generated by GitHub Actions**
        branch: update-library-readmes
        base: main
        delete-branch: true
        
    - name: Summary
      run: |
        echo "## Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Changes detected**: ${{ steps.git-check.outputs.changes == 'true' && 'Yes' || 'No' }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.git-check.outputs.changes }}" == "true" ]]; then
          echo "- **New README files**: ${{ steps.git-check.outputs.new_files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Modified README files**: ${{ steps.git-check.outputs.modified_files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pull Request**: Created automatically" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Action**: No changes detected, no PR created" >> $GITHUB_STEP_SUMMARY
        fi
