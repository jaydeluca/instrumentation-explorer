# Instrumentation Explorer - Cursor Rules

## Project Context
This project is a web-based tool for exploring Java instrumentation libraries and their telemetry capabilities.

## Documentation Reference
Please refer to the following documentation files in the .gemini/ directory for detailed context:

### Core Documentation
- `.gemini/GEMINI.md` - Project overview and current state
- `.gemini/requirements.md` - Project requirements and specifications  
- `.gemini/plan.md` - Development roadmap and planning notes

### Technical Documentation
- `.gemini/semconv.md` - Semantic convention data fetching system
- `.gemini/telemetry_delta.md` - Telemetry version diff implementation
- `.gemini/jar-analyzer.md` - JAR analysis functionality
- `.gemini/screenshot-testing.md` - Screenshot testing setup
- `.gemini/theme-switcher.md` - Theme switching implementation
- `TESTING.md` - Testing guide for GitHub Pages routing fix and general testing setup

## Key Project Details
- **Frontend**: React + TypeScript + Vite
- **Data Processing**: Python scripts that enrich YAML instrumentation data with semantic conventions
- **Main Output**: `frontend/public/instrumentation-list-enriched.json`
- **Key Features**: Library exploration, version diffing, semantic convention highlighting

## Important Notes
- The enriched JSON is generated by `data-processing/main.py`
- Multiple instrumentation list versions are supported (2.17, 2.18, 2.19, 3.0)
- Semantic convention data is fetched from OpenTelemetry GitHub repository
- UI includes search, filtering, and detailed library views

## Development Guidelines
- Always preserve existing functionality when making changes
- Test changes across different instrumentation versions
- Ensure semantic convention highlighting continues to work
- Maintain the clean, modern UI design
- **Run tests before making changes**: Use `npm run test:all` to verify everything works
- **GitHub Pages routing**: The app uses client-side routing with a special 404.html redirect system
